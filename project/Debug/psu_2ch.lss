
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000012a2  00001336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800160  00800160  00001396  2**0
                  ALLOC
  3 .stab         00002070  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ab  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004bb3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ea       	ldi	r30, 0xA2	; 162
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 30       	cpi	r26, 0x0C	; 12
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
      9e:	0c 94 4f 09 	jmp	0x129e	; 0x129e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      c8:	80 91 70 01 	lds	r24, 0x0170
      cc:	88 23       	and	r24, r24
      ce:	c1 f0       	breq	.+48     	; 0x100 <__vector_21+0x5a>
        adc_mux_switch = true;
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
      d0:	10 92 70 01 	sts	0x0170, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
      d4:	80 91 7a 00 	lds	r24, 0x007A
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 93 7a 00 	sts	0x007A, r24

}
      de:	ff 91       	pop	r31
      e0:	ef 91       	pop	r30
      e2:	bf 91       	pop	r27
      e4:	af 91       	pop	r26
      e6:	9f 91       	pop	r25
      e8:	8f 91       	pop	r24
      ea:	7f 91       	pop	r23
      ec:	6f 91       	pop	r22
      ee:	5f 91       	pop	r21
      f0:	4f 91       	pop	r20
      f2:	3f 91       	pop	r19
      f4:	2f 91       	pop	r18
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
     100:	80 91 71 01 	lds	r24, 0x0171
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	20 91 78 00 	lds	r18, 0x0078
     10a:	40 91 79 00 	lds	r20, 0x0079
     10e:	fc 01       	movw	r30, r24
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	ec 59       	subi	r30, 0x9C	; 156
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	34 2b       	or	r19, r20
     11c:	31 83       	std	Z+1, r19	; 0x01
     11e:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	0e 94 0c 04 	call	0x818	; 0x818 <__divmodhi4>
     12a:	80 93 71 01 	sts	0x0171, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     12e:	80 91 7c 00 	lds	r24, 0x007C
     132:	80 7f       	andi	r24, 0xF0	; 240
     134:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adc_mux_index;
     138:	80 91 7c 00 	lds	r24, 0x007C
     13c:	90 91 71 01 	lds	r25, 0x0171
     140:	89 2b       	or	r24, r25
     142:	80 93 7c 00 	sts	0x007C, r24
        adc_mux_switch = true;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 70 01 	sts	0x0170, r24
     14c:	c3 cf       	rjmp	.-122    	; 0xd4 <__vector_21+0x2e>

0000014e <adc_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     14e:	ec e7       	ldi	r30, 0x7C	; 124
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 71       	andi	r24, 0x10	; 16
     156:	80 83       	st	Z, r24

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     168:	80 81       	ld	r24, Z
     16a:	8f 64       	ori	r24, 0x4F	; 79
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <adc_periodic>:
#endif

}

void adc_periodic(void)
{
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
    /* STUB */
    static uint32_t ts = 0;
    uint8_t i = 0;
    if (g_timestamp > (ts + 1000000))
     17c:	40 91 02 02 	lds	r20, 0x0202
     180:	50 91 03 02 	lds	r21, 0x0203
     184:	60 91 04 02 	lds	r22, 0x0204
     188:	70 91 05 02 	lds	r23, 0x0205
     18c:	80 91 60 01 	lds	r24, 0x0160
     190:	90 91 61 01 	lds	r25, 0x0161
     194:	a0 91 62 01 	lds	r26, 0x0162
     198:	b0 91 63 01 	lds	r27, 0x0163
     19c:	80 5c       	subi	r24, 0xC0	; 192
     19e:	9d 4b       	sbci	r25, 0xBD	; 189
     1a0:	a0 4f       	sbci	r26, 0xF0	; 240
     1a2:	bf 4f       	sbci	r27, 0xFF	; 255
     1a4:	84 17       	cp	r24, r20
     1a6:	95 07       	cpc	r25, r21
     1a8:	a6 07       	cpc	r26, r22
     1aa:	b7 07       	cpc	r27, r23
     1ac:	38 f5       	brcc	.+78     	; 0x1fc <adc_periodic+0x8c>
    {
        ts = g_timestamp;
     1ae:	40 93 60 01 	sts	0x0160, r20
     1b2:	50 93 61 01 	sts	0x0161, r21
     1b6:	60 93 62 01 	sts	0x0162, r22
     1ba:	70 93 63 01 	sts	0x0163, r23
     1be:	04 e6       	ldi	r16, 0x64	; 100
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
        for (i = 0; i < ADC_NUM; i++)
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
     1c6:	4c e1       	ldi	r20, 0x1C	; 28
     1c8:	e4 2e       	mov	r14, r20
     1ca:	41 e0       	ldi	r20, 0x01	; 1
     1cc:	f4 2e       	mov	r15, r20
     1ce:	f8 01       	movw	r30, r16
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	0e 5f       	subi	r16, 0xFE	; 254
     1d6:	1f 4f       	sbci	r17, 0xFF	; 255
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	ff 92       	push	r15
     1e2:	ef 92       	push	r14
     1e4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printf>
     1e8:	21 96       	adiw	r28, 0x01	; 1
    static uint32_t ts = 0;
    uint8_t i = 0;
    if (g_timestamp > (ts + 1000000))
    {
        ts = g_timestamp;
        for (i = 0; i < ADC_NUM; i++)
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	c6 30       	cpi	r28, 0x06	; 6
     1f8:	d1 05       	cpc	r29, r1
     1fa:	49 f7       	brne	.-46     	; 0x1ce <adc_periodic+0x5e>
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
        }
    }
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	08 95       	ret

0000020a <adc_get>:

uint16_t adc_get(e_adc_channel channel)
{
    return adc_samples[channel];
     20a:	e8 2f       	mov	r30, r24
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	ec 59       	subi	r30, 0x9C	; 156
     214:	fe 4f       	sbci	r31, 0xFE	; 254
}
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	08 95       	ret

0000021c <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     21c:	08 95       	ret

0000021e <adc_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void adc_last_reset(void)
{
     21e:	08 95       	ret

00000220 <readVcc>:
  #elif defined (__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
    ADMUX = _BV(MUX5) | _BV(MUX0);
  #elif defined (__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
    ADMUX = _BV(MUX3) | _BV(MUX2);
  #else
    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
     220:	8e e4       	ldi	r24, 0x4E	; 78
     222:	80 93 7c 00 	sts	0x007C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	8f e3       	ldi	r24, 0x3F	; 63
     228:	9f e1       	ldi	r25, 0x1F	; 31
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <readVcc+0xa>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <readVcc+0x10>
     230:	00 00       	nop
  #endif

  _delay_ms(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
     232:	80 91 7a 00 	lds	r24, 0x007A
     236:	80 64       	ori	r24, 0x40	; 64
     238:	80 93 7a 00 	sts	0x007A, r24
  while (bit_is_set(ADCSRA,ADSC)); // measuring
     23c:	80 91 7a 00 	lds	r24, 0x007A
     240:	86 fd       	sbrc	r24, 6
     242:	fc cf       	rjmp	.-8      	; 0x23c <readVcc+0x1c>

  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH
     244:	20 91 78 00 	lds	r18, 0x0078
  uint8_t high = ADCH; // unlocks both
     248:	80 91 79 00 	lds	r24, 0x0079

  long result = (high<<8) | low;
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	38 2b       	or	r19, r24
     250:	44 27       	eor	r20, r20
     252:	37 fd       	sbrc	r19, 7
     254:	40 95       	com	r20
     256:	54 2f       	mov	r21, r20

  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
     258:	64 eb       	ldi	r22, 0xB4	; 180
     25a:	7b e2       	ldi	r23, 0x2B	; 43
     25c:	81 e1       	ldi	r24, 0x11	; 17
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 20 04 	call	0x840	; 0x840 <__divmodsi4>
  return result; // Vcc in millivolts
}
     264:	ca 01       	movw	r24, r20
     266:	b9 01       	movw	r22, r18
     268:	08 95       	ret

0000026a <lib_limit>:

/* GLOBALS */
static t_psu_channel psu_channels[PSU_CHANNEL_NUM];

void lib_limit(t_value *value, t_value_scale *scale)
{
     26a:	fc 01       	movw	r30, r24
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	db 01       	movw	r26, r22
     272:	12 96       	adiw	r26, 0x02	; 2
     274:	2d 91       	ld	r18, X+
     276:	3c 91       	ld	r19, X
     278:	13 97       	sbiw	r26, 0x03	; 3
     27a:	82 17       	cp	r24, r18
     27c:	93 07       	cpc	r25, r19
     27e:	10 f4       	brcc	.+4      	; 0x284 <lib_limit+0x1a>
     280:	33 83       	std	Z+3, r19	; 0x03
     282:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     284:	db 01       	movw	r26, r22
     286:	14 96       	adiw	r26, 0x04	; 4
     288:	2d 91       	ld	r18, X+
     28a:	3c 91       	ld	r19, X
     28c:	15 97       	sbiw	r26, 0x05	; 5
     28e:	28 17       	cp	r18, r24
     290:	39 07       	cpc	r19, r25
     292:	10 f4       	brcc	.+4      	; 0x298 <lib_limit+0x2e>
     294:	33 83       	std	Z+3, r19	; 0x03
     296:	22 83       	std	Z+2, r18	; 0x02
     298:	08 95       	ret

0000029a <lib_scale>:
}

void lib_scale(t_value *value, t_value_scale *scale)
{
     29a:	2f 92       	push	r2
     29c:	3f 92       	push	r3
     29e:	4f 92       	push	r4
     2a0:	5f 92       	push	r5
     2a2:	6f 92       	push	r6
     2a4:	7f 92       	push	r7
     2a6:	8f 92       	push	r8
     2a8:	9f 92       	push	r9
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <lib_scale+0x26>
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	3b 01       	movw	r6, r22
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     2ca:	fb 01       	movw	r30, r22
     2cc:	26 80       	ldd	r2, Z+6	; 0x06
     2ce:	37 80       	ldd	r3, Z+7	; 0x07
     2d0:	02 81       	ldd	r16, Z+2	; 0x02
     2d2:	13 81       	ldd	r17, Z+3	; 0x03

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     2d4:	fc 01       	movw	r30, r24
     2d6:	60 81       	ld	r22, Z
     2d8:	71 81       	ldd	r23, Z+1	; 0x01
     2da:	60 1b       	sub	r22, r16
     2dc:	71 0b       	sbc	r23, r17
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
}

void lib_scale(t_value *value, t_value_scale *scale)
{
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     2ea:	f3 01       	movw	r30, r6
     2ec:	60 85       	ldd	r22, Z+8	; 0x08
     2ee:	71 85       	ldd	r23, Z+9	; 0x09
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
     2f8:	4b 01       	movw	r8, r22
     2fa:	5c 01       	movw	r10, r24
     2fc:	b1 01       	movw	r22, r2
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
     306:	9b 01       	movw	r18, r22
     308:	ac 01       	movw	r20, r24
     30a:	c5 01       	movw	r24, r10
     30c:	b4 01       	movw	r22, r8
     30e:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
     312:	4b 01       	movw	r8, r22
     314:	5c 01       	movw	r10, r24
     316:	f3 01       	movw	r30, r6
     318:	64 81       	ldd	r22, Z+4	; 0x04
     31a:	75 81       	ldd	r23, Z+5	; 0x05
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
     324:	2b 01       	movw	r4, r22
     326:	3c 01       	movw	r6, r24
     328:	b8 01       	movw	r22, r16
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
     332:	9b 01       	movw	r18, r22
     334:	ac 01       	movw	r20, r24
     336:	c3 01       	movw	r24, r6
     338:	b2 01       	movw	r22, r4
     33a:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
     33e:	9b 01       	movw	r18, r22
     340:	ac 01       	movw	r20, r24
     342:	c5 01       	movw	r24, r10
     344:	b4 01       	movw	r22, r8
     346:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__divsf3>
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     34e:	c7 01       	movw	r24, r14
     350:	b6 01       	movw	r22, r12
     352:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__mulsf3>
     356:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixunssfsi>
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     35a:	62 0d       	add	r22, r2
     35c:	73 1d       	adc	r23, r3
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     35e:	e9 81       	ldd	r30, Y+1	; 0x01
     360:	fa 81       	ldd	r31, Y+2	; 0x02
     362:	73 83       	std	Z+3, r23	; 0x03
     364:	62 83       	std	Z+2, r22	; 0x02
}
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	6f 90       	pop	r6
     386:	5f 90       	pop	r5
     388:	4f 90       	pop	r4
     38a:	3f 90       	pop	r3
     38c:	2f 90       	pop	r2
     38e:	08 95       	ret

00000390 <main>:

int main(void)
{

    /* System init */
    system_init();
     390:	0e 94 72 03 	call	0x6e4	; 0x6e4 <system_init>
}

static void init_io(void)
{

    cli();
     394:	f8 94       	cli

    /* UART */
    uart_init();
     396:	0e 94 df 03 	call	0x7be	; 0x7be <uart_init>
    stdout = &uart_output;
     39a:	8e e0       	ldi	r24, 0x0E	; 14
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	90 93 09 02 	sts	0x0209, r25
     3a2:	80 93 08 02 	sts	0x0208, r24
    stdin  = &uart_input;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	90 93 07 02 	sts	0x0207, r25
     3ae:	80 93 06 02 	sts	0x0206, r24

    /* ADC */
    adc_init();
     3b2:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>

    /* PWM */
    pwm_init();
     3b6:	0e 94 ef 02 	call	0x5de	; 0x5de <pwm_init>

    /* System timer */
    timer_init();
     3ba:	0e 94 75 03 	call	0x6ea	; 0x6ea <timer_init>

    sei();
     3be:	78 94       	sei
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->voltage_adc_channel = ADC_0;
     3c0:	10 92 8e 01 	sts	0x018E, r1
            channel->current_adc_channel = ADC_1;
     3c4:	bb 24       	eor	r11, r11
     3c6:	b3 94       	inc	r11
     3c8:	b0 92 ac 01 	sts	0x01AC, r11
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     3cc:	10 92 8f 01 	sts	0x018F, r1
            channel->current_pwm_channel = PWM_CHANNEL_2;
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	a8 2e       	mov	r10, r24
     3d4:	a0 92 ad 01 	sts	0x01AD, r10
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     3d8:	10 92 83 01 	sts	0x0183, r1
     3dc:	10 92 82 01 	sts	0x0182, r1
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     3e0:	0f ef       	ldi	r16, 0xFF	; 255
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	10 93 85 01 	sts	0x0185, r17
     3e8:	00 93 84 01 	sts	0x0184, r16
    channel->voltage_readout.scale.min_scaled = 0;
     3ec:	10 92 87 01 	sts	0x0187, r1
     3f0:	10 92 86 01 	sts	0x0186, r1
    channel->voltage_readout.scale.max_scaled = 5000;//25575;  /* Voltage */
     3f4:	98 e8       	ldi	r25, 0x88	; 136
     3f6:	c9 2e       	mov	r12, r25
     3f8:	93 e1       	ldi	r25, 0x13	; 19
     3fa:	d9 2e       	mov	r13, r25
     3fc:	d0 92 89 01 	sts	0x0189, r13
     400:	c0 92 88 01 	sts	0x0188, r12

    channel->current_readout.scale.min = 0;
     404:	10 92 a1 01 	sts	0x01A1, r1
     408:	10 92 a0 01 	sts	0x01A0, r1
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     40c:	10 93 a3 01 	sts	0x01A3, r17
     410:	00 93 a2 01 	sts	0x01A2, r16
    channel->current_readout.scale.min_scaled = 0;
     414:	10 92 a5 01 	sts	0x01A5, r1
     418:	10 92 a4 01 	sts	0x01A4, r1
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     41c:	e1 2c       	mov	r14, r1
     41e:	28 e0       	ldi	r18, 0x08	; 8
     420:	f2 2e       	mov	r15, r18
     422:	f0 92 a7 01 	sts	0x01A7, r15
     426:	e0 92 a6 01 	sts	0x01A6, r14

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     42a:	10 92 75 01 	sts	0x0175, r1
     42e:	10 92 74 01 	sts	0x0174, r1
    channel->voltage_setpoint.scale.max = 28500;
     432:	c4 e5       	ldi	r28, 0x54	; 84
     434:	df e6       	ldi	r29, 0x6F	; 111
     436:	d0 93 77 01 	sts	0x0177, r29
     43a:	c0 93 76 01 	sts	0x0176, r28
    channel->voltage_setpoint.scale.min_scaled = 0;
     43e:	10 92 79 01 	sts	0x0179, r1
     442:	10 92 78 01 	sts	0x0178, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 4b 03 	call	0x696	; 0x696 <pwm_get_resolution>
     44c:	90 93 7b 01 	sts	0x017B, r25
     450:	80 93 7a 01 	sts	0x017A, r24

    channel->current_setpoint.scale.min = 0;
     454:	10 92 93 01 	sts	0x0193, r1
     458:	10 92 92 01 	sts	0x0192, r1
    channel->current_setpoint.scale.max = 28500;
     45c:	d0 93 95 01 	sts	0x0195, r29
     460:	c0 93 94 01 	sts	0x0194, r28
    channel->current_setpoint.scale.min_scaled = 0;
     464:	10 92 97 01 	sts	0x0197, r1
     468:	10 92 96 01 	sts	0x0196, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     46c:	80 91 ad 01 	lds	r24, 0x01AD
     470:	0e 94 4b 03 	call	0x696	; 0x696 <pwm_get_resolution>
     474:	90 93 99 01 	sts	0x0199, r25
     478:	80 93 98 01 	sts	0x0198, r24
            channel->current_adc_channel = ADC_1;
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
            channel->current_pwm_channel = PWM_CHANNEL_2;
            break;
        case PSU_CHANNEL_1:
            channel->voltage_adc_channel = ADC_2;
     47c:	a0 92 ca 01 	sts	0x01CA, r10
            channel->current_adc_channel = ADC_3;
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	80 93 e8 01 	sts	0x01E8, r24
            channel->voltage_pwm_channel = PWM_CHANNEL_1;
     486:	b0 92 cb 01 	sts	0x01CB, r11
            channel->current_pwm_channel = PWM_CHANNEL_3;
     48a:	80 93 e9 01 	sts	0x01E9, r24
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     48e:	10 92 bf 01 	sts	0x01BF, r1
     492:	10 92 be 01 	sts	0x01BE, r1
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     496:	10 93 c1 01 	sts	0x01C1, r17
     49a:	00 93 c0 01 	sts	0x01C0, r16
    channel->voltage_readout.scale.min_scaled = 0;
     49e:	10 92 c3 01 	sts	0x01C3, r1
     4a2:	10 92 c2 01 	sts	0x01C2, r1
    channel->voltage_readout.scale.max_scaled = 5000;//25575;  /* Voltage */
     4a6:	d0 92 c5 01 	sts	0x01C5, r13
     4aa:	c0 92 c4 01 	sts	0x01C4, r12

    channel->current_readout.scale.min = 0;
     4ae:	10 92 dd 01 	sts	0x01DD, r1
     4b2:	10 92 dc 01 	sts	0x01DC, r1
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     4b6:	10 93 df 01 	sts	0x01DF, r17
     4ba:	00 93 de 01 	sts	0x01DE, r16
    channel->current_readout.scale.min_scaled = 0;
     4be:	10 92 e1 01 	sts	0x01E1, r1
     4c2:	10 92 e0 01 	sts	0x01E0, r1
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     4c6:	f0 92 e3 01 	sts	0x01E3, r15
     4ca:	e0 92 e2 01 	sts	0x01E2, r14

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     4ce:	10 92 b1 01 	sts	0x01B1, r1
     4d2:	10 92 b0 01 	sts	0x01B0, r1
    channel->voltage_setpoint.scale.max = 28500;
     4d6:	d0 93 b3 01 	sts	0x01B3, r29
     4da:	c0 93 b2 01 	sts	0x01B2, r28
    channel->voltage_setpoint.scale.min_scaled = 0;
     4de:	10 92 b5 01 	sts	0x01B5, r1
     4e2:	10 92 b4 01 	sts	0x01B4, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 4b 03 	call	0x696	; 0x696 <pwm_get_resolution>
     4ec:	90 93 b7 01 	sts	0x01B7, r25
     4f0:	80 93 b6 01 	sts	0x01B6, r24

    channel->current_setpoint.scale.min = 0;
     4f4:	10 92 cf 01 	sts	0x01CF, r1
     4f8:	10 92 ce 01 	sts	0x01CE, r1
    channel->current_setpoint.scale.max = 28500;
     4fc:	d0 93 d1 01 	sts	0x01D1, r29
     500:	c0 93 d0 01 	sts	0x01D0, r28
    channel->current_setpoint.scale.min_scaled = 0;
     504:	10 92 d3 01 	sts	0x01D3, r1
     508:	10 92 d2 01 	sts	0x01D2, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     50c:	80 91 e9 01 	lds	r24, 0x01E9
     510:	0e 94 4b 03 	call	0x696	; 0x696 <pwm_get_resolution>
     514:	90 93 d5 01 	sts	0x01D5, r25
     518:	80 93 d4 01 	sts	0x01D4, r24
    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/

    printf("Starting the main loop\r\n");
     51c:	85 e2       	ldi	r24, 0x25	; 37
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 73 06 	call	0xce6	; 0xce6 <puts>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     524:	10 e0       	ldi	r17, 0x00	; 0
        //adc_periodic();
        input_processing();
        //printf("%d (%d)\r\n", channels[PSU_CHANNEL_0].voltage_readout.value.scaled, channels[PSU_CHANNEL_0].voltage_readout.value.raw);
        //_delay_ms(500);
        /** DEBUG PERIODIC FUNCS **/
        psu_channels[0].voltage_setpoint.value.raw= 11937; // observed an offset error of about 50mV
     526:	31 ea       	ldi	r19, 0xA1	; 161
     528:	c3 2e       	mov	r12, r19
     52a:	3e e2       	ldi	r19, 0x2E	; 46
     52c:	d3 2e       	mov	r13, r19
        // note that the prototype breadboard does not have a separatly filtered and regulated 5V supply
        psu_channels[0].current_setpoint.value.raw = 2047; // observed an offset error of about 40mV
     52e:	ee 24       	eor	r14, r14
     530:	ea 94       	dec	r14
     532:	47 e0       	ldi	r20, 0x07	; 7
     534:	f4 2e       	mov	r15, r20

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        adc_processing(&psu_channels[i]);
     536:	5c e3       	ldi	r21, 0x3C	; 60
     538:	b5 2e       	mov	r11, r21
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     53a:	12 30       	cpi	r17, 0x02	; 2
     53c:	70 f1       	brcs	.+92     	; 0x59a <main+0x20a>
        //adc_periodic();
        input_processing();
        //printf("%d (%d)\r\n", channels[PSU_CHANNEL_0].voltage_readout.value.scaled, channels[PSU_CHANNEL_0].voltage_readout.value.raw);
        //_delay_ms(500);
        /** DEBUG PERIODIC FUNCS **/
        psu_channels[0].voltage_setpoint.value.raw= 11937; // observed an offset error of about 50mV
     53e:	d0 92 7d 01 	sts	0x017D, r13
     542:	c0 92 7c 01 	sts	0x017C, r12
        // note that the prototype breadboard does not have a separatly filtered and regulated 5V supply
        psu_channels[0].current_setpoint.value.raw = 2047; // observed an offset error of about 40mV
     546:	f0 92 9b 01 	sts	0x019B, r15
     54a:	e0 92 9a 01 	sts	0x019A, r14

        // to-do / to analyze: 1) absolute offset calibration
        //                     2) non linear behaviour correction (do measurements)

        /* Debug the timer */
        timer_debug();
     54e:	0e 94 80 03 	call	0x700	; 0x700 <timer_debug>
     552:	c2 e7       	ldi	r28, 0x72	; 114
     554:	d1 e0       	ldi	r29, 0x01	; 1
     556:	0a e9       	ldi	r16, 0x9A	; 154
     558:	11 e0       	ldi	r17, 0x01	; 1

static void pwm_processing(t_psu_channel *channel)
{

    /* Voltage */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     55a:	be 01       	movw	r22, r28
     55c:	ce 01       	movw	r24, r28
     55e:	0a 96       	adiw	r24, 0x0a	; 10
     560:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>
    pwm_set_duty(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     564:	6c 85       	ldd	r22, Y+12	; 0x0c
     566:	7d 85       	ldd	r23, Y+13	; 0x0d
     568:	f8 01       	movw	r30, r16
     56a:	3b 97       	sbiw	r30, 0x0b	; 11
     56c:	80 81       	ld	r24, Z
     56e:	0e 94 26 03 	call	0x64c	; 0x64c <pwm_set_duty>
     572:	be 01       	movw	r22, r28
     574:	62 5e       	subi	r22, 0xE2	; 226
     576:	7f 4f       	sbci	r23, 0xFF	; 255

    /* Current */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     578:	c8 01       	movw	r24, r16
     57a:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>
    pwm_set_duty(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     57e:	f8 01       	movw	r30, r16
     580:	62 81       	ldd	r22, Z+2	; 0x02
     582:	73 81       	ldd	r23, Z+3	; 0x03
     584:	8b ad       	ldd	r24, Y+59	; 0x3b
     586:	0e 94 26 03 	call	0x64c	; 0x64c <pwm_set_duty>
     58a:	ec 96       	adiw	r28, 0x3c	; 60
     58c:	04 5c       	subi	r16, 0xC4	; 196
     58e:	1f 4f       	sbci	r17, 0xFF	; 255

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	ca 3e       	cpi	r28, 0xEA	; 234
     594:	df 07       	cpc	r29, r31
     596:	09 f7       	brne	.-62     	; 0x55a <main+0x1ca>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     598:	10 e0       	ldi	r17, 0x00	; 0
    {
        adc_processing(&psu_channels[i]);
     59a:	b1 9e       	mul	r11, r17
     59c:	e0 01       	movw	r28, r0
     59e:	11 24       	eor	r1, r1
     5a0:	ce 58       	subi	r28, 0x8E	; 142
     5a2:	de 4f       	sbci	r29, 0xFE	; 254

static void adc_processing(t_psu_channel *channel)
{

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     5a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5a6:	0e 94 05 01 	call	0x20a	; 0x20a <adc_get>
     5aa:	99 8f       	std	Y+25, r25	; 0x19
     5ac:	88 8f       	std	Y+24, r24	; 0x18
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     5ae:	be 01       	movw	r22, r28
     5b0:	62 5f       	subi	r22, 0xF2	; 242
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	48 96       	adiw	r24, 0x18	; 24
     5b8:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     5bc:	8a ad       	ldd	r24, Y+58	; 0x3a
     5be:	0e 94 05 01 	call	0x20a	; 0x20a <adc_get>
     5c2:	9f ab       	std	Y+55, r25	; 0x37
     5c4:	8e ab       	std	Y+54, r24	; 0x36
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     5c6:	be 01       	movw	r22, r28
     5c8:	64 5d       	subi	r22, 0xD4	; 212
     5ca:	7f 4f       	sbci	r23, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	c6 96       	adiw	r24, 0x36	; 54
     5d0:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     5d4:	1f 5f       	subi	r17, 0xFF	; 255
     5d6:	12 30       	cpi	r17, 0x02	; 2
     5d8:	08 f0       	brcs	.+2      	; 0x5dc <main+0x24c>
     5da:	b1 cf       	rjmp	.-158    	; 0x53e <main+0x1ae>
     5dc:	de cf       	rjmp	.-68     	; 0x59a <main+0x20a>

000005de <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     5de:	ea ee       	ldi	r30, 0xEA	; 234
     5e0:	f1 e0       	ldi	r31, 0x01	; 1

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     5e2:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Reset values, just in case */
        pwm_channels[i].duty = 0;
     5e4:	14 82       	std	Z+4, r1	; 0x04
     5e6:	13 82       	std	Z+3, r1	; 0x03
        pwm_channels[i].resolution = 0;
     5e8:	12 82       	std	Z+2, r1	; 0x02
     5ea:	11 82       	std	Z+1, r1	; 0x01
        pwm_channels[i].channel = i;
     5ec:	80 83       	st	Z, r24
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	35 96       	adiw	r30, 0x05	; 5
     5f2:	84 30       	cpi	r24, 0x04	; 4
     5f4:	b9 f7       	brne	.-18     	; 0x5e4 <pwm_init+0x6>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1));
     5f6:	80 ea       	ldi	r24, 0xA0	; 160
     5f8:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = ((PWM_MODE << 3) | (1 << WGM13) | (1 << CS10));
     5fc:	81 e1       	ldi	r24, 0x11	; 17
     5fe:	80 93 81 00 	sts	0x0081, r24
    ICR1H = (PWM_FREQ >> 8);
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	80 93 87 00 	sts	0x0087, r24
    ICR1L = (PWM_FREQ & 0xff);
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	80 93 86 00 	sts	0x0086, r24

    pwm_channels[PWM_CHANNEL_0].resolution = 0x3FF;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	93 e0       	ldi	r25, 0x03	; 3
     612:	90 93 ec 01 	sts	0x01EC, r25
     616:	80 93 eb 01 	sts	0x01EB, r24
    pwm_channels[PWM_CHANNEL_1].resolution = 0x3FF;
     61a:	90 93 f1 01 	sts	0x01F1, r25
     61e:	80 93 f0 01 	sts	0x01F0, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     622:	81 ea       	ldi	r24, 0xA1	; 161
     624:	80 93 b0 00 	sts	0x00B0, r24
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 b1 00 	sts	0x00B1, r24

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     62e:	84 b1       	in	r24, 0x04	; 4
     630:	8e 60       	ori	r24, 0x0E	; 14
     632:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIN3);
     634:	53 9a       	sbi	0x0a, 3	; 10

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	90 93 f6 01 	sts	0x01F6, r25
     63e:	80 93 f5 01 	sts	0x01F5, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     642:	90 93 fb 01 	sts	0x01FB, r25
     646:	80 93 fa 01 	sts	0x01FA, r24
     64a:	08 95       	ret

0000064c <pwm_set_duty>:
}

void pwm_set_duty(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	e2 0f       	add	r30, r18
     65c:	f3 1f       	adc	r31, r19
     65e:	e6 51       	subi	r30, 0x16	; 22
     660:	fe 4f       	sbci	r31, 0xFE	; 254
     662:	63 83       	std	Z+3, r22	; 0x03
     664:	74 83       	std	Z+4, r23	; 0x04

    switch(pwm_channel)
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	89 f0       	breq	.+34     	; 0x68c <pwm_set_duty+0x40>
     66a:	58 f0       	brcs	.+22     	; 0x682 <pwm_set_duty+0x36>
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	19 f0       	breq	.+6      	; 0x676 <pwm_set_duty+0x2a>
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	21 f0       	breq	.+8      	; 0x67c <pwm_set_duty+0x30>
     674:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
        OCR1BL = duty;
        break;
    case PWM_CHANNEL_2:
        OCR2A = duty;
     676:	60 93 b3 00 	sts	0x00B3, r22
        break;
     67a:	08 95       	ret
    case PWM_CHANNEL_3:
        OCR2B = duty;
     67c:	60 93 b4 00 	sts	0x00B4, r22
     680:	08 95       	ret
    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     682:	70 93 89 00 	sts	0x0089, r23
        OCR1AL = duty;
     686:	60 93 88 00 	sts	0x0088, r22
        break;
     68a:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     68c:	70 93 8b 00 	sts	0x008B, r23
        OCR1BL = duty;
     690:	60 93 8a 00 	sts	0x008A, r22
        break;
     694:	08 95       	ret

00000696 <pwm_get_resolution>:
    }
}

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
    return pwm_channels[channel].resolution;
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
     6a6:	e6 51       	subi	r30, 0x16	; 22
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
}
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
     6ac:	92 81       	ldd	r25, Z+2	; 0x02
     6ae:	08 95       	ret

000006b0 <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
    printf("no ISR!\r\n");
     6ba:	8d e3       	ldi	r24, 0x3D	; 61
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 73 06 	call	0xce6	; 0xce6 <puts>
     6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__vector_default+0x12>

000006c4 <system_fatal>:
    for(;;);
}

void system_fatal(char *str)
{
    printf("%s", str);
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	86 e4       	ldi	r24, 0x46	; 70
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printf>
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	ff cf       	rjmp	.-2      	; 0x6dc <system_fatal+0x18>

000006de <system_reset>:

void system_reset(void)
{
    /* start at zero! */
    void (*start)(void) = 0;
    start();
     6de:	e0 e0       	ldi	r30, 0x00	; 0
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	09 94       	ijmp

000006e4 <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     6e4:	84 b7       	in	r24, 0x34	; 52

    /* Reset state for the next proper detection */
    MCUSR = 0;
     6e6:	14 be       	out	0x34, r1	; 52

    return t;
}
     6e8:	08 95       	ret

000006ea <timer_init>:
 */
void timer_init(void)
{

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	84 bd       	out	0x24, r24	; 36
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     6ee:	85 bd       	out	0x25, r24	; 37

    /* initialize counter */
    OCR0A = 200;
     6f0:	88 ec       	ldi	r24, 0xC8	; 200
     6f2:	87 bd       	out	0x27, r24	; 39

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     6f4:	ee e6       	ldi	r30, 0x6E	; 110
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	82 60       	ori	r24, 0x02	; 2
     6fc:	80 83       	st	Z, r24
     6fe:	08 95       	ret

00000700 <timer_debug>:
#ifdef TIMER_DEBUG
#include "stdio.h"
void timer_debug(void)
{
    static uint32_t ts = 0;
    if (g_timestamp > (ts + 1000000L))
     700:	40 91 02 02 	lds	r20, 0x0202
     704:	50 91 03 02 	lds	r21, 0x0203
     708:	60 91 04 02 	lds	r22, 0x0204
     70c:	70 91 05 02 	lds	r23, 0x0205
     710:	80 91 fe 01 	lds	r24, 0x01FE
     714:	90 91 ff 01 	lds	r25, 0x01FF
     718:	a0 91 00 02 	lds	r26, 0x0200
     71c:	b0 91 01 02 	lds	r27, 0x0201
     720:	80 5c       	subi	r24, 0xC0	; 192
     722:	9d 4b       	sbci	r25, 0xBD	; 189
     724:	a0 4f       	sbci	r26, 0xF0	; 240
     726:	bf 4f       	sbci	r27, 0xFF	; 255
     728:	84 17       	cp	r24, r20
     72a:	95 07       	cpc	r25, r21
     72c:	a6 07       	cpc	r26, r22
     72e:	b7 07       	cpc	r27, r23
     730:	08 f0       	brcs	.+2      	; 0x734 <timer_debug+0x34>
     732:	08 95       	ret
    {
        ts = g_timestamp;
     734:	80 91 02 02 	lds	r24, 0x0202
     738:	90 91 03 02 	lds	r25, 0x0203
     73c:	a0 91 04 02 	lds	r26, 0x0204
     740:	b0 91 05 02 	lds	r27, 0x0205
     744:	80 93 fe 01 	sts	0x01FE, r24
     748:	90 93 ff 01 	sts	0x01FF, r25
     74c:	a0 93 00 02 	sts	0x0200, r26
     750:	b0 93 01 02 	sts	0x0201, r27
        printf("%s\r\n", "1 second trigger");
     754:	89 e4       	ldi	r24, 0x49	; 73
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	8a e5       	ldi	r24, 0x5A	; 90
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printf>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	08 95       	ret

00000772 <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	8f 93       	push	r24
     77e:	9f 93       	push	r25
     780:	af 93       	push	r26
     782:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
     784:	80 91 02 02 	lds	r24, 0x0202
     788:	90 91 03 02 	lds	r25, 0x0203
     78c:	a0 91 04 02 	lds	r26, 0x0204
     790:	b0 91 05 02 	lds	r27, 0x0205
     794:	8c 59       	subi	r24, 0x9C	; 156
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	af 4f       	sbci	r26, 0xFF	; 255
     79a:	bf 4f       	sbci	r27, 0xFF	; 255
     79c:	80 93 02 02 	sts	0x0202, r24
     7a0:	90 93 03 02 	sts	0x0203, r25
     7a4:	a0 93 04 02 	sts	0x0204, r26
     7a8:	b0 93 05 02 	sts	0x0205, r27
}
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <uart_init>:
#define    UCSZ0    UCSZ00

void uart_init(void) {

    /* Enable UART power */
    power_usart0_enable();
     7be:	e4 e6       	ldi	r30, 0x64	; 100
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	8d 7f       	andi	r24, 0xFD	; 253
     7c6:	80 83       	st	Z, r24

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
     7c8:	e0 ec       	ldi	r30, 0xC0	; 192
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	82 60       	ori	r24, 0x02	; 2
     7d0:	80 83       	st	Z, r24
    #else
        UCSRA &= ~(_BV(U2X0));
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     7d2:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     7d6:	80 e1       	ldi	r24, 0x10	; 16
     7d8:	80 93 c4 00 	sts	0x00C4, r24

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     7dc:	86 e0       	ldi	r24, 0x06	; 6
     7de:	80 93 c2 00 	sts	0x00C2, r24


    // rx/tx enable
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	80 93 c1 00 	sts	0x00C1, r24
     7e8:	08 95       	ret

000007ea <uart_putchar>:



}

void uart_putchar(char c, FILE *stream) {
     7ea:	cf 93       	push	r28
     7ec:	c8 2f       	mov	r28, r24
    if (c == '\n') {
     7ee:	8a 30       	cpi	r24, 0x0A	; 10
     7f0:	41 f0       	breq	.+16     	; 0x802 <uart_putchar+0x18>
        uart_putchar('\r', stream);
    }
    loop_until_bit_is_set(UCSRA, UDRE);
     7f2:	90 91 c0 00 	lds	r25, 0x00C0
     7f6:	95 ff       	sbrs	r25, 5
     7f8:	fc cf       	rjmp	.-8      	; 0x7f2 <uart_putchar+0x8>
    UDR = c;
     7fa:	c0 93 c6 00 	sts	0x00C6, r28
}
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

}

void uart_putchar(char c, FILE *stream) {
    if (c == '\n') {
        uart_putchar('\r', stream);
     802:	8d e0       	ldi	r24, 0x0D	; 13
     804:	0e 94 f5 03 	call	0x7ea	; 0x7ea <uart_putchar>
     808:	f4 cf       	rjmp	.-24     	; 0x7f2 <uart_putchar+0x8>

0000080a <uart_getchar>:
    loop_until_bit_is_set(UCSRA, UDRE);
    UDR = c;
}

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSRA, RXC);
     80a:	80 91 c0 00 	lds	r24, 0x00C0
     80e:	87 ff       	sbrs	r24, 7
     810:	fc cf       	rjmp	.-8      	; 0x80a <uart_getchar>
    return UDR;
     812:	80 91 c6 00 	lds	r24, 0x00C6
}
     816:	08 95       	ret

00000818 <__divmodhi4>:
     818:	97 fb       	bst	r25, 7
     81a:	07 2e       	mov	r0, r23
     81c:	16 f4       	brtc	.+4      	; 0x822 <__divmodhi4+0xa>
     81e:	00 94       	com	r0
     820:	07 d0       	rcall	.+14     	; 0x830 <__divmodhi4_neg1>
     822:	77 fd       	sbrc	r23, 7
     824:	09 d0       	rcall	.+18     	; 0x838 <__divmodhi4_neg2>
     826:	0e 94 3f 04 	call	0x87e	; 0x87e <__udivmodhi4>
     82a:	07 fc       	sbrc	r0, 7
     82c:	05 d0       	rcall	.+10     	; 0x838 <__divmodhi4_neg2>
     82e:	3e f4       	brtc	.+14     	; 0x83e <__divmodhi4_exit>

00000830 <__divmodhi4_neg1>:
     830:	90 95       	com	r25
     832:	81 95       	neg	r24
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	08 95       	ret

00000838 <__divmodhi4_neg2>:
     838:	70 95       	com	r23
     83a:	61 95       	neg	r22
     83c:	7f 4f       	sbci	r23, 0xFF	; 255

0000083e <__divmodhi4_exit>:
     83e:	08 95       	ret

00000840 <__divmodsi4>:
     840:	05 2e       	mov	r0, r21
     842:	97 fb       	bst	r25, 7
     844:	1e f4       	brtc	.+6      	; 0x84c <__divmodsi4+0xc>
     846:	00 94       	com	r0
     848:	0e 94 37 04 	call	0x86e	; 0x86e <__negsi2>
     84c:	57 fd       	sbrc	r21, 7
     84e:	07 d0       	rcall	.+14     	; 0x85e <__divmodsi4_neg2>
     850:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__udivmodsi4>
     854:	07 fc       	sbrc	r0, 7
     856:	03 d0       	rcall	.+6      	; 0x85e <__divmodsi4_neg2>
     858:	4e f4       	brtc	.+18     	; 0x86c <__divmodsi4_exit>
     85a:	0c 94 37 04 	jmp	0x86e	; 0x86e <__negsi2>

0000085e <__divmodsi4_neg2>:
     85e:	50 95       	com	r21
     860:	40 95       	com	r20
     862:	30 95       	com	r19
     864:	21 95       	neg	r18
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	4f 4f       	sbci	r20, 0xFF	; 255
     86a:	5f 4f       	sbci	r21, 0xFF	; 255

0000086c <__divmodsi4_exit>:
     86c:	08 95       	ret

0000086e <__negsi2>:
     86e:	90 95       	com	r25
     870:	80 95       	com	r24
     872:	70 95       	com	r23
     874:	61 95       	neg	r22
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	8f 4f       	sbci	r24, 0xFF	; 255
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	08 95       	ret

0000087e <__udivmodhi4>:
     87e:	aa 1b       	sub	r26, r26
     880:	bb 1b       	sub	r27, r27
     882:	51 e1       	ldi	r21, 0x11	; 17
     884:	07 c0       	rjmp	.+14     	; 0x894 <__udivmodhi4_ep>

00000886 <__udivmodhi4_loop>:
     886:	aa 1f       	adc	r26, r26
     888:	bb 1f       	adc	r27, r27
     88a:	a6 17       	cp	r26, r22
     88c:	b7 07       	cpc	r27, r23
     88e:	10 f0       	brcs	.+4      	; 0x894 <__udivmodhi4_ep>
     890:	a6 1b       	sub	r26, r22
     892:	b7 0b       	sbc	r27, r23

00000894 <__udivmodhi4_ep>:
     894:	88 1f       	adc	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	5a 95       	dec	r21
     89a:	a9 f7       	brne	.-22     	; 0x886 <__udivmodhi4_loop>
     89c:	80 95       	com	r24
     89e:	90 95       	com	r25
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	08 95       	ret

000008a6 <__udivmodsi4>:
     8a6:	a1 e2       	ldi	r26, 0x21	; 33
     8a8:	1a 2e       	mov	r1, r26
     8aa:	aa 1b       	sub	r26, r26
     8ac:	bb 1b       	sub	r27, r27
     8ae:	fd 01       	movw	r30, r26
     8b0:	0d c0       	rjmp	.+26     	; 0x8cc <__udivmodsi4_ep>

000008b2 <__udivmodsi4_loop>:
     8b2:	aa 1f       	adc	r26, r26
     8b4:	bb 1f       	adc	r27, r27
     8b6:	ee 1f       	adc	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	a2 17       	cp	r26, r18
     8bc:	b3 07       	cpc	r27, r19
     8be:	e4 07       	cpc	r30, r20
     8c0:	f5 07       	cpc	r31, r21
     8c2:	20 f0       	brcs	.+8      	; 0x8cc <__udivmodsi4_ep>
     8c4:	a2 1b       	sub	r26, r18
     8c6:	b3 0b       	sbc	r27, r19
     8c8:	e4 0b       	sbc	r30, r20
     8ca:	f5 0b       	sbc	r31, r21

000008cc <__udivmodsi4_ep>:
     8cc:	66 1f       	adc	r22, r22
     8ce:	77 1f       	adc	r23, r23
     8d0:	88 1f       	adc	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	1a 94       	dec	r1
     8d6:	69 f7       	brne	.-38     	; 0x8b2 <__udivmodsi4_loop>
     8d8:	60 95       	com	r22
     8da:	70 95       	com	r23
     8dc:	80 95       	com	r24
     8de:	90 95       	com	r25
     8e0:	9b 01       	movw	r18, r22
     8e2:	ac 01       	movw	r20, r24
     8e4:	bd 01       	movw	r22, r26
     8e6:	cf 01       	movw	r24, r30
     8e8:	08 95       	ret

000008ea <__subsf3>:
     8ea:	50 58       	subi	r21, 0x80	; 128

000008ec <__addsf3>:
     8ec:	bb 27       	eor	r27, r27
     8ee:	aa 27       	eor	r26, r26
     8f0:	0e d0       	rcall	.+28     	; 0x90e <__addsf3x>
     8f2:	48 c1       	rjmp	.+656    	; 0xb84 <__fp_round>
     8f4:	39 d1       	rcall	.+626    	; 0xb68 <__fp_pscA>
     8f6:	30 f0       	brcs	.+12     	; 0x904 <__stack+0x5>
     8f8:	3e d1       	rcall	.+636    	; 0xb76 <__fp_pscB>
     8fa:	20 f0       	brcs	.+8      	; 0x904 <__stack+0x5>
     8fc:	31 f4       	brne	.+12     	; 0x90a <__stack+0xb>
     8fe:	9f 3f       	cpi	r25, 0xFF	; 255
     900:	11 f4       	brne	.+4      	; 0x906 <__stack+0x7>
     902:	1e f4       	brtc	.+6      	; 0x90a <__stack+0xb>
     904:	2e c1       	rjmp	.+604    	; 0xb62 <__fp_nan>
     906:	0e f4       	brtc	.+2      	; 0x90a <__stack+0xb>
     908:	e0 95       	com	r30
     90a:	e7 fb       	bst	r30, 7
     90c:	24 c1       	rjmp	.+584    	; 0xb56 <__fp_inf>

0000090e <__addsf3x>:
     90e:	e9 2f       	mov	r30, r25
     910:	4a d1       	rcall	.+660    	; 0xba6 <__fp_split3>
     912:	80 f3       	brcs	.-32     	; 0x8f4 <__addsf3+0x8>
     914:	ba 17       	cp	r27, r26
     916:	62 07       	cpc	r22, r18
     918:	73 07       	cpc	r23, r19
     91a:	84 07       	cpc	r24, r20
     91c:	95 07       	cpc	r25, r21
     91e:	18 f0       	brcs	.+6      	; 0x926 <__addsf3x+0x18>
     920:	71 f4       	brne	.+28     	; 0x93e <__addsf3x+0x30>
     922:	9e f5       	brtc	.+102    	; 0x98a <__addsf3x+0x7c>
     924:	62 c1       	rjmp	.+708    	; 0xbea <__fp_zero>
     926:	0e f4       	brtc	.+2      	; 0x92a <__addsf3x+0x1c>
     928:	e0 95       	com	r30
     92a:	0b 2e       	mov	r0, r27
     92c:	ba 2f       	mov	r27, r26
     92e:	a0 2d       	mov	r26, r0
     930:	0b 01       	movw	r0, r22
     932:	b9 01       	movw	r22, r18
     934:	90 01       	movw	r18, r0
     936:	0c 01       	movw	r0, r24
     938:	ca 01       	movw	r24, r20
     93a:	a0 01       	movw	r20, r0
     93c:	11 24       	eor	r1, r1
     93e:	ff 27       	eor	r31, r31
     940:	59 1b       	sub	r21, r25
     942:	99 f0       	breq	.+38     	; 0x96a <__addsf3x+0x5c>
     944:	59 3f       	cpi	r21, 0xF9	; 249
     946:	50 f4       	brcc	.+20     	; 0x95c <__addsf3x+0x4e>
     948:	50 3e       	cpi	r21, 0xE0	; 224
     94a:	68 f1       	brcs	.+90     	; 0x9a6 <__addsf3x+0x98>
     94c:	1a 16       	cp	r1, r26
     94e:	f0 40       	sbci	r31, 0x00	; 0
     950:	a2 2f       	mov	r26, r18
     952:	23 2f       	mov	r18, r19
     954:	34 2f       	mov	r19, r20
     956:	44 27       	eor	r20, r20
     958:	58 5f       	subi	r21, 0xF8	; 248
     95a:	f3 cf       	rjmp	.-26     	; 0x942 <__addsf3x+0x34>
     95c:	46 95       	lsr	r20
     95e:	37 95       	ror	r19
     960:	27 95       	ror	r18
     962:	a7 95       	ror	r26
     964:	f0 40       	sbci	r31, 0x00	; 0
     966:	53 95       	inc	r21
     968:	c9 f7       	brne	.-14     	; 0x95c <__addsf3x+0x4e>
     96a:	7e f4       	brtc	.+30     	; 0x98a <__addsf3x+0x7c>
     96c:	1f 16       	cp	r1, r31
     96e:	ba 0b       	sbc	r27, r26
     970:	62 0b       	sbc	r22, r18
     972:	73 0b       	sbc	r23, r19
     974:	84 0b       	sbc	r24, r20
     976:	ba f0       	brmi	.+46     	; 0x9a6 <__addsf3x+0x98>
     978:	91 50       	subi	r25, 0x01	; 1
     97a:	a1 f0       	breq	.+40     	; 0x9a4 <__addsf3x+0x96>
     97c:	ff 0f       	add	r31, r31
     97e:	bb 1f       	adc	r27, r27
     980:	66 1f       	adc	r22, r22
     982:	77 1f       	adc	r23, r23
     984:	88 1f       	adc	r24, r24
     986:	c2 f7       	brpl	.-16     	; 0x978 <__addsf3x+0x6a>
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__addsf3x+0x98>
     98a:	ba 0f       	add	r27, r26
     98c:	62 1f       	adc	r22, r18
     98e:	73 1f       	adc	r23, r19
     990:	84 1f       	adc	r24, r20
     992:	48 f4       	brcc	.+18     	; 0x9a6 <__addsf3x+0x98>
     994:	87 95       	ror	r24
     996:	77 95       	ror	r23
     998:	67 95       	ror	r22
     99a:	b7 95       	ror	r27
     99c:	f7 95       	ror	r31
     99e:	9e 3f       	cpi	r25, 0xFE	; 254
     9a0:	08 f0       	brcs	.+2      	; 0x9a4 <__addsf3x+0x96>
     9a2:	b3 cf       	rjmp	.-154    	; 0x90a <__stack+0xb>
     9a4:	93 95       	inc	r25
     9a6:	88 0f       	add	r24, r24
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__addsf3x+0x9e>
     9aa:	99 27       	eor	r25, r25
     9ac:	ee 0f       	add	r30, r30
     9ae:	97 95       	ror	r25
     9b0:	87 95       	ror	r24
     9b2:	08 95       	ret

000009b4 <__divsf3>:
     9b4:	0c d0       	rcall	.+24     	; 0x9ce <__divsf3x>
     9b6:	e6 c0       	rjmp	.+460    	; 0xb84 <__fp_round>
     9b8:	de d0       	rcall	.+444    	; 0xb76 <__fp_pscB>
     9ba:	40 f0       	brcs	.+16     	; 0x9cc <__divsf3+0x18>
     9bc:	d5 d0       	rcall	.+426    	; 0xb68 <__fp_pscA>
     9be:	30 f0       	brcs	.+12     	; 0x9cc <__divsf3+0x18>
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__divsf3+0x16>
     9c2:	5f 3f       	cpi	r21, 0xFF	; 255
     9c4:	19 f0       	breq	.+6      	; 0x9cc <__divsf3+0x18>
     9c6:	c7 c0       	rjmp	.+398    	; 0xb56 <__fp_inf>
     9c8:	51 11       	cpse	r21, r1
     9ca:	10 c1       	rjmp	.+544    	; 0xbec <__fp_szero>
     9cc:	ca c0       	rjmp	.+404    	; 0xb62 <__fp_nan>

000009ce <__divsf3x>:
     9ce:	eb d0       	rcall	.+470    	; 0xba6 <__fp_split3>
     9d0:	98 f3       	brcs	.-26     	; 0x9b8 <__divsf3+0x4>

000009d2 <__divsf3_pse>:
     9d2:	99 23       	and	r25, r25
     9d4:	c9 f3       	breq	.-14     	; 0x9c8 <__divsf3+0x14>
     9d6:	55 23       	and	r21, r21
     9d8:	b1 f3       	breq	.-20     	; 0x9c6 <__divsf3+0x12>
     9da:	95 1b       	sub	r25, r21
     9dc:	55 0b       	sbc	r21, r21
     9de:	bb 27       	eor	r27, r27
     9e0:	aa 27       	eor	r26, r26
     9e2:	62 17       	cp	r22, r18
     9e4:	73 07       	cpc	r23, r19
     9e6:	84 07       	cpc	r24, r20
     9e8:	38 f0       	brcs	.+14     	; 0x9f8 <__divsf3_pse+0x26>
     9ea:	9f 5f       	subi	r25, 0xFF	; 255
     9ec:	5f 4f       	sbci	r21, 0xFF	; 255
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	44 1f       	adc	r20, r20
     9f4:	aa 1f       	adc	r26, r26
     9f6:	a9 f3       	breq	.-22     	; 0x9e2 <__divsf3_pse+0x10>
     9f8:	33 d0       	rcall	.+102    	; 0xa60 <__divsf3_pse+0x8e>
     9fa:	0e 2e       	mov	r0, r30
     9fc:	3a f0       	brmi	.+14     	; 0xa0c <__divsf3_pse+0x3a>
     9fe:	e0 e8       	ldi	r30, 0x80	; 128
     a00:	30 d0       	rcall	.+96     	; 0xa62 <__divsf3_pse+0x90>
     a02:	91 50       	subi	r25, 0x01	; 1
     a04:	50 40       	sbci	r21, 0x00	; 0
     a06:	e6 95       	lsr	r30
     a08:	00 1c       	adc	r0, r0
     a0a:	ca f7       	brpl	.-14     	; 0x9fe <__divsf3_pse+0x2c>
     a0c:	29 d0       	rcall	.+82     	; 0xa60 <__divsf3_pse+0x8e>
     a0e:	fe 2f       	mov	r31, r30
     a10:	27 d0       	rcall	.+78     	; 0xa60 <__divsf3_pse+0x8e>
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	bb 1f       	adc	r27, r27
     a1a:	26 17       	cp	r18, r22
     a1c:	37 07       	cpc	r19, r23
     a1e:	48 07       	cpc	r20, r24
     a20:	ab 07       	cpc	r26, r27
     a22:	b0 e8       	ldi	r27, 0x80	; 128
     a24:	09 f0       	breq	.+2      	; 0xa28 <__divsf3_pse+0x56>
     a26:	bb 0b       	sbc	r27, r27
     a28:	80 2d       	mov	r24, r0
     a2a:	bf 01       	movw	r22, r30
     a2c:	ff 27       	eor	r31, r31
     a2e:	93 58       	subi	r25, 0x83	; 131
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	2a f0       	brmi	.+10     	; 0xa3e <__divsf3_pse+0x6c>
     a34:	9e 3f       	cpi	r25, 0xFE	; 254
     a36:	51 05       	cpc	r21, r1
     a38:	68 f0       	brcs	.+26     	; 0xa54 <__divsf3_pse+0x82>
     a3a:	8d c0       	rjmp	.+282    	; 0xb56 <__fp_inf>
     a3c:	d7 c0       	rjmp	.+430    	; 0xbec <__fp_szero>
     a3e:	5f 3f       	cpi	r21, 0xFF	; 255
     a40:	ec f3       	brlt	.-6      	; 0xa3c <__divsf3_pse+0x6a>
     a42:	98 3e       	cpi	r25, 0xE8	; 232
     a44:	dc f3       	brlt	.-10     	; 0xa3c <__divsf3_pse+0x6a>
     a46:	86 95       	lsr	r24
     a48:	77 95       	ror	r23
     a4a:	67 95       	ror	r22
     a4c:	b7 95       	ror	r27
     a4e:	f7 95       	ror	r31
     a50:	9f 5f       	subi	r25, 0xFF	; 255
     a52:	c9 f7       	brne	.-14     	; 0xa46 <__divsf3_pse+0x74>
     a54:	88 0f       	add	r24, r24
     a56:	91 1d       	adc	r25, r1
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	97 f9       	bld	r25, 7
     a5e:	08 95       	ret
     a60:	e1 e0       	ldi	r30, 0x01	; 1
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	bb 1f       	adc	r27, r27
     a6a:	62 17       	cp	r22, r18
     a6c:	73 07       	cpc	r23, r19
     a6e:	84 07       	cpc	r24, r20
     a70:	ba 07       	cpc	r27, r26
     a72:	20 f0       	brcs	.+8      	; 0xa7c <__divsf3_pse+0xaa>
     a74:	62 1b       	sub	r22, r18
     a76:	73 0b       	sbc	r23, r19
     a78:	84 0b       	sbc	r24, r20
     a7a:	ba 0b       	sbc	r27, r26
     a7c:	ee 1f       	adc	r30, r30
     a7e:	88 f7       	brcc	.-30     	; 0xa62 <__divsf3_pse+0x90>
     a80:	e0 95       	com	r30
     a82:	08 95       	ret

00000a84 <__fixunssfsi>:
     a84:	98 d0       	rcall	.+304    	; 0xbb6 <__fp_splitA>
     a86:	88 f0       	brcs	.+34     	; 0xaaa <__fixunssfsi+0x26>
     a88:	9f 57       	subi	r25, 0x7F	; 127
     a8a:	90 f0       	brcs	.+36     	; 0xab0 <__fixunssfsi+0x2c>
     a8c:	b9 2f       	mov	r27, r25
     a8e:	99 27       	eor	r25, r25
     a90:	b7 51       	subi	r27, 0x17	; 23
     a92:	a0 f0       	brcs	.+40     	; 0xabc <__fixunssfsi+0x38>
     a94:	d1 f0       	breq	.+52     	; 0xaca <__fixunssfsi+0x46>
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	88 1f       	adc	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	1a f0       	brmi	.+6      	; 0xaa6 <__fixunssfsi+0x22>
     aa0:	ba 95       	dec	r27
     aa2:	c9 f7       	brne	.-14     	; 0xa96 <__fixunssfsi+0x12>
     aa4:	12 c0       	rjmp	.+36     	; 0xaca <__fixunssfsi+0x46>
     aa6:	b1 30       	cpi	r27, 0x01	; 1
     aa8:	81 f0       	breq	.+32     	; 0xaca <__fixunssfsi+0x46>
     aaa:	9f d0       	rcall	.+318    	; 0xbea <__fp_zero>
     aac:	b1 e0       	ldi	r27, 0x01	; 1
     aae:	08 95       	ret
     ab0:	9c c0       	rjmp	.+312    	; 0xbea <__fp_zero>
     ab2:	67 2f       	mov	r22, r23
     ab4:	78 2f       	mov	r23, r24
     ab6:	88 27       	eor	r24, r24
     ab8:	b8 5f       	subi	r27, 0xF8	; 248
     aba:	39 f0       	breq	.+14     	; 0xaca <__fixunssfsi+0x46>
     abc:	b9 3f       	cpi	r27, 0xF9	; 249
     abe:	cc f3       	brlt	.-14     	; 0xab2 <__fixunssfsi+0x2e>
     ac0:	86 95       	lsr	r24
     ac2:	77 95       	ror	r23
     ac4:	67 95       	ror	r22
     ac6:	b3 95       	inc	r27
     ac8:	d9 f7       	brne	.-10     	; 0xac0 <__fixunssfsi+0x3c>
     aca:	3e f4       	brtc	.+14     	; 0xada <__fixunssfsi+0x56>
     acc:	90 95       	com	r25
     ace:	80 95       	com	r24
     ad0:	70 95       	com	r23
     ad2:	61 95       	neg	r22
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	8f 4f       	sbci	r24, 0xFF	; 255
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	08 95       	ret

00000adc <__floatunsisf>:
     adc:	e8 94       	clt
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__floatsisf+0x12>

00000ae0 <__floatsisf>:
     ae0:	97 fb       	bst	r25, 7
     ae2:	3e f4       	brtc	.+14     	; 0xaf2 <__floatsisf+0x12>
     ae4:	90 95       	com	r25
     ae6:	80 95       	com	r24
     ae8:	70 95       	com	r23
     aea:	61 95       	neg	r22
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	8f 4f       	sbci	r24, 0xFF	; 255
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	99 23       	and	r25, r25
     af4:	a9 f0       	breq	.+42     	; 0xb20 <__floatsisf+0x40>
     af6:	f9 2f       	mov	r31, r25
     af8:	96 e9       	ldi	r25, 0x96	; 150
     afa:	bb 27       	eor	r27, r27
     afc:	93 95       	inc	r25
     afe:	f6 95       	lsr	r31
     b00:	87 95       	ror	r24
     b02:	77 95       	ror	r23
     b04:	67 95       	ror	r22
     b06:	b7 95       	ror	r27
     b08:	f1 11       	cpse	r31, r1
     b0a:	f8 cf       	rjmp	.-16     	; 0xafc <__floatsisf+0x1c>
     b0c:	fa f4       	brpl	.+62     	; 0xb4c <__floatsisf+0x6c>
     b0e:	bb 0f       	add	r27, r27
     b10:	11 f4       	brne	.+4      	; 0xb16 <__floatsisf+0x36>
     b12:	60 ff       	sbrs	r22, 0
     b14:	1b c0       	rjmp	.+54     	; 0xb4c <__floatsisf+0x6c>
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	8f 4f       	sbci	r24, 0xFF	; 255
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	16 c0       	rjmp	.+44     	; 0xb4c <__floatsisf+0x6c>
     b20:	88 23       	and	r24, r24
     b22:	11 f0       	breq	.+4      	; 0xb28 <__floatsisf+0x48>
     b24:	96 e9       	ldi	r25, 0x96	; 150
     b26:	11 c0       	rjmp	.+34     	; 0xb4a <__floatsisf+0x6a>
     b28:	77 23       	and	r23, r23
     b2a:	21 f0       	breq	.+8      	; 0xb34 <__floatsisf+0x54>
     b2c:	9e e8       	ldi	r25, 0x8E	; 142
     b2e:	87 2f       	mov	r24, r23
     b30:	76 2f       	mov	r23, r22
     b32:	05 c0       	rjmp	.+10     	; 0xb3e <__floatsisf+0x5e>
     b34:	66 23       	and	r22, r22
     b36:	71 f0       	breq	.+28     	; 0xb54 <__floatsisf+0x74>
     b38:	96 e8       	ldi	r25, 0x86	; 134
     b3a:	86 2f       	mov	r24, r22
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	2a f0       	brmi	.+10     	; 0xb4c <__floatsisf+0x6c>
     b42:	9a 95       	dec	r25
     b44:	66 0f       	add	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	88 1f       	adc	r24, r24
     b4a:	da f7       	brpl	.-10     	; 0xb42 <__floatsisf+0x62>
     b4c:	88 0f       	add	r24, r24
     b4e:	96 95       	lsr	r25
     b50:	87 95       	ror	r24
     b52:	97 f9       	bld	r25, 7
     b54:	08 95       	ret

00000b56 <__fp_inf>:
     b56:	97 f9       	bld	r25, 7
     b58:	9f 67       	ori	r25, 0x7F	; 127
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	08 95       	ret

00000b62 <__fp_nan>:
     b62:	9f ef       	ldi	r25, 0xFF	; 255
     b64:	80 ec       	ldi	r24, 0xC0	; 192
     b66:	08 95       	ret

00000b68 <__fp_pscA>:
     b68:	00 24       	eor	r0, r0
     b6a:	0a 94       	dec	r0
     b6c:	16 16       	cp	r1, r22
     b6e:	17 06       	cpc	r1, r23
     b70:	18 06       	cpc	r1, r24
     b72:	09 06       	cpc	r0, r25
     b74:	08 95       	ret

00000b76 <__fp_pscB>:
     b76:	00 24       	eor	r0, r0
     b78:	0a 94       	dec	r0
     b7a:	12 16       	cp	r1, r18
     b7c:	13 06       	cpc	r1, r19
     b7e:	14 06       	cpc	r1, r20
     b80:	05 06       	cpc	r0, r21
     b82:	08 95       	ret

00000b84 <__fp_round>:
     b84:	09 2e       	mov	r0, r25
     b86:	03 94       	inc	r0
     b88:	00 0c       	add	r0, r0
     b8a:	11 f4       	brne	.+4      	; 0xb90 <__fp_round+0xc>
     b8c:	88 23       	and	r24, r24
     b8e:	52 f0       	brmi	.+20     	; 0xba4 <__fp_round+0x20>
     b90:	bb 0f       	add	r27, r27
     b92:	40 f4       	brcc	.+16     	; 0xba4 <__fp_round+0x20>
     b94:	bf 2b       	or	r27, r31
     b96:	11 f4       	brne	.+4      	; 0xb9c <__fp_round+0x18>
     b98:	60 ff       	sbrs	r22, 0
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__fp_round+0x20>
     b9c:	6f 5f       	subi	r22, 0xFF	; 255
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	8f 4f       	sbci	r24, 0xFF	; 255
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	08 95       	ret

00000ba6 <__fp_split3>:
     ba6:	57 fd       	sbrc	r21, 7
     ba8:	90 58       	subi	r25, 0x80	; 128
     baa:	44 0f       	add	r20, r20
     bac:	55 1f       	adc	r21, r21
     bae:	59 f0       	breq	.+22     	; 0xbc6 <__fp_splitA+0x10>
     bb0:	5f 3f       	cpi	r21, 0xFF	; 255
     bb2:	71 f0       	breq	.+28     	; 0xbd0 <__fp_splitA+0x1a>
     bb4:	47 95       	ror	r20

00000bb6 <__fp_splitA>:
     bb6:	88 0f       	add	r24, r24
     bb8:	97 fb       	bst	r25, 7
     bba:	99 1f       	adc	r25, r25
     bbc:	61 f0       	breq	.+24     	; 0xbd6 <__fp_splitA+0x20>
     bbe:	9f 3f       	cpi	r25, 0xFF	; 255
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <__fp_splitA+0x2a>
     bc2:	87 95       	ror	r24
     bc4:	08 95       	ret
     bc6:	12 16       	cp	r1, r18
     bc8:	13 06       	cpc	r1, r19
     bca:	14 06       	cpc	r1, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	f2 cf       	rjmp	.-28     	; 0xbb4 <__fp_split3+0xe>
     bd0:	46 95       	lsr	r20
     bd2:	f1 df       	rcall	.-30     	; 0xbb6 <__fp_splitA>
     bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <__fp_splitA+0x30>
     bd6:	16 16       	cp	r1, r22
     bd8:	17 06       	cpc	r1, r23
     bda:	18 06       	cpc	r1, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	f1 cf       	rjmp	.-30     	; 0xbc2 <__fp_splitA+0xc>
     be0:	86 95       	lsr	r24
     be2:	71 05       	cpc	r23, r1
     be4:	61 05       	cpc	r22, r1
     be6:	08 94       	sec
     be8:	08 95       	ret

00000bea <__fp_zero>:
     bea:	e8 94       	clt

00000bec <__fp_szero>:
     bec:	bb 27       	eor	r27, r27
     bee:	66 27       	eor	r22, r22
     bf0:	77 27       	eor	r23, r23
     bf2:	cb 01       	movw	r24, r22
     bf4:	97 f9       	bld	r25, 7
     bf6:	08 95       	ret

00000bf8 <__mulsf3>:
     bf8:	0b d0       	rcall	.+22     	; 0xc10 <__mulsf3x>
     bfa:	c4 cf       	rjmp	.-120    	; 0xb84 <__fp_round>
     bfc:	b5 df       	rcall	.-150    	; 0xb68 <__fp_pscA>
     bfe:	28 f0       	brcs	.+10     	; 0xc0a <__mulsf3+0x12>
     c00:	ba df       	rcall	.-140    	; 0xb76 <__fp_pscB>
     c02:	18 f0       	brcs	.+6      	; 0xc0a <__mulsf3+0x12>
     c04:	95 23       	and	r25, r21
     c06:	09 f0       	breq	.+2      	; 0xc0a <__mulsf3+0x12>
     c08:	a6 cf       	rjmp	.-180    	; 0xb56 <__fp_inf>
     c0a:	ab cf       	rjmp	.-170    	; 0xb62 <__fp_nan>
     c0c:	11 24       	eor	r1, r1
     c0e:	ee cf       	rjmp	.-36     	; 0xbec <__fp_szero>

00000c10 <__mulsf3x>:
     c10:	ca df       	rcall	.-108    	; 0xba6 <__fp_split3>
     c12:	a0 f3       	brcs	.-24     	; 0xbfc <__mulsf3+0x4>

00000c14 <__mulsf3_pse>:
     c14:	95 9f       	mul	r25, r21
     c16:	d1 f3       	breq	.-12     	; 0xc0c <__mulsf3+0x14>
     c18:	95 0f       	add	r25, r21
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	55 1f       	adc	r21, r21
     c1e:	62 9f       	mul	r22, r18
     c20:	f0 01       	movw	r30, r0
     c22:	72 9f       	mul	r23, r18
     c24:	bb 27       	eor	r27, r27
     c26:	f0 0d       	add	r31, r0
     c28:	b1 1d       	adc	r27, r1
     c2a:	63 9f       	mul	r22, r19
     c2c:	aa 27       	eor	r26, r26
     c2e:	f0 0d       	add	r31, r0
     c30:	b1 1d       	adc	r27, r1
     c32:	aa 1f       	adc	r26, r26
     c34:	64 9f       	mul	r22, r20
     c36:	66 27       	eor	r22, r22
     c38:	b0 0d       	add	r27, r0
     c3a:	a1 1d       	adc	r26, r1
     c3c:	66 1f       	adc	r22, r22
     c3e:	82 9f       	mul	r24, r18
     c40:	22 27       	eor	r18, r18
     c42:	b0 0d       	add	r27, r0
     c44:	a1 1d       	adc	r26, r1
     c46:	62 1f       	adc	r22, r18
     c48:	73 9f       	mul	r23, r19
     c4a:	b0 0d       	add	r27, r0
     c4c:	a1 1d       	adc	r26, r1
     c4e:	62 1f       	adc	r22, r18
     c50:	83 9f       	mul	r24, r19
     c52:	a0 0d       	add	r26, r0
     c54:	61 1d       	adc	r22, r1
     c56:	22 1f       	adc	r18, r18
     c58:	74 9f       	mul	r23, r20
     c5a:	33 27       	eor	r19, r19
     c5c:	a0 0d       	add	r26, r0
     c5e:	61 1d       	adc	r22, r1
     c60:	23 1f       	adc	r18, r19
     c62:	84 9f       	mul	r24, r20
     c64:	60 0d       	add	r22, r0
     c66:	21 1d       	adc	r18, r1
     c68:	82 2f       	mov	r24, r18
     c6a:	76 2f       	mov	r23, r22
     c6c:	6a 2f       	mov	r22, r26
     c6e:	11 24       	eor	r1, r1
     c70:	9f 57       	subi	r25, 0x7F	; 127
     c72:	50 40       	sbci	r21, 0x00	; 0
     c74:	8a f0       	brmi	.+34     	; 0xc98 <__mulsf3_pse+0x84>
     c76:	e1 f0       	breq	.+56     	; 0xcb0 <__mulsf3_pse+0x9c>
     c78:	88 23       	and	r24, r24
     c7a:	4a f0       	brmi	.+18     	; 0xc8e <__mulsf3_pse+0x7a>
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	bb 1f       	adc	r27, r27
     c82:	66 1f       	adc	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	91 50       	subi	r25, 0x01	; 1
     c8a:	50 40       	sbci	r21, 0x00	; 0
     c8c:	a9 f7       	brne	.-22     	; 0xc78 <__mulsf3_pse+0x64>
     c8e:	9e 3f       	cpi	r25, 0xFE	; 254
     c90:	51 05       	cpc	r21, r1
     c92:	70 f0       	brcs	.+28     	; 0xcb0 <__mulsf3_pse+0x9c>
     c94:	60 cf       	rjmp	.-320    	; 0xb56 <__fp_inf>
     c96:	aa cf       	rjmp	.-172    	; 0xbec <__fp_szero>
     c98:	5f 3f       	cpi	r21, 0xFF	; 255
     c9a:	ec f3       	brlt	.-6      	; 0xc96 <__mulsf3_pse+0x82>
     c9c:	98 3e       	cpi	r25, 0xE8	; 232
     c9e:	dc f3       	brlt	.-10     	; 0xc96 <__mulsf3_pse+0x82>
     ca0:	86 95       	lsr	r24
     ca2:	77 95       	ror	r23
     ca4:	67 95       	ror	r22
     ca6:	b7 95       	ror	r27
     ca8:	f7 95       	ror	r31
     caa:	e7 95       	ror	r30
     cac:	9f 5f       	subi	r25, 0xFF	; 255
     cae:	c1 f7       	brne	.-16     	; 0xca0 <__mulsf3_pse+0x8c>
     cb0:	fe 2b       	or	r31, r30
     cb2:	88 0f       	add	r24, r24
     cb4:	91 1d       	adc	r25, r1
     cb6:	96 95       	lsr	r25
     cb8:	87 95       	ror	r24
     cba:	97 f9       	bld	r25, 7
     cbc:	08 95       	ret

00000cbe <printf>:
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e5 e6       	ldi	r30, 0x65	; 101
     cc4:	f6 e0       	ldi	r31, 0x06	; 6
     cc6:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__prologue_saves__+0x20>
     cca:	fe 01       	movw	r30, r28
     ccc:	35 96       	adiw	r30, 0x05	; 5
     cce:	61 91       	ld	r22, Z+
     cd0:	71 91       	ld	r23, Z+
     cd2:	af 01       	movw	r20, r30
     cd4:	80 91 08 02 	lds	r24, 0x0208
     cd8:	90 91 09 02 	lds	r25, 0x0209
     cdc:	0e 94 a0 06 	call	0xd40	; 0xd40 <vfprintf>
     ce0:	e2 e0       	ldi	r30, 0x02	; 2
     ce2:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__epilogue_restores__+0x20>

00000ce6 <puts>:
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	e0 91 08 02 	lds	r30, 0x0208
     cf2:	f0 91 09 02 	lds	r31, 0x0209
     cf6:	23 81       	ldd	r18, Z+3	; 0x03
     cf8:	21 ff       	sbrs	r18, 1
     cfa:	1b c0       	rjmp	.+54     	; 0xd32 <puts+0x4c>
     cfc:	ec 01       	movw	r28, r24
     cfe:	00 e0       	ldi	r16, 0x00	; 0
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	89 91       	ld	r24, Y+
     d04:	60 91 08 02 	lds	r22, 0x0208
     d08:	70 91 09 02 	lds	r23, 0x0209
     d0c:	db 01       	movw	r26, r22
     d0e:	18 96       	adiw	r26, 0x08	; 8
     d10:	ed 91       	ld	r30, X+
     d12:	fc 91       	ld	r31, X
     d14:	19 97       	sbiw	r26, 0x09	; 9
     d16:	88 23       	and	r24, r24
     d18:	31 f0       	breq	.+12     	; 0xd26 <puts+0x40>
     d1a:	09 95       	icall
     d1c:	89 2b       	or	r24, r25
     d1e:	89 f3       	breq	.-30     	; 0xd02 <puts+0x1c>
     d20:	0f ef       	ldi	r16, 0xFF	; 255
     d22:	1f ef       	ldi	r17, 0xFF	; 255
     d24:	ee cf       	rjmp	.-36     	; 0xd02 <puts+0x1c>
     d26:	8a e0       	ldi	r24, 0x0A	; 10
     d28:	09 95       	icall
     d2a:	89 2b       	or	r24, r25
     d2c:	11 f4       	brne	.+4      	; 0xd32 <puts+0x4c>
     d2e:	c8 01       	movw	r24, r16
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <puts+0x50>
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	9f ef       	ldi	r25, 0xFF	; 255
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <vfprintf>:
     d40:	ac e0       	ldi	r26, 0x0C	; 12
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 ea       	ldi	r30, 0xA6	; 166
     d46:	f6 e0       	ldi	r31, 0x06	; 6
     d48:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__prologue_saves__>
     d4c:	7c 01       	movw	r14, r24
     d4e:	6b 01       	movw	r12, r22
     d50:	8a 01       	movw	r16, r20
     d52:	fc 01       	movw	r30, r24
     d54:	17 82       	std	Z+7, r1	; 0x07
     d56:	16 82       	std	Z+6, r1	; 0x06
     d58:	83 81       	ldd	r24, Z+3	; 0x03
     d5a:	81 ff       	sbrs	r24, 1
     d5c:	bd c1       	rjmp	.+890    	; 0x10d8 <vfprintf+0x398>
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	4c 01       	movw	r8, r24
     d64:	f7 01       	movw	r30, r14
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	f6 01       	movw	r30, r12
     d6a:	93 fd       	sbrc	r25, 3
     d6c:	85 91       	lpm	r24, Z+
     d6e:	93 ff       	sbrs	r25, 3
     d70:	81 91       	ld	r24, Z+
     d72:	6f 01       	movw	r12, r30
     d74:	88 23       	and	r24, r24
     d76:	09 f4       	brne	.+2      	; 0xd7a <vfprintf+0x3a>
     d78:	ab c1       	rjmp	.+854    	; 0x10d0 <vfprintf+0x390>
     d7a:	85 32       	cpi	r24, 0x25	; 37
     d7c:	39 f4       	brne	.+14     	; 0xd8c <vfprintf+0x4c>
     d7e:	93 fd       	sbrc	r25, 3
     d80:	85 91       	lpm	r24, Z+
     d82:	93 ff       	sbrs	r25, 3
     d84:	81 91       	ld	r24, Z+
     d86:	6f 01       	movw	r12, r30
     d88:	85 32       	cpi	r24, 0x25	; 37
     d8a:	29 f4       	brne	.+10     	; 0xd96 <vfprintf+0x56>
     d8c:	b7 01       	movw	r22, r14
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
     d94:	e7 cf       	rjmp	.-50     	; 0xd64 <vfprintf+0x24>
     d96:	51 2c       	mov	r5, r1
     d98:	31 2c       	mov	r3, r1
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	20 32       	cpi	r18, 0x20	; 32
     d9e:	a0 f4       	brcc	.+40     	; 0xdc8 <vfprintf+0x88>
     da0:	8b 32       	cpi	r24, 0x2B	; 43
     da2:	69 f0       	breq	.+26     	; 0xdbe <vfprintf+0x7e>
     da4:	30 f4       	brcc	.+12     	; 0xdb2 <vfprintf+0x72>
     da6:	80 32       	cpi	r24, 0x20	; 32
     da8:	59 f0       	breq	.+22     	; 0xdc0 <vfprintf+0x80>
     daa:	83 32       	cpi	r24, 0x23	; 35
     dac:	69 f4       	brne	.+26     	; 0xdc8 <vfprintf+0x88>
     dae:	20 61       	ori	r18, 0x10	; 16
     db0:	2c c0       	rjmp	.+88     	; 0xe0a <vfprintf+0xca>
     db2:	8d 32       	cpi	r24, 0x2D	; 45
     db4:	39 f0       	breq	.+14     	; 0xdc4 <vfprintf+0x84>
     db6:	80 33       	cpi	r24, 0x30	; 48
     db8:	39 f4       	brne	.+14     	; 0xdc8 <vfprintf+0x88>
     dba:	21 60       	ori	r18, 0x01	; 1
     dbc:	26 c0       	rjmp	.+76     	; 0xe0a <vfprintf+0xca>
     dbe:	22 60       	ori	r18, 0x02	; 2
     dc0:	24 60       	ori	r18, 0x04	; 4
     dc2:	23 c0       	rjmp	.+70     	; 0xe0a <vfprintf+0xca>
     dc4:	28 60       	ori	r18, 0x08	; 8
     dc6:	21 c0       	rjmp	.+66     	; 0xe0a <vfprintf+0xca>
     dc8:	27 fd       	sbrc	r18, 7
     dca:	27 c0       	rjmp	.+78     	; 0xe1a <vfprintf+0xda>
     dcc:	30 ed       	ldi	r19, 0xD0	; 208
     dce:	38 0f       	add	r19, r24
     dd0:	3a 30       	cpi	r19, 0x0A	; 10
     dd2:	78 f4       	brcc	.+30     	; 0xdf2 <vfprintf+0xb2>
     dd4:	26 ff       	sbrs	r18, 6
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <vfprintf+0xa4>
     dd8:	fa e0       	ldi	r31, 0x0A	; 10
     dda:	5f 9e       	mul	r5, r31
     ddc:	30 0d       	add	r19, r0
     dde:	11 24       	eor	r1, r1
     de0:	53 2e       	mov	r5, r19
     de2:	13 c0       	rjmp	.+38     	; 0xe0a <vfprintf+0xca>
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	38 9e       	mul	r3, r24
     de8:	30 0d       	add	r19, r0
     dea:	11 24       	eor	r1, r1
     dec:	33 2e       	mov	r3, r19
     dee:	20 62       	ori	r18, 0x20	; 32
     df0:	0c c0       	rjmp	.+24     	; 0xe0a <vfprintf+0xca>
     df2:	8e 32       	cpi	r24, 0x2E	; 46
     df4:	21 f4       	brne	.+8      	; 0xdfe <vfprintf+0xbe>
     df6:	26 fd       	sbrc	r18, 6
     df8:	6b c1       	rjmp	.+726    	; 0x10d0 <vfprintf+0x390>
     dfa:	20 64       	ori	r18, 0x40	; 64
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <vfprintf+0xca>
     dfe:	8c 36       	cpi	r24, 0x6C	; 108
     e00:	11 f4       	brne	.+4      	; 0xe06 <vfprintf+0xc6>
     e02:	20 68       	ori	r18, 0x80	; 128
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <vfprintf+0xca>
     e06:	88 36       	cpi	r24, 0x68	; 104
     e08:	41 f4       	brne	.+16     	; 0xe1a <vfprintf+0xda>
     e0a:	f6 01       	movw	r30, r12
     e0c:	93 fd       	sbrc	r25, 3
     e0e:	85 91       	lpm	r24, Z+
     e10:	93 ff       	sbrs	r25, 3
     e12:	81 91       	ld	r24, Z+
     e14:	6f 01       	movw	r12, r30
     e16:	81 11       	cpse	r24, r1
     e18:	c1 cf       	rjmp	.-126    	; 0xd9c <vfprintf+0x5c>
     e1a:	98 2f       	mov	r25, r24
     e1c:	9f 7d       	andi	r25, 0xDF	; 223
     e1e:	95 54       	subi	r25, 0x45	; 69
     e20:	93 30       	cpi	r25, 0x03	; 3
     e22:	28 f4       	brcc	.+10     	; 0xe2e <vfprintf+0xee>
     e24:	0c 5f       	subi	r16, 0xFC	; 252
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	ff e3       	ldi	r31, 0x3F	; 63
     e2a:	f9 83       	std	Y+1, r31	; 0x01
     e2c:	0d c0       	rjmp	.+26     	; 0xe48 <vfprintf+0x108>
     e2e:	83 36       	cpi	r24, 0x63	; 99
     e30:	31 f0       	breq	.+12     	; 0xe3e <vfprintf+0xfe>
     e32:	83 37       	cpi	r24, 0x73	; 115
     e34:	71 f0       	breq	.+28     	; 0xe52 <vfprintf+0x112>
     e36:	83 35       	cpi	r24, 0x53	; 83
     e38:	09 f0       	breq	.+2      	; 0xe3c <vfprintf+0xfc>
     e3a:	5b c0       	rjmp	.+182    	; 0xef2 <vfprintf+0x1b2>
     e3c:	22 c0       	rjmp	.+68     	; 0xe82 <vfprintf+0x142>
     e3e:	f8 01       	movw	r30, r16
     e40:	80 81       	ld	r24, Z
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	0e 5f       	subi	r16, 0xFE	; 254
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	44 24       	eor	r4, r4
     e4a:	43 94       	inc	r4
     e4c:	51 2c       	mov	r5, r1
     e4e:	54 01       	movw	r10, r8
     e50:	15 c0       	rjmp	.+42     	; 0xe7c <vfprintf+0x13c>
     e52:	38 01       	movw	r6, r16
     e54:	f2 e0       	ldi	r31, 0x02	; 2
     e56:	6f 0e       	add	r6, r31
     e58:	71 1c       	adc	r7, r1
     e5a:	f8 01       	movw	r30, r16
     e5c:	a0 80       	ld	r10, Z
     e5e:	b1 80       	ldd	r11, Z+1	; 0x01
     e60:	26 ff       	sbrs	r18, 6
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <vfprintf+0x12a>
     e64:	65 2d       	mov	r22, r5
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <vfprintf+0x12e>
     e6a:	6f ef       	ldi	r22, 0xFF	; 255
     e6c:	7f ef       	ldi	r23, 0xFF	; 255
     e6e:	c5 01       	movw	r24, r10
     e70:	2c 87       	std	Y+12, r18	; 0x0c
     e72:	0e 94 7d 08 	call	0x10fa	; 0x10fa <strnlen>
     e76:	2c 01       	movw	r4, r24
     e78:	83 01       	movw	r16, r6
     e7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e7c:	2f 77       	andi	r18, 0x7F	; 127
     e7e:	22 2e       	mov	r2, r18
     e80:	17 c0       	rjmp	.+46     	; 0xeb0 <vfprintf+0x170>
     e82:	38 01       	movw	r6, r16
     e84:	f2 e0       	ldi	r31, 0x02	; 2
     e86:	6f 0e       	add	r6, r31
     e88:	71 1c       	adc	r7, r1
     e8a:	f8 01       	movw	r30, r16
     e8c:	a0 80       	ld	r10, Z
     e8e:	b1 80       	ldd	r11, Z+1	; 0x01
     e90:	26 ff       	sbrs	r18, 6
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <vfprintf+0x15a>
     e94:	65 2d       	mov	r22, r5
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vfprintf+0x15e>
     e9a:	6f ef       	ldi	r22, 0xFF	; 255
     e9c:	7f ef       	ldi	r23, 0xFF	; 255
     e9e:	c5 01       	movw	r24, r10
     ea0:	2c 87       	std	Y+12, r18	; 0x0c
     ea2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <strnlen_P>
     ea6:	2c 01       	movw	r4, r24
     ea8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eaa:	20 68       	ori	r18, 0x80	; 128
     eac:	22 2e       	mov	r2, r18
     eae:	83 01       	movw	r16, r6
     eb0:	23 fc       	sbrc	r2, 3
     eb2:	1b c0       	rjmp	.+54     	; 0xeea <vfprintf+0x1aa>
     eb4:	83 2d       	mov	r24, r3
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	48 16       	cp	r4, r24
     eba:	59 06       	cpc	r5, r25
     ebc:	b0 f4       	brcc	.+44     	; 0xeea <vfprintf+0x1aa>
     ebe:	b7 01       	movw	r22, r14
     ec0:	80 e2       	ldi	r24, 0x20	; 32
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
     ec8:	3a 94       	dec	r3
     eca:	f4 cf       	rjmp	.-24     	; 0xeb4 <vfprintf+0x174>
     ecc:	f5 01       	movw	r30, r10
     ece:	27 fc       	sbrc	r2, 7
     ed0:	85 91       	lpm	r24, Z+
     ed2:	27 fe       	sbrs	r2, 7
     ed4:	81 91       	ld	r24, Z+
     ed6:	5f 01       	movw	r10, r30
     ed8:	b7 01       	movw	r22, r14
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
     ee0:	31 10       	cpse	r3, r1
     ee2:	3a 94       	dec	r3
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	4f 1a       	sub	r4, r31
     ee8:	51 08       	sbc	r5, r1
     eea:	41 14       	cp	r4, r1
     eec:	51 04       	cpc	r5, r1
     eee:	71 f7       	brne	.-36     	; 0xecc <vfprintf+0x18c>
     ef0:	e5 c0       	rjmp	.+458    	; 0x10bc <vfprintf+0x37c>
     ef2:	84 36       	cpi	r24, 0x64	; 100
     ef4:	11 f0       	breq	.+4      	; 0xefa <vfprintf+0x1ba>
     ef6:	89 36       	cpi	r24, 0x69	; 105
     ef8:	39 f5       	brne	.+78     	; 0xf48 <vfprintf+0x208>
     efa:	f8 01       	movw	r30, r16
     efc:	27 ff       	sbrs	r18, 7
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <vfprintf+0x1ce>
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	0c 5f       	subi	r16, 0xFC	; 252
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <vfprintf+0x1de>
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	88 27       	eor	r24, r24
     f14:	77 fd       	sbrc	r23, 7
     f16:	80 95       	com	r24
     f18:	98 2f       	mov	r25, r24
     f1a:	0e 5f       	subi	r16, 0xFE	; 254
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	2f 76       	andi	r18, 0x6F	; 111
     f20:	b2 2e       	mov	r11, r18
     f22:	97 ff       	sbrs	r25, 7
     f24:	09 c0       	rjmp	.+18     	; 0xf38 <vfprintf+0x1f8>
     f26:	90 95       	com	r25
     f28:	80 95       	com	r24
     f2a:	70 95       	com	r23
     f2c:	61 95       	neg	r22
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	8f 4f       	sbci	r24, 0xFF	; 255
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	20 68       	ori	r18, 0x80	; 128
     f36:	b2 2e       	mov	r11, r18
     f38:	2a e0       	ldi	r18, 0x0A	; 10
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	a4 01       	movw	r20, r8
     f3e:	0e 94 ba 08 	call	0x1174	; 0x1174 <__ultoa_invert>
     f42:	a8 2e       	mov	r10, r24
     f44:	a8 18       	sub	r10, r8
     f46:	44 c0       	rjmp	.+136    	; 0xfd0 <vfprintf+0x290>
     f48:	85 37       	cpi	r24, 0x75	; 117
     f4a:	29 f4       	brne	.+10     	; 0xf56 <vfprintf+0x216>
     f4c:	2f 7e       	andi	r18, 0xEF	; 239
     f4e:	b2 2e       	mov	r11, r18
     f50:	2a e0       	ldi	r18, 0x0A	; 10
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	25 c0       	rjmp	.+74     	; 0xfa0 <vfprintf+0x260>
     f56:	f2 2f       	mov	r31, r18
     f58:	f9 7f       	andi	r31, 0xF9	; 249
     f5a:	bf 2e       	mov	r11, r31
     f5c:	8f 36       	cpi	r24, 0x6F	; 111
     f5e:	c1 f0       	breq	.+48     	; 0xf90 <vfprintf+0x250>
     f60:	18 f4       	brcc	.+6      	; 0xf68 <vfprintf+0x228>
     f62:	88 35       	cpi	r24, 0x58	; 88
     f64:	79 f0       	breq	.+30     	; 0xf84 <vfprintf+0x244>
     f66:	b4 c0       	rjmp	.+360    	; 0x10d0 <vfprintf+0x390>
     f68:	80 37       	cpi	r24, 0x70	; 112
     f6a:	19 f0       	breq	.+6      	; 0xf72 <vfprintf+0x232>
     f6c:	88 37       	cpi	r24, 0x78	; 120
     f6e:	21 f0       	breq	.+8      	; 0xf78 <vfprintf+0x238>
     f70:	af c0       	rjmp	.+350    	; 0x10d0 <vfprintf+0x390>
     f72:	2f 2f       	mov	r18, r31
     f74:	20 61       	ori	r18, 0x10	; 16
     f76:	b2 2e       	mov	r11, r18
     f78:	b4 fe       	sbrs	r11, 4
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <vfprintf+0x256>
     f7c:	8b 2d       	mov	r24, r11
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	b8 2e       	mov	r11, r24
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <vfprintf+0x256>
     f84:	24 ff       	sbrs	r18, 4
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <vfprintf+0x25c>
     f88:	9f 2f       	mov	r25, r31
     f8a:	96 60       	ori	r25, 0x06	; 6
     f8c:	b9 2e       	mov	r11, r25
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <vfprintf+0x25c>
     f90:	28 e0       	ldi	r18, 0x08	; 8
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <vfprintf+0x260>
     f96:	20 e1       	ldi	r18, 0x10	; 16
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <vfprintf+0x260>
     f9c:	20 e1       	ldi	r18, 0x10	; 16
     f9e:	32 e0       	ldi	r19, 0x02	; 2
     fa0:	f8 01       	movw	r30, r16
     fa2:	b7 fe       	sbrs	r11, 7
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <vfprintf+0x274>
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0c 5f       	subi	r16, 0xFC	; 252
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x280>
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 5f       	subi	r16, 0xFE	; 254
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	a4 01       	movw	r20, r8
     fc2:	0e 94 ba 08 	call	0x1174	; 0x1174 <__ultoa_invert>
     fc6:	a8 2e       	mov	r10, r24
     fc8:	a8 18       	sub	r10, r8
     fca:	fb 2d       	mov	r31, r11
     fcc:	ff 77       	andi	r31, 0x7F	; 127
     fce:	bf 2e       	mov	r11, r31
     fd0:	b6 fe       	sbrs	r11, 6
     fd2:	0b c0       	rjmp	.+22     	; 0xfea <vfprintf+0x2aa>
     fd4:	2b 2d       	mov	r18, r11
     fd6:	2e 7f       	andi	r18, 0xFE	; 254
     fd8:	a5 14       	cp	r10, r5
     fda:	50 f4       	brcc	.+20     	; 0xff0 <vfprintf+0x2b0>
     fdc:	b4 fe       	sbrs	r11, 4
     fde:	0a c0       	rjmp	.+20     	; 0xff4 <vfprintf+0x2b4>
     fe0:	b2 fc       	sbrc	r11, 2
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <vfprintf+0x2b4>
     fe4:	2b 2d       	mov	r18, r11
     fe6:	2e 7e       	andi	r18, 0xEE	; 238
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <vfprintf+0x2b4>
     fea:	7a 2c       	mov	r7, r10
     fec:	2b 2d       	mov	r18, r11
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <vfprintf+0x2b6>
     ff0:	7a 2c       	mov	r7, r10
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <vfprintf+0x2b6>
     ff4:	75 2c       	mov	r7, r5
     ff6:	24 ff       	sbrs	r18, 4
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <vfprintf+0x2d4>
     ffa:	fe 01       	movw	r30, r28
     ffc:	ea 0d       	add	r30, r10
     ffe:	f1 1d       	adc	r31, r1
    1000:	80 81       	ld	r24, Z
    1002:	80 33       	cpi	r24, 0x30	; 48
    1004:	11 f4       	brne	.+4      	; 0x100a <vfprintf+0x2ca>
    1006:	29 7e       	andi	r18, 0xE9	; 233
    1008:	09 c0       	rjmp	.+18     	; 0x101c <vfprintf+0x2dc>
    100a:	22 ff       	sbrs	r18, 2
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x2da>
    100e:	73 94       	inc	r7
    1010:	73 94       	inc	r7
    1012:	04 c0       	rjmp	.+8      	; 0x101c <vfprintf+0x2dc>
    1014:	82 2f       	mov	r24, r18
    1016:	86 78       	andi	r24, 0x86	; 134
    1018:	09 f0       	breq	.+2      	; 0x101c <vfprintf+0x2dc>
    101a:	73 94       	inc	r7
    101c:	23 fd       	sbrc	r18, 3
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <vfprintf+0x306>
    1020:	20 ff       	sbrs	r18, 0
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <vfprintf+0x2f0>
    1024:	5a 2c       	mov	r5, r10
    1026:	73 14       	cp	r7, r3
    1028:	18 f4       	brcc	.+6      	; 0x1030 <vfprintf+0x2f0>
    102a:	53 0c       	add	r5, r3
    102c:	57 18       	sub	r5, r7
    102e:	73 2c       	mov	r7, r3
    1030:	73 14       	cp	r7, r3
    1032:	68 f4       	brcc	.+26     	; 0x104e <vfprintf+0x30e>
    1034:	b7 01       	movw	r22, r14
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	2c 87       	std	Y+12, r18	; 0x0c
    103c:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
    1040:	73 94       	inc	r7
    1042:	2c 85       	ldd	r18, Y+12	; 0x0c
    1044:	f5 cf       	rjmp	.-22     	; 0x1030 <vfprintf+0x2f0>
    1046:	73 14       	cp	r7, r3
    1048:	10 f4       	brcc	.+4      	; 0x104e <vfprintf+0x30e>
    104a:	37 18       	sub	r3, r7
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <vfprintf+0x310>
    104e:	31 2c       	mov	r3, r1
    1050:	24 ff       	sbrs	r18, 4
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <vfprintf+0x338>
    1054:	b7 01       	movw	r22, r14
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	2c 87       	std	Y+12, r18	; 0x0c
    105c:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
    1060:	2c 85       	ldd	r18, Y+12	; 0x0c
    1062:	22 ff       	sbrs	r18, 2
    1064:	17 c0       	rjmp	.+46     	; 0x1094 <vfprintf+0x354>
    1066:	21 ff       	sbrs	r18, 1
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <vfprintf+0x330>
    106a:	88 e5       	ldi	r24, 0x58	; 88
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <vfprintf+0x334>
    1070:	88 e7       	ldi	r24, 0x78	; 120
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	b7 01       	movw	r22, r14
    1076:	0c c0       	rjmp	.+24     	; 0x1090 <vfprintf+0x350>
    1078:	82 2f       	mov	r24, r18
    107a:	86 78       	andi	r24, 0x86	; 134
    107c:	59 f0       	breq	.+22     	; 0x1094 <vfprintf+0x354>
    107e:	21 fd       	sbrc	r18, 1
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x346>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <vfprintf+0x348>
    1086:	8b e2       	ldi	r24, 0x2B	; 43
    1088:	27 fd       	sbrc	r18, 7
    108a:	8d e2       	ldi	r24, 0x2D	; 45
    108c:	b7 01       	movw	r22, r14
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
    1094:	a5 14       	cp	r10, r5
    1096:	38 f4       	brcc	.+14     	; 0x10a6 <vfprintf+0x366>
    1098:	b7 01       	movw	r22, r14
    109a:	80 e3       	ldi	r24, 0x30	; 48
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
    10a2:	5a 94       	dec	r5
    10a4:	f7 cf       	rjmp	.-18     	; 0x1094 <vfprintf+0x354>
    10a6:	aa 94       	dec	r10
    10a8:	f4 01       	movw	r30, r8
    10aa:	ea 0d       	add	r30, r10
    10ac:	f1 1d       	adc	r31, r1
    10ae:	80 81       	ld	r24, Z
    10b0:	b7 01       	movw	r22, r14
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
    10b8:	a1 10       	cpse	r10, r1
    10ba:	f5 cf       	rjmp	.-22     	; 0x10a6 <vfprintf+0x366>
    10bc:	33 20       	and	r3, r3
    10be:	09 f4       	brne	.+2      	; 0x10c2 <vfprintf+0x382>
    10c0:	51 ce       	rjmp	.-862    	; 0xd64 <vfprintf+0x24>
    10c2:	b7 01       	movw	r22, r14
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 88 08 	call	0x1110	; 0x1110 <fputc>
    10cc:	3a 94       	dec	r3
    10ce:	f6 cf       	rjmp	.-20     	; 0x10bc <vfprintf+0x37c>
    10d0:	f7 01       	movw	r30, r14
    10d2:	86 81       	ldd	r24, Z+6	; 0x06
    10d4:	97 81       	ldd	r25, Z+7	; 0x07
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x39c>
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	2c 96       	adiw	r28, 0x0c	; 12
    10de:	e2 e1       	ldi	r30, 0x12	; 18
    10e0:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__epilogue_restores__>

000010e4 <strnlen_P>:
    10e4:	fc 01       	movw	r30, r24
    10e6:	05 90       	lpm	r0, Z+
    10e8:	61 50       	subi	r22, 0x01	; 1
    10ea:	70 40       	sbci	r23, 0x00	; 0
    10ec:	01 10       	cpse	r0, r1
    10ee:	d8 f7       	brcc	.-10     	; 0x10e6 <strnlen_P+0x2>
    10f0:	80 95       	com	r24
    10f2:	90 95       	com	r25
    10f4:	8e 0f       	add	r24, r30
    10f6:	9f 1f       	adc	r25, r31
    10f8:	08 95       	ret

000010fa <strnlen>:
    10fa:	fc 01       	movw	r30, r24
    10fc:	61 50       	subi	r22, 0x01	; 1
    10fe:	70 40       	sbci	r23, 0x00	; 0
    1100:	01 90       	ld	r0, Z+
    1102:	01 10       	cpse	r0, r1
    1104:	d8 f7       	brcc	.-10     	; 0x10fc <strnlen+0x2>
    1106:	80 95       	com	r24
    1108:	90 95       	com	r25
    110a:	8e 0f       	add	r24, r30
    110c:	9f 1f       	adc	r25, r31
    110e:	08 95       	ret

00001110 <fputc>:
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	18 2f       	mov	r17, r24
    111a:	09 2f       	mov	r16, r25
    111c:	eb 01       	movw	r28, r22
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	81 fd       	sbrc	r24, 1
    1122:	03 c0       	rjmp	.+6      	; 0x112a <fputc+0x1a>
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	9f ef       	ldi	r25, 0xFF	; 255
    1128:	20 c0       	rjmp	.+64     	; 0x116a <fputc+0x5a>
    112a:	82 ff       	sbrs	r24, 2
    112c:	10 c0       	rjmp	.+32     	; 0x114e <fputc+0x3e>
    112e:	4e 81       	ldd	r20, Y+6	; 0x06
    1130:	5f 81       	ldd	r21, Y+7	; 0x07
    1132:	2c 81       	ldd	r18, Y+4	; 0x04
    1134:	3d 81       	ldd	r19, Y+5	; 0x05
    1136:	42 17       	cp	r20, r18
    1138:	53 07       	cpc	r21, r19
    113a:	7c f4       	brge	.+30     	; 0x115a <fputc+0x4a>
    113c:	e8 81       	ld	r30, Y
    113e:	f9 81       	ldd	r31, Y+1	; 0x01
    1140:	9f 01       	movw	r18, r30
    1142:	2f 5f       	subi	r18, 0xFF	; 255
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	39 83       	std	Y+1, r19	; 0x01
    1148:	28 83       	st	Y, r18
    114a:	10 83       	st	Z, r17
    114c:	06 c0       	rjmp	.+12     	; 0x115a <fputc+0x4a>
    114e:	e8 85       	ldd	r30, Y+8	; 0x08
    1150:	f9 85       	ldd	r31, Y+9	; 0x09
    1152:	81 2f       	mov	r24, r17
    1154:	09 95       	icall
    1156:	89 2b       	or	r24, r25
    1158:	29 f7       	brne	.-54     	; 0x1124 <fputc+0x14>
    115a:	2e 81       	ldd	r18, Y+6	; 0x06
    115c:	3f 81       	ldd	r19, Y+7	; 0x07
    115e:	2f 5f       	subi	r18, 0xFF	; 255
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	3f 83       	std	Y+7, r19	; 0x07
    1164:	2e 83       	std	Y+6, r18	; 0x06
    1166:	81 2f       	mov	r24, r17
    1168:	90 2f       	mov	r25, r16
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	08 95       	ret

00001174 <__ultoa_invert>:
    1174:	fa 01       	movw	r30, r20
    1176:	aa 27       	eor	r26, r26
    1178:	28 30       	cpi	r18, 0x08	; 8
    117a:	51 f1       	breq	.+84     	; 0x11d0 <__ultoa_invert+0x5c>
    117c:	20 31       	cpi	r18, 0x10	; 16
    117e:	81 f1       	breq	.+96     	; 0x11e0 <__ultoa_invert+0x6c>
    1180:	e8 94       	clt
    1182:	6f 93       	push	r22
    1184:	6e 7f       	andi	r22, 0xFE	; 254
    1186:	6e 5f       	subi	r22, 0xFE	; 254
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	8f 4f       	sbci	r24, 0xFF	; 255
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	af 4f       	sbci	r26, 0xFF	; 255
    1190:	b1 e0       	ldi	r27, 0x01	; 1
    1192:	3e d0       	rcall	.+124    	; 0x1210 <__ultoa_invert+0x9c>
    1194:	b4 e0       	ldi	r27, 0x04	; 4
    1196:	3c d0       	rcall	.+120    	; 0x1210 <__ultoa_invert+0x9c>
    1198:	67 0f       	add	r22, r23
    119a:	78 1f       	adc	r23, r24
    119c:	89 1f       	adc	r24, r25
    119e:	9a 1f       	adc	r25, r26
    11a0:	a1 1d       	adc	r26, r1
    11a2:	68 0f       	add	r22, r24
    11a4:	79 1f       	adc	r23, r25
    11a6:	8a 1f       	adc	r24, r26
    11a8:	91 1d       	adc	r25, r1
    11aa:	a1 1d       	adc	r26, r1
    11ac:	6a 0f       	add	r22, r26
    11ae:	71 1d       	adc	r23, r1
    11b0:	81 1d       	adc	r24, r1
    11b2:	91 1d       	adc	r25, r1
    11b4:	a1 1d       	adc	r26, r1
    11b6:	20 d0       	rcall	.+64     	; 0x11f8 <__ultoa_invert+0x84>
    11b8:	09 f4       	brne	.+2      	; 0x11bc <__ultoa_invert+0x48>
    11ba:	68 94       	set
    11bc:	3f 91       	pop	r19
    11be:	2a e0       	ldi	r18, 0x0A	; 10
    11c0:	26 9f       	mul	r18, r22
    11c2:	11 24       	eor	r1, r1
    11c4:	30 19       	sub	r19, r0
    11c6:	30 5d       	subi	r19, 0xD0	; 208
    11c8:	31 93       	st	Z+, r19
    11ca:	de f6       	brtc	.-74     	; 0x1182 <__ultoa_invert+0xe>
    11cc:	cf 01       	movw	r24, r30
    11ce:	08 95       	ret
    11d0:	46 2f       	mov	r20, r22
    11d2:	47 70       	andi	r20, 0x07	; 7
    11d4:	40 5d       	subi	r20, 0xD0	; 208
    11d6:	41 93       	st	Z+, r20
    11d8:	b3 e0       	ldi	r27, 0x03	; 3
    11da:	0f d0       	rcall	.+30     	; 0x11fa <__ultoa_invert+0x86>
    11dc:	c9 f7       	brne	.-14     	; 0x11d0 <__ultoa_invert+0x5c>
    11de:	f6 cf       	rjmp	.-20     	; 0x11cc <__ultoa_invert+0x58>
    11e0:	46 2f       	mov	r20, r22
    11e2:	4f 70       	andi	r20, 0x0F	; 15
    11e4:	40 5d       	subi	r20, 0xD0	; 208
    11e6:	4a 33       	cpi	r20, 0x3A	; 58
    11e8:	18 f0       	brcs	.+6      	; 0x11f0 <__ultoa_invert+0x7c>
    11ea:	49 5d       	subi	r20, 0xD9	; 217
    11ec:	31 fd       	sbrc	r19, 1
    11ee:	40 52       	subi	r20, 0x20	; 32
    11f0:	41 93       	st	Z+, r20
    11f2:	02 d0       	rcall	.+4      	; 0x11f8 <__ultoa_invert+0x84>
    11f4:	a9 f7       	brne	.-22     	; 0x11e0 <__ultoa_invert+0x6c>
    11f6:	ea cf       	rjmp	.-44     	; 0x11cc <__ultoa_invert+0x58>
    11f8:	b4 e0       	ldi	r27, 0x04	; 4
    11fa:	a6 95       	lsr	r26
    11fc:	97 95       	ror	r25
    11fe:	87 95       	ror	r24
    1200:	77 95       	ror	r23
    1202:	67 95       	ror	r22
    1204:	ba 95       	dec	r27
    1206:	c9 f7       	brne	.-14     	; 0x11fa <__ultoa_invert+0x86>
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	61 05       	cpc	r22, r1
    120c:	71 05       	cpc	r23, r1
    120e:	08 95       	ret
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	0a 2e       	mov	r0, r26
    1216:	06 94       	lsr	r0
    1218:	57 95       	ror	r21
    121a:	47 95       	ror	r20
    121c:	37 95       	ror	r19
    121e:	27 95       	ror	r18
    1220:	ba 95       	dec	r27
    1222:	c9 f7       	brne	.-14     	; 0x1216 <__ultoa_invert+0xa2>
    1224:	62 0f       	add	r22, r18
    1226:	73 1f       	adc	r23, r19
    1228:	84 1f       	adc	r24, r20
    122a:	95 1f       	adc	r25, r21
    122c:	a0 1d       	adc	r26, r0
    122e:	08 95       	ret

00001230 <__prologue_saves__>:
    1230:	2f 92       	push	r2
    1232:	3f 92       	push	r3
    1234:	4f 92       	push	r4
    1236:	5f 92       	push	r5
    1238:	6f 92       	push	r6
    123a:	7f 92       	push	r7
    123c:	8f 92       	push	r8
    123e:	9f 92       	push	r9
    1240:	af 92       	push	r10
    1242:	bf 92       	push	r11
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	ca 1b       	sub	r28, r26
    125a:	db 0b       	sbc	r29, r27
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	09 94       	ijmp

00001268 <__epilogue_restores__>:
    1268:	2a 88       	ldd	r2, Y+18	; 0x12
    126a:	39 88       	ldd	r3, Y+17	; 0x11
    126c:	48 88       	ldd	r4, Y+16	; 0x10
    126e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1270:	6e 84       	ldd	r6, Y+14	; 0x0e
    1272:	7d 84       	ldd	r7, Y+13	; 0x0d
    1274:	8c 84       	ldd	r8, Y+12	; 0x0c
    1276:	9b 84       	ldd	r9, Y+11	; 0x0b
    1278:	aa 84       	ldd	r10, Y+10	; 0x0a
    127a:	b9 84       	ldd	r11, Y+9	; 0x09
    127c:	c8 84       	ldd	r12, Y+8	; 0x08
    127e:	df 80       	ldd	r13, Y+7	; 0x07
    1280:	ee 80       	ldd	r14, Y+6	; 0x06
    1282:	fd 80       	ldd	r15, Y+5	; 0x05
    1284:	0c 81       	ldd	r16, Y+4	; 0x04
    1286:	1b 81       	ldd	r17, Y+3	; 0x03
    1288:	aa 81       	ldd	r26, Y+2	; 0x02
    128a:	b9 81       	ldd	r27, Y+1	; 0x01
    128c:	ce 0f       	add	r28, r30
    128e:	d1 1d       	adc	r29, r1
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	ed 01       	movw	r28, r26
    129c:	08 95       	ret

0000129e <_exit>:
    129e:	f8 94       	cli

000012a0 <__stop_program>:
    12a0:	ff cf       	rjmp	.-2      	; 0x12a0 <__stop_program>
