
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  0000135a  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  008001ce  008001ce  000014bc  2**0
                  ALLOC
  3 .stab         00002490  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019de  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000532a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 3c       	cpi	r26, 0xCE	; 206
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ae ec       	ldi	r26, 0xCE	; 206
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 38       	cpi	r26, 0x81	; 129
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ac 02 	call	0x558	; 0x558 <main>
      9e:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      c8:	80 91 da 01 	lds	r24, 0x01DA
      cc:	88 23       	and	r24, r24
      ce:	c1 f0       	breq	.+48     	; 0x100 <__vector_21+0x5a>
        adc_mux_switch = true;
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
      d0:	10 92 da 01 	sts	0x01DA, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
      d4:	80 91 7a 00 	lds	r24, 0x007A
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 93 7a 00 	sts	0x007A, r24

}
      de:	ff 91       	pop	r31
      e0:	ef 91       	pop	r30
      e2:	bf 91       	pop	r27
      e4:	af 91       	pop	r26
      e6:	9f 91       	pop	r25
      e8:	8f 91       	pop	r24
      ea:	7f 91       	pop	r23
      ec:	6f 91       	pop	r22
      ee:	5f 91       	pop	r21
      f0:	4f 91       	pop	r20
      f2:	3f 91       	pop	r19
      f4:	2f 91       	pop	r18
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
     100:	80 91 db 01 	lds	r24, 0x01DB
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	20 91 78 00 	lds	r18, 0x0078
     10a:	40 91 79 00 	lds	r20, 0x0079
     10e:	fc 01       	movw	r30, r24
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	e2 53       	subi	r30, 0x32	; 50
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	34 2b       	or	r19, r20
     11c:	31 83       	std	Z+1, r19	; 0x01
     11e:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	0e 94 a9 04 	call	0x952	; 0x952 <__divmodhi4>
     12a:	80 93 db 01 	sts	0x01DB, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     12e:	80 91 7c 00 	lds	r24, 0x007C
     132:	80 7f       	andi	r24, 0xF0	; 240
     134:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adc_mux_index;
     138:	80 91 7c 00 	lds	r24, 0x007C
     13c:	90 91 db 01 	lds	r25, 0x01DB
     140:	89 2b       	or	r24, r25
     142:	80 93 7c 00 	sts	0x007C, r24
        adc_mux_switch = true;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 da 01 	sts	0x01DA, r24
     14c:	c3 cf       	rjmp	.-122    	; 0xd4 <__vector_21+0x2e>

0000014e <adc_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     14e:	ec e7       	ldi	r30, 0x7C	; 124
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 71       	andi	r24, 0x10	; 16
     156:	80 83       	st	Z, r24

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     168:	80 81       	ld	r24, Z
     16a:	8f 64       	ori	r24, 0x4F	; 79
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <adc_get>:
/* nothing */
#endif

uint16_t adc_get(e_adc_channel channel)
{
    return adc_samples[channel];
     170:	e8 2f       	mov	r30, r24
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	e2 53       	subi	r30, 0x32	; 50
     17a:	fe 4f       	sbci	r31, 0xFE	; 254
}
     17c:	80 81       	ld	r24, Z
     17e:	91 81       	ldd	r25, Z+1	; 0x01
     180:	08 95       	ret

00000182 <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     182:	08 95       	ret

00000184 <adc_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void adc_last_reset(void)
{
     184:	08 95       	ret

00000186 <encoder_init>:
 */
void encoder_init(void)
{

    /* Logic initialization */
    g_encoder[ENC_HW_0].pin_A = PIN6;
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	80 93 dc 01 	sts	0x01DC, r24
    g_encoder[ENC_HW_0].pin_B = PIN7;
     18c:	87 e0       	ldi	r24, 0x07	; 7
     18e:	80 93 dd 01 	sts	0x01DD, r24
    g_encoder[ENC_HW_0].tick = g_timestamp;
     192:	80 91 77 02 	lds	r24, 0x0277
     196:	90 91 78 02 	lds	r25, 0x0278
     19a:	a0 91 79 02 	lds	r26, 0x0279
     19e:	b0 91 7a 02 	lds	r27, 0x027A
     1a2:	80 93 e1 01 	sts	0x01E1, r24
     1a6:	90 93 e2 01 	sts	0x01E2, r25
     1aa:	a0 93 e3 01 	sts	0x01E3, r26
     1ae:	b0 93 e4 01 	sts	0x01E4, r27

    /* Inputs */
    ENC_DDR &= ~(1<<PIN7);
     1b2:	57 98       	cbi	0x0a, 7	; 10
    ENC_DDR &= ~(1<<PIN6);
     1b4:	56 98       	cbi	0x0a, 6	; 10
    DDRB &= ~(1<<PIN0);
     1b6:	20 98       	cbi	0x04, 0	; 4

    /* Turn on pull-ups (encoder switches to GND) */
    ENC_PORT |= (1<<PIN7) | (1 << PIN6);
     1b8:	8b b1       	in	r24, 0x0b	; 11
     1ba:	80 6c       	ori	r24, 0xC0	; 192
     1bc:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 1<<PIN0;
     1be:	28 9a       	sbi	0x05, 0	; 5

    /* Enable interrupts on the encoder pins */
    PCMSK0 |= (1 << PCINT0 );                  /* click */
     1c0:	eb e6       	ldi	r30, 0x6B	; 107
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	81 60       	ori	r24, 0x01	; 1
     1c8:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT23 ) | (1 << PCINT22); /* wheel */
     1ca:	ed e6       	ldi	r30, 0x6D	; 109
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 6c       	ori	r24, 0xC0	; 192
     1d2:	80 83       	st	Z, r24

    /* Enable Pin Change subsystem (interrupts) */
    PCICR |= (1<< PCIE0);
     1d4:	e8 e6       	ldi	r30, 0x68	; 104
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	80 83       	st	Z, r24
    PCICR |= (1<< PCIE2);
     1de:	80 81       	ld	r24, Z
     1e0:	84 60       	ori	r24, 0x04	; 4
     1e2:	80 83       	st	Z, r24
     1e4:	08 95       	ret

000001e6 <encoder_set_callback>:
/**
 * Set the encoder event callback
 */
void encoder_set_callback(e_enc_hw index, t_enc_cb event_cb)
{
    g_encoder[index].evt_cb = event_cb;
     1e6:	9f e0       	ldi	r25, 0x0F	; 15
     1e8:	89 9f       	mul	r24, r25
     1ea:	f0 01       	movw	r30, r0
     1ec:	11 24       	eor	r1, r1
     1ee:	e4 52       	subi	r30, 0x24	; 36
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	76 87       	std	Z+14, r23	; 0x0e
     1f4:	65 87       	std	Z+13, r22	; 0x0d
     1f6:	08 95       	ret

000001f8 <__vector_3>:
}

ISR(PCINT0_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	2f 93       	push	r18
     204:	3f 93       	push	r19
     206:	4f 93       	push	r20
     208:	5f 93       	push	r21
     20a:	6f 93       	push	r22
     20c:	7f 93       	push	r23
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
     212:	af 93       	push	r26
     214:	bf 93       	push	r27
     216:	ef 93       	push	r30
     218:	ff 93       	push	r31
    printf("CLICK\r\n");
     21a:	8c e1       	ldi	r24, 0x1C	; 28
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <puts>
}
     222:	ff 91       	pop	r31
     224:	ef 91       	pop	r30
     226:	bf 91       	pop	r27
     228:	af 91       	pop	r26
     22a:	9f 91       	pop	r25
     22c:	8f 91       	pop	r24
     22e:	7f 91       	pop	r23
     230:	6f 91       	pop	r22
     232:	5f 91       	pop	r21
     234:	4f 91       	pop	r20
     236:	3f 91       	pop	r19
     238:	2f 91       	pop	r18
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_5>:
 * Best case execution time: 10us
 * Worst case execution time: 20us
 * => both well below the 100us system tick timer
 */
ISR(PCINT2_vect)
{
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	2f 93       	push	r18
     258:	3f 93       	push	r19
     25a:	4f 93       	push	r20
     25c:	5f 93       	push	r21
     25e:	6f 93       	push	r22
     260:	7f 93       	push	r23
     262:	8f 93       	push	r24
     264:	9f 93       	push	r25
     266:	af 93       	push	r26
     268:	bf 93       	push	r27
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31

    uint8_t i = 0;  /* left for a future multiple encoder implementation */

    {
        /* Shift the old values */
        g_encoder[i].pin_raw <<= 2;
     26e:	90 91 de 01 	lds	r25, 0x01DE
     272:	99 0f       	add	r25, r25
     274:	99 0f       	add	r25, r25
     276:	90 93 de 01 	sts	0x01DE, r25
        /* Store the new values */
        g_encoder[i].pin_raw |= ((ENC_PIN >> g_encoder[i].pin_A) & 0x1U) | (((ENC_PIN >> g_encoder[i].pin_B) & 0x1U) << 1U);
     27a:	e9 b1       	in	r30, 0x09	; 9
     27c:	89 b1       	in	r24, 0x09	; 9
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	00 90 dc 01 	lds	r0, 0x01DC
     284:	02 c0       	rjmp	.+4      	; 0x28a <__vector_5+0x46>
     286:	f5 95       	asr	r31
     288:	e7 95       	ror	r30
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <__vector_5+0x42>
     28e:	e1 70       	andi	r30, 0x01	; 1
     290:	e9 2b       	or	r30, r25
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	00 90 dd 01 	lds	r0, 0x01DD
     298:	02 c0       	rjmp	.+4      	; 0x29e <__vector_5+0x5a>
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	0a 94       	dec	r0
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <__vector_5+0x56>
     2a2:	81 70       	andi	r24, 0x01	; 1
     2a4:	88 0f       	add	r24, r24
     2a6:	e8 2b       	or	r30, r24
     2a8:	e0 93 de 01 	sts	0x01DE, r30
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
     2ac:	ef 70       	andi	r30, 0x0F	; 15
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	ed 5d       	subi	r30, 0xDD	; 221
     2b2:	fe 4f       	sbci	r31, 0xFE	; 254
     2b4:	20 81       	ld	r18, Z
     2b6:	80 91 df 01 	lds	r24, 0x01DF
     2ba:	28 0f       	add	r18, r24
     2bc:	20 93 df 01 	sts	0x01DF, r18
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
     2c0:	80 91 77 02 	lds	r24, 0x0277
     2c4:	90 91 78 02 	lds	r25, 0x0278
     2c8:	a0 91 79 02 	lds	r26, 0x0279
     2cc:	b0 91 7a 02 	lds	r27, 0x027A
     2d0:	40 91 e1 01 	lds	r20, 0x01E1
     2d4:	50 91 e2 01 	lds	r21, 0x01E2
     2d8:	60 91 e3 01 	lds	r22, 0x01E3
     2dc:	70 91 e4 01 	lds	r23, 0x01E4
     2e0:	7c 01       	movw	r14, r24
     2e2:	8d 01       	movw	r16, r26
     2e4:	e4 1a       	sub	r14, r20
     2e6:	f5 0a       	sbc	r15, r21
     2e8:	06 0b       	sbc	r16, r22
     2ea:	17 0b       	sbc	r17, r23
     2ec:	b8 01       	movw	r22, r16
     2ee:	a7 01       	movw	r20, r14
     2f0:	41 32       	cpi	r20, 0x21	; 33
     2f2:	01 ea       	ldi	r16, 0xA1	; 161
     2f4:	50 07       	cpc	r21, r16
     2f6:	07 e0       	ldi	r16, 0x07	; 7
     2f8:	60 07       	cpc	r22, r16
     2fa:	71 05       	cpc	r23, r1
     2fc:	b8 f5       	brcc	.+110    	; 0x36c <__vector_5+0x128>
            /* Timeout */
            g_encoder[i].raw = 0;
            g_encoder[i].pin_raw = 0;
            g_encoder[i].tick = g_timestamp;
        }
        else if (g_encoder[i].raw > 2)
     2fe:	23 30       	cpi	r18, 0x03	; 3
     300:	0c f0       	brlt	.+2      	; 0x304 <__vector_5+0xc0>
     302:	41 c0       	rjmp	.+130    	; 0x386 <__vector_5+0x142>
            g_encoder[i].raw = 0;
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
            g_encoder[i].tick = g_timestamp;
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
        }
        else if (g_encoder[i].raw < -2)
     304:	2e 3f       	cpi	r18, 0xFE	; 254
     306:	ec f4       	brge	.+58     	; 0x342 <__vector_5+0xfe>
        {
            g_encoder[i].value--;
     308:	20 91 e0 01 	lds	r18, 0x01E0
     30c:	21 50       	subi	r18, 0x01	; 1
     30e:	20 93 e0 01 	sts	0x01E0, r18
            g_encoder[i].raw = 0;
     312:	10 92 df 01 	sts	0x01DF, r1
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     316:	40 93 e5 01 	sts	0x01E5, r20
     31a:	50 93 e6 01 	sts	0x01E6, r21
     31e:	60 93 e7 01 	sts	0x01E7, r22
     322:	70 93 e8 01 	sts	0x01E8, r23
            g_encoder[i].tick = g_timestamp;
     326:	80 93 e1 01 	sts	0x01E1, r24
     32a:	90 93 e2 01 	sts	0x01E2, r25
     32e:	a0 93 e3 01 	sts	0x01E3, r26
     332:	b0 93 e4 01 	sts	0x01E4, r27
            g_encoder[i].evt_cb(ENC_EVT_LEFT, g_encoder[i].delta_t);
     336:	e0 91 e9 01 	lds	r30, 0x01E9
     33a:	f0 91 ea 01 	lds	r31, 0x01EA
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	09 95       	icall
        }
    }

}
     342:	ff 91       	pop	r31
     344:	ef 91       	pop	r30
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
        {
            /* Timeout */
            g_encoder[i].raw = 0;
     36c:	10 92 df 01 	sts	0x01DF, r1
            g_encoder[i].pin_raw = 0;
     370:	10 92 de 01 	sts	0x01DE, r1
            g_encoder[i].tick = g_timestamp;
     374:	80 93 e1 01 	sts	0x01E1, r24
     378:	90 93 e2 01 	sts	0x01E2, r25
     37c:	a0 93 e3 01 	sts	0x01E3, r26
     380:	b0 93 e4 01 	sts	0x01E4, r27
     384:	de cf       	rjmp	.-68     	; 0x342 <__vector_5+0xfe>
        }
        else if (g_encoder[i].raw > 2)
        {
            g_encoder[i].value++;
     386:	20 91 e0 01 	lds	r18, 0x01E0
     38a:	2f 5f       	subi	r18, 0xFF	; 255
     38c:	20 93 e0 01 	sts	0x01E0, r18
            g_encoder[i].raw = 0;
     390:	10 92 df 01 	sts	0x01DF, r1
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     394:	40 93 e5 01 	sts	0x01E5, r20
     398:	50 93 e6 01 	sts	0x01E6, r21
     39c:	60 93 e7 01 	sts	0x01E7, r22
     3a0:	70 93 e8 01 	sts	0x01E8, r23
            g_encoder[i].tick = g_timestamp;
     3a4:	80 93 e1 01 	sts	0x01E1, r24
     3a8:	90 93 e2 01 	sts	0x01E2, r25
     3ac:	a0 93 e3 01 	sts	0x01E3, r26
     3b0:	b0 93 e4 01 	sts	0x01E4, r27
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
     3b4:	e0 91 e9 01 	lds	r30, 0x01E9
     3b8:	f0 91 ea 01 	lds	r31, 0x01EA
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	09 95       	icall
     3c0:	c0 cf       	rjmp	.-128    	; 0x342 <__vector_5+0xfe>

000003c2 <encoder_event_callback>:
    1, 1, 1, 20, 55, 90, 125, 160, 195, 230, 265, 300, 335, 370, 405, 440, 475,
    510, 545, 580, 615, 650, 685, 720, 755, 790, 825, 860, 895, 930, 965, 1000
};

static void encoder_event_callback(e_enc_event event, uint32_t delta_t)
{
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	a4 e8       	ldi	r26, 0x84	; 132
     3c8:	b1 e0       	ldi	r27, 0x01	; 1
     3ca:	e0 e0       	ldi	r30, 0x00	; 0
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <encoder_event_callback+0x16>
     3d0:	31 96       	adiw	r30, 0x01	; 1
    uint8_t i;
    uint16_t diff;
    for (i = 0; i < SMOOTHING_SIZE; i++)
     3d2:	ef 31       	cpi	r30, 0x1F	; 31
     3d4:	f1 05       	cpc	r31, r1
     3d6:	e9 f0       	breq	.+58     	; 0x412 <encoder_event_callback+0x50>
    {
        if (delta_t >= smoothing_deltat[i])
     3d8:	0d 91       	ld	r16, X+
     3da:	1d 91       	ld	r17, X+
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 17       	cp	r20, r16
     3e2:	51 07       	cpc	r21, r17
     3e4:	62 07       	cpc	r22, r18
     3e6:	73 07       	cpc	r23, r19
     3e8:	98 f3       	brcs	.-26     	; 0x3d0 <encoder_event_callback+0xe>
        {
            diff = smoothing_result[i];
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	ea 5b       	subi	r30, 0xBA	; 186
     3f0:	fe 4f       	sbci	r31, 0xFE	; 254
     3f2:	20 81       	ld	r18, Z
     3f4:	31 81       	ldd	r19, Z+1	; 0x01
            if (event == ENC_EVT_LEFT)
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	79 f0       	breq	.+30     	; 0x418 <encoder_event_callback+0x56>
            {
                psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw -= diff;
            }
            else if (event == ENC_EVT_RIGHT)
     3fa:	81 11       	cpse	r24, r1
     3fc:	0a c0       	rjmp	.+20     	; 0x412 <encoder_event_callback+0x50>
            {
                psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw += diff;
     3fe:	80 91 f5 01 	lds	r24, 0x01F5
     402:	90 91 f6 01 	lds	r25, 0x01F6
     406:	82 0f       	add	r24, r18
     408:	93 1f       	adc	r25, r19
     40a:	90 93 f6 01 	sts	0x01F6, r25
     40e:	80 93 f5 01 	sts	0x01F5, r24
            }
            break;
        }
    }
}
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret
        if (delta_t >= smoothing_deltat[i])
        {
            diff = smoothing_result[i];
            if (event == ENC_EVT_LEFT)
            {
                psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw -= diff;
     418:	80 91 f5 01 	lds	r24, 0x01F5
     41c:	90 91 f6 01 	lds	r25, 0x01F6
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	90 93 f6 01 	sts	0x01F6, r25
     428:	80 93 f5 01 	sts	0x01F5, r24
                psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw += diff;
            }
            break;
        }
    }
}
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	08 95       	ret

00000432 <lib_limit>:

/* GLOBALS */
static t_psu_channel psu_channels[PSU_CHANNEL_NUM];

void lib_limit(t_value *value, t_value_scale *scale)
{
     432:	fc 01       	movw	r30, r24
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     434:	80 81       	ld	r24, Z
     436:	91 81       	ldd	r25, Z+1	; 0x01
     438:	db 01       	movw	r26, r22
     43a:	12 96       	adiw	r26, 0x02	; 2
     43c:	2d 91       	ld	r18, X+
     43e:	3c 91       	ld	r19, X
     440:	13 97       	sbiw	r26, 0x03	; 3
     442:	82 17       	cp	r24, r18
     444:	93 07       	cpc	r25, r19
     446:	10 f4       	brcc	.+4      	; 0x44c <lib_limit+0x1a>
     448:	33 83       	std	Z+3, r19	; 0x03
     44a:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     44c:	db 01       	movw	r26, r22
     44e:	14 96       	adiw	r26, 0x04	; 4
     450:	2d 91       	ld	r18, X+
     452:	3c 91       	ld	r19, X
     454:	15 97       	sbiw	r26, 0x05	; 5
     456:	28 17       	cp	r18, r24
     458:	39 07       	cpc	r19, r25
     45a:	10 f4       	brcc	.+4      	; 0x460 <lib_limit+0x2e>
     45c:	33 83       	std	Z+3, r19	; 0x03
     45e:	22 83       	std	Z+2, r18	; 0x02
     460:	08 95       	ret

00000462 <lib_scale>:
}

void lib_scale(t_value *value, t_value_scale *scale)
{
     462:	2f 92       	push	r2
     464:	3f 92       	push	r3
     466:	4f 92       	push	r4
     468:	5f 92       	push	r5
     46a:	6f 92       	push	r6
     46c:	7f 92       	push	r7
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <lib_scale+0x26>
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	3b 01       	movw	r6, r22
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     492:	fb 01       	movw	r30, r22
     494:	26 80       	ldd	r2, Z+6	; 0x06
     496:	37 80       	ldd	r3, Z+7	; 0x07
     498:	02 81       	ldd	r16, Z+2	; 0x02
     49a:	13 81       	ldd	r17, Z+3	; 0x03

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     49c:	fc 01       	movw	r30, r24
     49e:	60 81       	ld	r22, Z
     4a0:	71 81       	ldd	r23, Z+1	; 0x01
     4a2:	60 1b       	sub	r22, r16
     4a4:	71 0b       	sbc	r23, r17
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 ca 05 	call	0xb94	; 0xb94 <__floatunsisf>
     4ae:	6b 01       	movw	r12, r22
     4b0:	7c 01       	movw	r14, r24
}

void lib_scale(t_value *value, t_value_scale *scale)
{
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     4b2:	f3 01       	movw	r30, r6
     4b4:	60 85       	ldd	r22, Z+8	; 0x08
     4b6:	71 85       	ldd	r23, Z+9	; 0x09
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 ca 05 	call	0xb94	; 0xb94 <__floatunsisf>
     4c0:	4b 01       	movw	r8, r22
     4c2:	5c 01       	movw	r10, r24
     4c4:	b1 01       	movw	r22, r2
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 ca 05 	call	0xb94	; 0xb94 <__floatunsisf>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	c5 01       	movw	r24, r10
     4d4:	b4 01       	movw	r22, r8
     4d6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
     4da:	4b 01       	movw	r8, r22
     4dc:	5c 01       	movw	r10, r24
     4de:	f3 01       	movw	r30, r6
     4e0:	64 81       	ldd	r22, Z+4	; 0x04
     4e2:	75 81       	ldd	r23, Z+5	; 0x05
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 ca 05 	call	0xb94	; 0xb94 <__floatunsisf>
     4ec:	2b 01       	movw	r4, r22
     4ee:	3c 01       	movw	r6, r24
     4f0:	b8 01       	movw	r22, r16
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 ca 05 	call	0xb94	; 0xb94 <__floatunsisf>
     4fa:	9b 01       	movw	r18, r22
     4fc:	ac 01       	movw	r20, r24
     4fe:	c3 01       	movw	r24, r6
     500:	b2 01       	movw	r22, r4
     502:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__subsf3>
     506:	9b 01       	movw	r18, r22
     508:	ac 01       	movw	r20, r24
     50a:	c5 01       	movw	r24, r10
     50c:	b4 01       	movw	r22, r8
     50e:	0e 94 36 05 	call	0xa6c	; 0xa6c <__divsf3>
     512:	9b 01       	movw	r18, r22
     514:	ac 01       	movw	r20, r24

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     516:	c7 01       	movw	r24, r14
     518:	b6 01       	movw	r22, r12
     51a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__mulsf3>
     51e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fixunssfsi>
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     522:	62 0d       	add	r22, r2
     524:	73 1d       	adc	r23, r3
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     526:	e9 81       	ldd	r30, Y+1	; 0x01
     528:	fa 81       	ldd	r31, Y+2	; 0x02
     52a:	73 83       	std	Z+3, r23	; 0x03
     52c:	62 83       	std	Z+2, r22	; 0x02
}
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	7f 90       	pop	r7
     54c:	6f 90       	pop	r6
     54e:	5f 90       	pop	r5
     550:	4f 90       	pop	r4
     552:	3f 90       	pop	r3
     554:	2f 90       	pop	r2
     556:	08 95       	ret

00000558 <main>:

int main(void)
{

    /* System init */
    system_init();
     558:	0e 94 48 04 	call	0x890	; 0x890 <system_init>
}

static void init_io(void)
{

    cli();
     55c:	f8 94       	cli

    /* UART */
    uart_init();
     55e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <uart_init>
    stdout = &uart_output;
     562:	8e e0       	ldi	r24, 0x0E	; 14
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	90 93 7e 02 	sts	0x027E, r25
     56a:	80 93 7d 02 	sts	0x027D, r24
    stdin  = &uart_input;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	90 93 7c 02 	sts	0x027C, r25
     576:	80 93 7b 02 	sts	0x027B, r24

    /* ADC */
    adc_init();
     57a:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>

    /* PWM */
    pwm_init();
     57e:	0e 94 c5 03 	call	0x78a	; 0x78a <pwm_init>

    /* System timer */
    timer_init();
     582:	0e 94 4b 04 	call	0x896	; 0x896 <timer_init>

    /* Encoder */
    encoder_init();
     586:	0e 94 c3 00 	call	0x186	; 0x186 <encoder_init>
    encoder_set_callback(ENC_HW_0, encoder_event_callback);
     58a:	61 ee       	ldi	r22, 0xE1	; 225
     58c:	71 e0       	ldi	r23, 0x01	; 1
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <encoder_set_callback>

    sei();
     594:	78 94       	sei
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->voltage_adc_channel = ADC_0;
     596:	10 92 07 02 	sts	0x0207, r1
            channel->current_adc_channel = ADC_1;
     59a:	dd 24       	eor	r13, r13
     59c:	d3 94       	inc	r13
     59e:	d0 92 25 02 	sts	0x0225, r13
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     5a2:	10 92 08 02 	sts	0x0208, r1
            channel->current_pwm_channel = PWM_CHANNEL_2;
     5a6:	22 e0       	ldi	r18, 0x02	; 2
     5a8:	c2 2e       	mov	r12, r18
     5aa:	c0 92 26 02 	sts	0x0226, r12
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     5ae:	10 92 fc 01 	sts	0x01FC, r1
     5b2:	10 92 fb 01 	sts	0x01FB, r1
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     5b6:	0f ef       	ldi	r16, 0xFF	; 255
     5b8:	13 e0       	ldi	r17, 0x03	; 3
     5ba:	10 93 fe 01 	sts	0x01FE, r17
     5be:	00 93 fd 01 	sts	0x01FD, r16
    channel->voltage_readout.scale.min_scaled = 0;
     5c2:	10 92 00 02 	sts	0x0200, r1
     5c6:	10 92 ff 01 	sts	0x01FF, r1
    channel->voltage_readout.scale.max_scaled = 28500;//25575;  /* Voltage */
     5ca:	c4 e5       	ldi	r28, 0x54	; 84
     5cc:	df e6       	ldi	r29, 0x6F	; 111
     5ce:	d0 93 02 02 	sts	0x0202, r29
     5d2:	c0 93 01 02 	sts	0x0201, r28

    channel->current_readout.scale.min = 0;
     5d6:	10 92 1a 02 	sts	0x021A, r1
     5da:	10 92 19 02 	sts	0x0219, r1
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     5de:	10 93 1c 02 	sts	0x021C, r17
     5e2:	00 93 1b 02 	sts	0x021B, r16
    channel->current_readout.scale.min_scaled = 0;
     5e6:	10 92 1e 02 	sts	0x021E, r1
     5ea:	10 92 1d 02 	sts	0x021D, r1
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     5ee:	e1 2c       	mov	r14, r1
     5f0:	38 e0       	ldi	r19, 0x08	; 8
     5f2:	f3 2e       	mov	r15, r19
     5f4:	f0 92 20 02 	sts	0x0220, r15
     5f8:	e0 92 1f 02 	sts	0x021F, r14

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     5fc:	10 92 ee 01 	sts	0x01EE, r1
     600:	10 92 ed 01 	sts	0x01ED, r1
    channel->voltage_setpoint.scale.max = 28500;
     604:	d0 93 f0 01 	sts	0x01F0, r29
     608:	c0 93 ef 01 	sts	0x01EF, r28
    channel->voltage_setpoint.scale.min_scaled = 0;
     60c:	10 92 f2 01 	sts	0x01F2, r1
     610:	10 92 f1 01 	sts	0x01F1, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 21 04 	call	0x842	; 0x842 <pwm_get_resolution>
     61a:	90 93 f4 01 	sts	0x01F4, r25
     61e:	80 93 f3 01 	sts	0x01F3, r24

    channel->current_setpoint.scale.min = 0;
     622:	10 92 0c 02 	sts	0x020C, r1
     626:	10 92 0b 02 	sts	0x020B, r1
    channel->current_setpoint.scale.max = 28500;
     62a:	d0 93 0e 02 	sts	0x020E, r29
     62e:	c0 93 0d 02 	sts	0x020D, r28
    channel->current_setpoint.scale.min_scaled = 0;
     632:	10 92 10 02 	sts	0x0210, r1
     636:	10 92 0f 02 	sts	0x020F, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     63a:	80 91 26 02 	lds	r24, 0x0226
     63e:	0e 94 21 04 	call	0x842	; 0x842 <pwm_get_resolution>
     642:	90 93 12 02 	sts	0x0212, r25
     646:	80 93 11 02 	sts	0x0211, r24
            channel->current_adc_channel = ADC_1;
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
            channel->current_pwm_channel = PWM_CHANNEL_2;
            break;
        case PSU_CHANNEL_1:
            channel->voltage_adc_channel = ADC_2;
     64a:	c0 92 43 02 	sts	0x0243, r12
            channel->current_adc_channel = ADC_3;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	80 93 61 02 	sts	0x0261, r24
            channel->voltage_pwm_channel = PWM_CHANNEL_1;
     654:	d0 92 44 02 	sts	0x0244, r13
            channel->current_pwm_channel = PWM_CHANNEL_3;
     658:	80 93 62 02 	sts	0x0262, r24
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     65c:	10 92 38 02 	sts	0x0238, r1
     660:	10 92 37 02 	sts	0x0237, r1
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     664:	10 93 3a 02 	sts	0x023A, r17
     668:	00 93 39 02 	sts	0x0239, r16
    channel->voltage_readout.scale.min_scaled = 0;
     66c:	10 92 3c 02 	sts	0x023C, r1
     670:	10 92 3b 02 	sts	0x023B, r1
    channel->voltage_readout.scale.max_scaled = 28500;//25575;  /* Voltage */
     674:	d0 93 3e 02 	sts	0x023E, r29
     678:	c0 93 3d 02 	sts	0x023D, r28

    channel->current_readout.scale.min = 0;
     67c:	10 92 56 02 	sts	0x0256, r1
     680:	10 92 55 02 	sts	0x0255, r1
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     684:	10 93 58 02 	sts	0x0258, r17
     688:	00 93 57 02 	sts	0x0257, r16
    channel->current_readout.scale.min_scaled = 0;
     68c:	10 92 5a 02 	sts	0x025A, r1
     690:	10 92 59 02 	sts	0x0259, r1
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     694:	f0 92 5c 02 	sts	0x025C, r15
     698:	e0 92 5b 02 	sts	0x025B, r14

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     69c:	10 92 2a 02 	sts	0x022A, r1
     6a0:	10 92 29 02 	sts	0x0229, r1
    channel->voltage_setpoint.scale.max = 28500;
     6a4:	d0 93 2c 02 	sts	0x022C, r29
     6a8:	c0 93 2b 02 	sts	0x022B, r28
    channel->voltage_setpoint.scale.min_scaled = 0;
     6ac:	10 92 2e 02 	sts	0x022E, r1
     6b0:	10 92 2d 02 	sts	0x022D, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 21 04 	call	0x842	; 0x842 <pwm_get_resolution>
     6ba:	90 93 30 02 	sts	0x0230, r25
     6be:	80 93 2f 02 	sts	0x022F, r24

    channel->current_setpoint.scale.min = 0;
     6c2:	10 92 48 02 	sts	0x0248, r1
     6c6:	10 92 47 02 	sts	0x0247, r1
    channel->current_setpoint.scale.max = 28500;
     6ca:	d0 93 4a 02 	sts	0x024A, r29
     6ce:	c0 93 49 02 	sts	0x0249, r28
    channel->current_setpoint.scale.min_scaled = 0;
     6d2:	10 92 4c 02 	sts	0x024C, r1
     6d6:	10 92 4b 02 	sts	0x024B, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     6da:	80 91 62 02 	lds	r24, 0x0262
     6de:	0e 94 21 04 	call	0x842	; 0x842 <pwm_get_resolution>
     6e2:	90 93 4e 02 	sts	0x024E, r25
     6e6:	80 93 4d 02 	sts	0x024D, r24
    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/

    printf("Debugging enabled\r\n");
     6ea:	83 e3       	ldi	r24, 0x33	; 51
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <puts>
    DBG_CONFIG;
     6f2:	52 9a       	sbi	0x0a, 2	; 10
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     6f4:	10 e0       	ldi	r17, 0x00	; 0
    {
        adc_processing(&psu_channels[i]);
     6f6:	4c e3       	ldi	r20, 0x3C	; 60
     6f8:	f4 2e       	mov	r15, r20
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     6fa:	12 30       	cpi	r17, 0x02	; 2
     6fc:	20 f1       	brcs	.+72     	; 0x746 <main+0x1ee>
     6fe:	cb ee       	ldi	r28, 0xEB	; 235
     700:	d1 e0       	ldi	r29, 0x01	; 1
     702:	03 e1       	ldi	r16, 0x13	; 19
     704:	12 e0       	ldi	r17, 0x02	; 2

static void pwm_processing(t_psu_channel *channel)
{

    /* Voltage */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     706:	be 01       	movw	r22, r28
     708:	ce 01       	movw	r24, r28
     70a:	0a 96       	adiw	r24, 0x0a	; 10
     70c:	0e 94 31 02 	call	0x462	; 0x462 <lib_scale>
    pwm_set_duty(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     710:	6c 85       	ldd	r22, Y+12	; 0x0c
     712:	7d 85       	ldd	r23, Y+13	; 0x0d
     714:	f8 01       	movw	r30, r16
     716:	3b 97       	sbiw	r30, 0x0b	; 11
     718:	80 81       	ld	r24, Z
     71a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pwm_set_duty>
     71e:	be 01       	movw	r22, r28
     720:	62 5e       	subi	r22, 0xE2	; 226
     722:	7f 4f       	sbci	r23, 0xFF	; 255

    /* Current */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     724:	c8 01       	movw	r24, r16
     726:	0e 94 31 02 	call	0x462	; 0x462 <lib_scale>
    pwm_set_duty(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     72a:	f8 01       	movw	r30, r16
     72c:	62 81       	ldd	r22, Z+2	; 0x02
     72e:	73 81       	ldd	r23, Z+3	; 0x03
     730:	8b ad       	ldd	r24, Y+59	; 0x3b
     732:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pwm_set_duty>
     736:	ec 96       	adiw	r28, 0x3c	; 60
     738:	04 5c       	subi	r16, 0xC4	; 196
     73a:	1f 4f       	sbci	r17, 0xFF	; 255

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     73c:	f2 e0       	ldi	r31, 0x02	; 2
     73e:	c3 36       	cpi	r28, 0x63	; 99
     740:	df 07       	cpc	r29, r31
     742:	09 f7       	brne	.-62     	; 0x706 <main+0x1ae>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     744:	10 e0       	ldi	r17, 0x00	; 0
    {
        adc_processing(&psu_channels[i]);
     746:	f1 9e       	mul	r15, r17
     748:	e0 01       	movw	r28, r0
     74a:	11 24       	eor	r1, r1
     74c:	c5 51       	subi	r28, 0x15	; 21
     74e:	de 4f       	sbci	r29, 0xFE	; 254

static void adc_processing(t_psu_channel *channel)
{

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     750:	8c 8d       	ldd	r24, Y+28	; 0x1c
     752:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     756:	99 8f       	std	Y+25, r25	; 0x19
     758:	88 8f       	std	Y+24, r24	; 0x18
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     75a:	be 01       	movw	r22, r28
     75c:	62 5f       	subi	r22, 0xF2	; 242
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	ce 01       	movw	r24, r28
     762:	48 96       	adiw	r24, 0x18	; 24
     764:	0e 94 31 02 	call	0x462	; 0x462 <lib_scale>

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     768:	8a ad       	ldd	r24, Y+58	; 0x3a
     76a:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     76e:	9f ab       	std	Y+55, r25	; 0x37
     770:	8e ab       	std	Y+54, r24	; 0x36
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     772:	be 01       	movw	r22, r28
     774:	64 5d       	subi	r22, 0xD4	; 212
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	c6 96       	adiw	r24, 0x36	; 54
     77c:	0e 94 31 02 	call	0x462	; 0x462 <lib_scale>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     780:	1f 5f       	subi	r17, 0xFF	; 255
     782:	12 30       	cpi	r17, 0x02	; 2
     784:	08 f0       	brcs	.+2      	; 0x788 <main+0x230>
     786:	bb cf       	rjmp	.-138    	; 0x6fe <main+0x1a6>
     788:	de cf       	rjmp	.-68     	; 0x746 <main+0x1ee>

0000078a <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     78a:	e3 e6       	ldi	r30, 0x63	; 99
     78c:	f2 e0       	ldi	r31, 0x02	; 2

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     78e:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Reset values, just in case */
        pwm_channels[i].duty = 0;
     790:	14 82       	std	Z+4, r1	; 0x04
     792:	13 82       	std	Z+3, r1	; 0x03
        pwm_channels[i].resolution = 0;
     794:	12 82       	std	Z+2, r1	; 0x02
     796:	11 82       	std	Z+1, r1	; 0x01
        pwm_channels[i].channel = i;
     798:	80 83       	st	Z, r24
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	35 96       	adiw	r30, 0x05	; 5
     79e:	84 30       	cpi	r24, 0x04	; 4
     7a0:	b9 f7       	brne	.-18     	; 0x790 <pwm_init+0x6>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1));
     7a2:	82 ea       	ldi	r24, 0xA2	; 162
     7a4:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = ((PWM_MODE << 3) | (1 << WGM13) | (1 << CS10));
     7a8:	89 e1       	ldi	r24, 0x19	; 25
     7aa:	80 93 81 00 	sts	0x0081, r24
    ICR1H = (PWM_FREQ >> 8);
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	80 93 87 00 	sts	0x0087, r24
    ICR1L = (PWM_FREQ & 0xff);
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	80 93 86 00 	sts	0x0086, r24

    pwm_channels[PWM_CHANNEL_0].resolution = PWM_FREQ;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	90 93 65 02 	sts	0x0265, r25
     7c2:	80 93 64 02 	sts	0x0264, r24
    pwm_channels[PWM_CHANNEL_1].resolution = PWM_FREQ;
     7c6:	90 93 6a 02 	sts	0x026A, r25
     7ca:	80 93 69 02 	sts	0x0269, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     7ce:	81 ea       	ldi	r24, 0xA1	; 161
     7d0:	80 93 b0 00 	sts	0x00B0, r24
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 b1 00 	sts	0x00B1, r24

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     7da:	84 b1       	in	r24, 0x04	; 4
     7dc:	8e 60       	ori	r24, 0x0E	; 14
     7de:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIN3);
     7e0:	53 9a       	sbi	0x0a, 3	; 10

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	90 93 6f 02 	sts	0x026F, r25
     7ea:	80 93 6e 02 	sts	0x026E, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     7ee:	90 93 74 02 	sts	0x0274, r25
     7f2:	80 93 73 02 	sts	0x0273, r24
     7f6:	08 95       	ret

000007f8 <pwm_set_duty>:
}

void pwm_set_duty(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;
     7f8:	28 2f       	mov	r18, r24
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	e2 0f       	add	r30, r18
     808:	f3 1f       	adc	r31, r19
     80a:	ed 59       	subi	r30, 0x9D	; 157
     80c:	fd 4f       	sbci	r31, 0xFD	; 253
     80e:	63 83       	std	Z+3, r22	; 0x03
     810:	74 83       	std	Z+4, r23	; 0x04

    switch(pwm_channel)
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	89 f0       	breq	.+34     	; 0x838 <pwm_set_duty+0x40>
     816:	58 f0       	brcs	.+22     	; 0x82e <pwm_set_duty+0x36>
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	19 f0       	breq	.+6      	; 0x822 <pwm_set_duty+0x2a>
     81c:	83 30       	cpi	r24, 0x03	; 3
     81e:	21 f0       	breq	.+8      	; 0x828 <pwm_set_duty+0x30>
     820:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
        OCR1BL = duty;
        break;
    case PWM_CHANNEL_2:
        OCR2A = duty;
     822:	60 93 b3 00 	sts	0x00B3, r22
        break;
     826:	08 95       	ret
    case PWM_CHANNEL_3:
        OCR2B = duty;
     828:	60 93 b4 00 	sts	0x00B4, r22
     82c:	08 95       	ret
    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     82e:	70 93 89 00 	sts	0x0089, r23
        OCR1AL = duty;
     832:	60 93 88 00 	sts	0x0088, r22
        break;
     836:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     838:	70 93 8b 00 	sts	0x008B, r23
        OCR1BL = duty;
     83c:	60 93 8a 00 	sts	0x008A, r22
        break;
     840:	08 95       	ret

00000842 <pwm_get_resolution>:
    }
}

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
    return pwm_channels[channel].resolution;
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	e8 0f       	add	r30, r24
     850:	f9 1f       	adc	r31, r25
     852:	ed 59       	subi	r30, 0x9D	; 157
     854:	fd 4f       	sbci	r31, 0xFD	; 253
}
     856:	81 81       	ldd	r24, Z+1	; 0x01
     858:	92 81       	ldd	r25, Z+2	; 0x02
     85a:	08 95       	ret

0000085c <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
    printf("no ISR!\r\n");
     866:	82 ec       	ldi	r24, 0xC2	; 194
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <puts>
     86e:	ff cf       	rjmp	.-2      	; 0x86e <__vector_default+0x12>

00000870 <system_fatal>:
    for(;;);
}

void system_fatal(char *str)
{
    printf("%s", str);
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	8b ec       	ldi	r24, 0xCB	; 203
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	0e 94 bb 06 	call	0xd76	; 0xd76 <printf>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	ff cf       	rjmp	.-2      	; 0x888 <system_fatal+0x18>

0000088a <system_reset>:

void system_reset(void)
{
    /* start at zero! */
    void (*start)(void) = 0;
    start();
     88a:	e0 e0       	ldi	r30, 0x00	; 0
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	09 94       	ijmp

00000890 <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     890:	84 b7       	in	r24, 0x34	; 52

    /* Reset state for the next proper detection */
    MCUSR = 0;
     892:	14 be       	out	0x34, r1	; 52

    return t;
}
     894:	08 95       	ret

00000896 <timer_init>:
 */
void timer_init(void)
{

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	84 bd       	out	0x24, r24	; 36
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     89a:	85 bd       	out	0x25, r24	; 37

    /* initialize counter */
    OCR0A = 200;
     89c:	88 ec       	ldi	r24, 0xC8	; 200
     89e:	87 bd       	out	0x27, r24	; 39

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     8a0:	ee e6       	ldi	r30, 0x6E	; 110
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	82 60       	ori	r24, 0x02	; 2
     8a8:	80 83       	st	Z, r24
     8aa:	08 95       	ret

000008ac <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
     8be:	80 91 77 02 	lds	r24, 0x0277
     8c2:	90 91 78 02 	lds	r25, 0x0278
     8c6:	a0 91 79 02 	lds	r26, 0x0279
     8ca:	b0 91 7a 02 	lds	r27, 0x027A
     8ce:	8c 59       	subi	r24, 0x9C	; 156
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	af 4f       	sbci	r26, 0xFF	; 255
     8d4:	bf 4f       	sbci	r27, 0xFF	; 255
     8d6:	80 93 77 02 	sts	0x0277, r24
     8da:	90 93 78 02 	sts	0x0278, r25
     8de:	a0 93 79 02 	sts	0x0279, r26
     8e2:	b0 93 7a 02 	sts	0x027A, r27
}
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <uart_init>:
#define    UCSZ0    UCSZ00

void uart_init(void) {

    /* Enable UART power */
    power_usart0_enable();
     8f8:	e4 e6       	ldi	r30, 0x64	; 100
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8d 7f       	andi	r24, 0xFD	; 253
     900:	80 83       	st	Z, r24

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
     902:	e0 ec       	ldi	r30, 0xC0	; 192
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	82 60       	ori	r24, 0x02	; 2
     90a:	80 83       	st	Z, r24
    #else
        UCSRA &= ~(_BV(U2X0));
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     90c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     910:	80 e1       	ldi	r24, 0x10	; 16
     912:	80 93 c4 00 	sts	0x00C4, r24

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	80 93 c2 00 	sts	0x00C2, r24


    // rx/tx enable
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     91c:	88 e1       	ldi	r24, 0x18	; 24
     91e:	80 93 c1 00 	sts	0x00C1, r24
     922:	08 95       	ret

00000924 <uart_putchar>:



}

void uart_putchar(char c, FILE *stream) {
     924:	cf 93       	push	r28
     926:	c8 2f       	mov	r28, r24
    if (c == '\n') {
     928:	8a 30       	cpi	r24, 0x0A	; 10
     92a:	41 f0       	breq	.+16     	; 0x93c <uart_putchar+0x18>
        uart_putchar('\r', stream);
    }
    loop_until_bit_is_set(UCSRA, UDRE);
     92c:	90 91 c0 00 	lds	r25, 0x00C0
     930:	95 ff       	sbrs	r25, 5
     932:	fc cf       	rjmp	.-8      	; 0x92c <uart_putchar+0x8>
    UDR = c;
     934:	c0 93 c6 00 	sts	0x00C6, r28
}
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

}

void uart_putchar(char c, FILE *stream) {
    if (c == '\n') {
        uart_putchar('\r', stream);
     93c:	8d e0       	ldi	r24, 0x0D	; 13
     93e:	0e 94 92 04 	call	0x924	; 0x924 <uart_putchar>
     942:	f4 cf       	rjmp	.-24     	; 0x92c <uart_putchar+0x8>

00000944 <uart_getchar>:
    loop_until_bit_is_set(UCSRA, UDRE);
    UDR = c;
}

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSRA, RXC);
     944:	80 91 c0 00 	lds	r24, 0x00C0
     948:	87 ff       	sbrs	r24, 7
     94a:	fc cf       	rjmp	.-8      	; 0x944 <uart_getchar>
    return UDR;
     94c:	80 91 c6 00 	lds	r24, 0x00C6
}
     950:	08 95       	ret

00000952 <__divmodhi4>:
     952:	97 fb       	bst	r25, 7
     954:	07 2e       	mov	r0, r23
     956:	16 f4       	brtc	.+4      	; 0x95c <__divmodhi4+0xa>
     958:	00 94       	com	r0
     95a:	07 d0       	rcall	.+14     	; 0x96a <__divmodhi4_neg1>
     95c:	77 fd       	sbrc	r23, 7
     95e:	09 d0       	rcall	.+18     	; 0x972 <__divmodhi4_neg2>
     960:	0e 94 bd 04 	call	0x97a	; 0x97a <__udivmodhi4>
     964:	07 fc       	sbrc	r0, 7
     966:	05 d0       	rcall	.+10     	; 0x972 <__divmodhi4_neg2>
     968:	3e f4       	brtc	.+14     	; 0x978 <__divmodhi4_exit>

0000096a <__divmodhi4_neg1>:
     96a:	90 95       	com	r25
     96c:	81 95       	neg	r24
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	08 95       	ret

00000972 <__divmodhi4_neg2>:
     972:	70 95       	com	r23
     974:	61 95       	neg	r22
     976:	7f 4f       	sbci	r23, 0xFF	; 255

00000978 <__divmodhi4_exit>:
     978:	08 95       	ret

0000097a <__udivmodhi4>:
     97a:	aa 1b       	sub	r26, r26
     97c:	bb 1b       	sub	r27, r27
     97e:	51 e1       	ldi	r21, 0x11	; 17
     980:	07 c0       	rjmp	.+14     	; 0x990 <__udivmodhi4_ep>

00000982 <__udivmodhi4_loop>:
     982:	aa 1f       	adc	r26, r26
     984:	bb 1f       	adc	r27, r27
     986:	a6 17       	cp	r26, r22
     988:	b7 07       	cpc	r27, r23
     98a:	10 f0       	brcs	.+4      	; 0x990 <__udivmodhi4_ep>
     98c:	a6 1b       	sub	r26, r22
     98e:	b7 0b       	sbc	r27, r23

00000990 <__udivmodhi4_ep>:
     990:	88 1f       	adc	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	5a 95       	dec	r21
     996:	a9 f7       	brne	.-22     	; 0x982 <__udivmodhi4_loop>
     998:	80 95       	com	r24
     99a:	90 95       	com	r25
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	08 95       	ret

000009a2 <__subsf3>:
     9a2:	50 58       	subi	r21, 0x80	; 128

000009a4 <__addsf3>:
     9a4:	bb 27       	eor	r27, r27
     9a6:	aa 27       	eor	r26, r26
     9a8:	0e d0       	rcall	.+28     	; 0x9c6 <__addsf3x>
     9aa:	48 c1       	rjmp	.+656    	; 0xc3c <__fp_round>
     9ac:	39 d1       	rcall	.+626    	; 0xc20 <__fp_pscA>
     9ae:	30 f0       	brcs	.+12     	; 0x9bc <__addsf3+0x18>
     9b0:	3e d1       	rcall	.+636    	; 0xc2e <__fp_pscB>
     9b2:	20 f0       	brcs	.+8      	; 0x9bc <__addsf3+0x18>
     9b4:	31 f4       	brne	.+12     	; 0x9c2 <__addsf3+0x1e>
     9b6:	9f 3f       	cpi	r25, 0xFF	; 255
     9b8:	11 f4       	brne	.+4      	; 0x9be <__addsf3+0x1a>
     9ba:	1e f4       	brtc	.+6      	; 0x9c2 <__addsf3+0x1e>
     9bc:	2e c1       	rjmp	.+604    	; 0xc1a <__fp_nan>
     9be:	0e f4       	brtc	.+2      	; 0x9c2 <__addsf3+0x1e>
     9c0:	e0 95       	com	r30
     9c2:	e7 fb       	bst	r30, 7
     9c4:	24 c1       	rjmp	.+584    	; 0xc0e <__fp_inf>

000009c6 <__addsf3x>:
     9c6:	e9 2f       	mov	r30, r25
     9c8:	4a d1       	rcall	.+660    	; 0xc5e <__fp_split3>
     9ca:	80 f3       	brcs	.-32     	; 0x9ac <__addsf3+0x8>
     9cc:	ba 17       	cp	r27, r26
     9ce:	62 07       	cpc	r22, r18
     9d0:	73 07       	cpc	r23, r19
     9d2:	84 07       	cpc	r24, r20
     9d4:	95 07       	cpc	r25, r21
     9d6:	18 f0       	brcs	.+6      	; 0x9de <__addsf3x+0x18>
     9d8:	71 f4       	brne	.+28     	; 0x9f6 <__addsf3x+0x30>
     9da:	9e f5       	brtc	.+102    	; 0xa42 <__addsf3x+0x7c>
     9dc:	62 c1       	rjmp	.+708    	; 0xca2 <__fp_zero>
     9de:	0e f4       	brtc	.+2      	; 0x9e2 <__addsf3x+0x1c>
     9e0:	e0 95       	com	r30
     9e2:	0b 2e       	mov	r0, r27
     9e4:	ba 2f       	mov	r27, r26
     9e6:	a0 2d       	mov	r26, r0
     9e8:	0b 01       	movw	r0, r22
     9ea:	b9 01       	movw	r22, r18
     9ec:	90 01       	movw	r18, r0
     9ee:	0c 01       	movw	r0, r24
     9f0:	ca 01       	movw	r24, r20
     9f2:	a0 01       	movw	r20, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	ff 27       	eor	r31, r31
     9f8:	59 1b       	sub	r21, r25
     9fa:	99 f0       	breq	.+38     	; 0xa22 <__addsf3x+0x5c>
     9fc:	59 3f       	cpi	r21, 0xF9	; 249
     9fe:	50 f4       	brcc	.+20     	; 0xa14 <__addsf3x+0x4e>
     a00:	50 3e       	cpi	r21, 0xE0	; 224
     a02:	68 f1       	brcs	.+90     	; 0xa5e <__addsf3x+0x98>
     a04:	1a 16       	cp	r1, r26
     a06:	f0 40       	sbci	r31, 0x00	; 0
     a08:	a2 2f       	mov	r26, r18
     a0a:	23 2f       	mov	r18, r19
     a0c:	34 2f       	mov	r19, r20
     a0e:	44 27       	eor	r20, r20
     a10:	58 5f       	subi	r21, 0xF8	; 248
     a12:	f3 cf       	rjmp	.-26     	; 0x9fa <__addsf3x+0x34>
     a14:	46 95       	lsr	r20
     a16:	37 95       	ror	r19
     a18:	27 95       	ror	r18
     a1a:	a7 95       	ror	r26
     a1c:	f0 40       	sbci	r31, 0x00	; 0
     a1e:	53 95       	inc	r21
     a20:	c9 f7       	brne	.-14     	; 0xa14 <__addsf3x+0x4e>
     a22:	7e f4       	brtc	.+30     	; 0xa42 <__addsf3x+0x7c>
     a24:	1f 16       	cp	r1, r31
     a26:	ba 0b       	sbc	r27, r26
     a28:	62 0b       	sbc	r22, r18
     a2a:	73 0b       	sbc	r23, r19
     a2c:	84 0b       	sbc	r24, r20
     a2e:	ba f0       	brmi	.+46     	; 0xa5e <__addsf3x+0x98>
     a30:	91 50       	subi	r25, 0x01	; 1
     a32:	a1 f0       	breq	.+40     	; 0xa5c <__addsf3x+0x96>
     a34:	ff 0f       	add	r31, r31
     a36:	bb 1f       	adc	r27, r27
     a38:	66 1f       	adc	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	88 1f       	adc	r24, r24
     a3e:	c2 f7       	brpl	.-16     	; 0xa30 <__addsf3x+0x6a>
     a40:	0e c0       	rjmp	.+28     	; 0xa5e <__addsf3x+0x98>
     a42:	ba 0f       	add	r27, r26
     a44:	62 1f       	adc	r22, r18
     a46:	73 1f       	adc	r23, r19
     a48:	84 1f       	adc	r24, r20
     a4a:	48 f4       	brcc	.+18     	; 0xa5e <__addsf3x+0x98>
     a4c:	87 95       	ror	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b7 95       	ror	r27
     a54:	f7 95       	ror	r31
     a56:	9e 3f       	cpi	r25, 0xFE	; 254
     a58:	08 f0       	brcs	.+2      	; 0xa5c <__addsf3x+0x96>
     a5a:	b3 cf       	rjmp	.-154    	; 0x9c2 <__addsf3+0x1e>
     a5c:	93 95       	inc	r25
     a5e:	88 0f       	add	r24, r24
     a60:	08 f0       	brcs	.+2      	; 0xa64 <__addsf3x+0x9e>
     a62:	99 27       	eor	r25, r25
     a64:	ee 0f       	add	r30, r30
     a66:	97 95       	ror	r25
     a68:	87 95       	ror	r24
     a6a:	08 95       	ret

00000a6c <__divsf3>:
     a6c:	0c d0       	rcall	.+24     	; 0xa86 <__divsf3x>
     a6e:	e6 c0       	rjmp	.+460    	; 0xc3c <__fp_round>
     a70:	de d0       	rcall	.+444    	; 0xc2e <__fp_pscB>
     a72:	40 f0       	brcs	.+16     	; 0xa84 <__divsf3+0x18>
     a74:	d5 d0       	rcall	.+426    	; 0xc20 <__fp_pscA>
     a76:	30 f0       	brcs	.+12     	; 0xa84 <__divsf3+0x18>
     a78:	21 f4       	brne	.+8      	; 0xa82 <__divsf3+0x16>
     a7a:	5f 3f       	cpi	r21, 0xFF	; 255
     a7c:	19 f0       	breq	.+6      	; 0xa84 <__divsf3+0x18>
     a7e:	c7 c0       	rjmp	.+398    	; 0xc0e <__fp_inf>
     a80:	51 11       	cpse	r21, r1
     a82:	10 c1       	rjmp	.+544    	; 0xca4 <__fp_szero>
     a84:	ca c0       	rjmp	.+404    	; 0xc1a <__fp_nan>

00000a86 <__divsf3x>:
     a86:	eb d0       	rcall	.+470    	; 0xc5e <__fp_split3>
     a88:	98 f3       	brcs	.-26     	; 0xa70 <__divsf3+0x4>

00000a8a <__divsf3_pse>:
     a8a:	99 23       	and	r25, r25
     a8c:	c9 f3       	breq	.-14     	; 0xa80 <__divsf3+0x14>
     a8e:	55 23       	and	r21, r21
     a90:	b1 f3       	breq	.-20     	; 0xa7e <__divsf3+0x12>
     a92:	95 1b       	sub	r25, r21
     a94:	55 0b       	sbc	r21, r21
     a96:	bb 27       	eor	r27, r27
     a98:	aa 27       	eor	r26, r26
     a9a:	62 17       	cp	r22, r18
     a9c:	73 07       	cpc	r23, r19
     a9e:	84 07       	cpc	r24, r20
     aa0:	38 f0       	brcs	.+14     	; 0xab0 <__divsf3_pse+0x26>
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	5f 4f       	sbci	r21, 0xFF	; 255
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	44 1f       	adc	r20, r20
     aac:	aa 1f       	adc	r26, r26
     aae:	a9 f3       	breq	.-22     	; 0xa9a <__divsf3_pse+0x10>
     ab0:	33 d0       	rcall	.+102    	; 0xb18 <__divsf3_pse+0x8e>
     ab2:	0e 2e       	mov	r0, r30
     ab4:	3a f0       	brmi	.+14     	; 0xac4 <__divsf3_pse+0x3a>
     ab6:	e0 e8       	ldi	r30, 0x80	; 128
     ab8:	30 d0       	rcall	.+96     	; 0xb1a <__divsf3_pse+0x90>
     aba:	91 50       	subi	r25, 0x01	; 1
     abc:	50 40       	sbci	r21, 0x00	; 0
     abe:	e6 95       	lsr	r30
     ac0:	00 1c       	adc	r0, r0
     ac2:	ca f7       	brpl	.-14     	; 0xab6 <__divsf3_pse+0x2c>
     ac4:	29 d0       	rcall	.+82     	; 0xb18 <__divsf3_pse+0x8e>
     ac6:	fe 2f       	mov	r31, r30
     ac8:	27 d0       	rcall	.+78     	; 0xb18 <__divsf3_pse+0x8e>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	88 1f       	adc	r24, r24
     ad0:	bb 1f       	adc	r27, r27
     ad2:	26 17       	cp	r18, r22
     ad4:	37 07       	cpc	r19, r23
     ad6:	48 07       	cpc	r20, r24
     ad8:	ab 07       	cpc	r26, r27
     ada:	b0 e8       	ldi	r27, 0x80	; 128
     adc:	09 f0       	breq	.+2      	; 0xae0 <__divsf3_pse+0x56>
     ade:	bb 0b       	sbc	r27, r27
     ae0:	80 2d       	mov	r24, r0
     ae2:	bf 01       	movw	r22, r30
     ae4:	ff 27       	eor	r31, r31
     ae6:	93 58       	subi	r25, 0x83	; 131
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	2a f0       	brmi	.+10     	; 0xaf6 <__divsf3_pse+0x6c>
     aec:	9e 3f       	cpi	r25, 0xFE	; 254
     aee:	51 05       	cpc	r21, r1
     af0:	68 f0       	brcs	.+26     	; 0xb0c <__divsf3_pse+0x82>
     af2:	8d c0       	rjmp	.+282    	; 0xc0e <__fp_inf>
     af4:	d7 c0       	rjmp	.+430    	; 0xca4 <__fp_szero>
     af6:	5f 3f       	cpi	r21, 0xFF	; 255
     af8:	ec f3       	brlt	.-6      	; 0xaf4 <__divsf3_pse+0x6a>
     afa:	98 3e       	cpi	r25, 0xE8	; 232
     afc:	dc f3       	brlt	.-10     	; 0xaf4 <__divsf3_pse+0x6a>
     afe:	86 95       	lsr	r24
     b00:	77 95       	ror	r23
     b02:	67 95       	ror	r22
     b04:	b7 95       	ror	r27
     b06:	f7 95       	ror	r31
     b08:	9f 5f       	subi	r25, 0xFF	; 255
     b0a:	c9 f7       	brne	.-14     	; 0xafe <__divsf3_pse+0x74>
     b0c:	88 0f       	add	r24, r24
     b0e:	91 1d       	adc	r25, r1
     b10:	96 95       	lsr	r25
     b12:	87 95       	ror	r24
     b14:	97 f9       	bld	r25, 7
     b16:	08 95       	ret
     b18:	e1 e0       	ldi	r30, 0x01	; 1
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	bb 1f       	adc	r27, r27
     b22:	62 17       	cp	r22, r18
     b24:	73 07       	cpc	r23, r19
     b26:	84 07       	cpc	r24, r20
     b28:	ba 07       	cpc	r27, r26
     b2a:	20 f0       	brcs	.+8      	; 0xb34 <__divsf3_pse+0xaa>
     b2c:	62 1b       	sub	r22, r18
     b2e:	73 0b       	sbc	r23, r19
     b30:	84 0b       	sbc	r24, r20
     b32:	ba 0b       	sbc	r27, r26
     b34:	ee 1f       	adc	r30, r30
     b36:	88 f7       	brcc	.-30     	; 0xb1a <__divsf3_pse+0x90>
     b38:	e0 95       	com	r30
     b3a:	08 95       	ret

00000b3c <__fixunssfsi>:
     b3c:	98 d0       	rcall	.+304    	; 0xc6e <__fp_splitA>
     b3e:	88 f0       	brcs	.+34     	; 0xb62 <__fixunssfsi+0x26>
     b40:	9f 57       	subi	r25, 0x7F	; 127
     b42:	90 f0       	brcs	.+36     	; 0xb68 <__fixunssfsi+0x2c>
     b44:	b9 2f       	mov	r27, r25
     b46:	99 27       	eor	r25, r25
     b48:	b7 51       	subi	r27, 0x17	; 23
     b4a:	a0 f0       	brcs	.+40     	; 0xb74 <__fixunssfsi+0x38>
     b4c:	d1 f0       	breq	.+52     	; 0xb82 <__fixunssfsi+0x46>
     b4e:	66 0f       	add	r22, r22
     b50:	77 1f       	adc	r23, r23
     b52:	88 1f       	adc	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	1a f0       	brmi	.+6      	; 0xb5e <__fixunssfsi+0x22>
     b58:	ba 95       	dec	r27
     b5a:	c9 f7       	brne	.-14     	; 0xb4e <__fixunssfsi+0x12>
     b5c:	12 c0       	rjmp	.+36     	; 0xb82 <__fixunssfsi+0x46>
     b5e:	b1 30       	cpi	r27, 0x01	; 1
     b60:	81 f0       	breq	.+32     	; 0xb82 <__fixunssfsi+0x46>
     b62:	9f d0       	rcall	.+318    	; 0xca2 <__fp_zero>
     b64:	b1 e0       	ldi	r27, 0x01	; 1
     b66:	08 95       	ret
     b68:	9c c0       	rjmp	.+312    	; 0xca2 <__fp_zero>
     b6a:	67 2f       	mov	r22, r23
     b6c:	78 2f       	mov	r23, r24
     b6e:	88 27       	eor	r24, r24
     b70:	b8 5f       	subi	r27, 0xF8	; 248
     b72:	39 f0       	breq	.+14     	; 0xb82 <__fixunssfsi+0x46>
     b74:	b9 3f       	cpi	r27, 0xF9	; 249
     b76:	cc f3       	brlt	.-14     	; 0xb6a <__fixunssfsi+0x2e>
     b78:	86 95       	lsr	r24
     b7a:	77 95       	ror	r23
     b7c:	67 95       	ror	r22
     b7e:	b3 95       	inc	r27
     b80:	d9 f7       	brne	.-10     	; 0xb78 <__fixunssfsi+0x3c>
     b82:	3e f4       	brtc	.+14     	; 0xb92 <__fixunssfsi+0x56>
     b84:	90 95       	com	r25
     b86:	80 95       	com	r24
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	8f 4f       	sbci	r24, 0xFF	; 255
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	08 95       	ret

00000b94 <__floatunsisf>:
     b94:	e8 94       	clt
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <__floatsisf+0x12>

00000b98 <__floatsisf>:
     b98:	97 fb       	bst	r25, 7
     b9a:	3e f4       	brtc	.+14     	; 0xbaa <__floatsisf+0x12>
     b9c:	90 95       	com	r25
     b9e:	80 95       	com	r24
     ba0:	70 95       	com	r23
     ba2:	61 95       	neg	r22
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	8f 4f       	sbci	r24, 0xFF	; 255
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	99 23       	and	r25, r25
     bac:	a9 f0       	breq	.+42     	; 0xbd8 <__floatsisf+0x40>
     bae:	f9 2f       	mov	r31, r25
     bb0:	96 e9       	ldi	r25, 0x96	; 150
     bb2:	bb 27       	eor	r27, r27
     bb4:	93 95       	inc	r25
     bb6:	f6 95       	lsr	r31
     bb8:	87 95       	ror	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b7 95       	ror	r27
     bc0:	f1 11       	cpse	r31, r1
     bc2:	f8 cf       	rjmp	.-16     	; 0xbb4 <__floatsisf+0x1c>
     bc4:	fa f4       	brpl	.+62     	; 0xc04 <__floatsisf+0x6c>
     bc6:	bb 0f       	add	r27, r27
     bc8:	11 f4       	brne	.+4      	; 0xbce <__floatsisf+0x36>
     bca:	60 ff       	sbrs	r22, 0
     bcc:	1b c0       	rjmp	.+54     	; 0xc04 <__floatsisf+0x6c>
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	8f 4f       	sbci	r24, 0xFF	; 255
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	16 c0       	rjmp	.+44     	; 0xc04 <__floatsisf+0x6c>
     bd8:	88 23       	and	r24, r24
     bda:	11 f0       	breq	.+4      	; 0xbe0 <__floatsisf+0x48>
     bdc:	96 e9       	ldi	r25, 0x96	; 150
     bde:	11 c0       	rjmp	.+34     	; 0xc02 <__floatsisf+0x6a>
     be0:	77 23       	and	r23, r23
     be2:	21 f0       	breq	.+8      	; 0xbec <__floatsisf+0x54>
     be4:	9e e8       	ldi	r25, 0x8E	; 142
     be6:	87 2f       	mov	r24, r23
     be8:	76 2f       	mov	r23, r22
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <__floatsisf+0x5e>
     bec:	66 23       	and	r22, r22
     bee:	71 f0       	breq	.+28     	; 0xc0c <__floatsisf+0x74>
     bf0:	96 e8       	ldi	r25, 0x86	; 134
     bf2:	86 2f       	mov	r24, r22
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	2a f0       	brmi	.+10     	; 0xc04 <__floatsisf+0x6c>
     bfa:	9a 95       	dec	r25
     bfc:	66 0f       	add	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	da f7       	brpl	.-10     	; 0xbfa <__floatsisf+0x62>
     c04:	88 0f       	add	r24, r24
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	97 f9       	bld	r25, 7
     c0c:	08 95       	ret

00000c0e <__fp_inf>:
     c0e:	97 f9       	bld	r25, 7
     c10:	9f 67       	ori	r25, 0x7F	; 127
     c12:	80 e8       	ldi	r24, 0x80	; 128
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	08 95       	ret

00000c1a <__fp_nan>:
     c1a:	9f ef       	ldi	r25, 0xFF	; 255
     c1c:	80 ec       	ldi	r24, 0xC0	; 192
     c1e:	08 95       	ret

00000c20 <__fp_pscA>:
     c20:	00 24       	eor	r0, r0
     c22:	0a 94       	dec	r0
     c24:	16 16       	cp	r1, r22
     c26:	17 06       	cpc	r1, r23
     c28:	18 06       	cpc	r1, r24
     c2a:	09 06       	cpc	r0, r25
     c2c:	08 95       	ret

00000c2e <__fp_pscB>:
     c2e:	00 24       	eor	r0, r0
     c30:	0a 94       	dec	r0
     c32:	12 16       	cp	r1, r18
     c34:	13 06       	cpc	r1, r19
     c36:	14 06       	cpc	r1, r20
     c38:	05 06       	cpc	r0, r21
     c3a:	08 95       	ret

00000c3c <__fp_round>:
     c3c:	09 2e       	mov	r0, r25
     c3e:	03 94       	inc	r0
     c40:	00 0c       	add	r0, r0
     c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0xc>
     c44:	88 23       	and	r24, r24
     c46:	52 f0       	brmi	.+20     	; 0xc5c <__fp_round+0x20>
     c48:	bb 0f       	add	r27, r27
     c4a:	40 f4       	brcc	.+16     	; 0xc5c <__fp_round+0x20>
     c4c:	bf 2b       	or	r27, r31
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__fp_round+0x18>
     c50:	60 ff       	sbrs	r22, 0
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <__fp_round+0x20>
     c54:	6f 5f       	subi	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	8f 4f       	sbci	r24, 0xFF	; 255
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	08 95       	ret

00000c5e <__fp_split3>:
     c5e:	57 fd       	sbrc	r21, 7
     c60:	90 58       	subi	r25, 0x80	; 128
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	59 f0       	breq	.+22     	; 0xc7e <__fp_splitA+0x10>
     c68:	5f 3f       	cpi	r21, 0xFF	; 255
     c6a:	71 f0       	breq	.+28     	; 0xc88 <__fp_splitA+0x1a>
     c6c:	47 95       	ror	r20

00000c6e <__fp_splitA>:
     c6e:	88 0f       	add	r24, r24
     c70:	97 fb       	bst	r25, 7
     c72:	99 1f       	adc	r25, r25
     c74:	61 f0       	breq	.+24     	; 0xc8e <__fp_splitA+0x20>
     c76:	9f 3f       	cpi	r25, 0xFF	; 255
     c78:	79 f0       	breq	.+30     	; 0xc98 <__fp_splitA+0x2a>
     c7a:	87 95       	ror	r24
     c7c:	08 95       	ret
     c7e:	12 16       	cp	r1, r18
     c80:	13 06       	cpc	r1, r19
     c82:	14 06       	cpc	r1, r20
     c84:	55 1f       	adc	r21, r21
     c86:	f2 cf       	rjmp	.-28     	; 0xc6c <__fp_split3+0xe>
     c88:	46 95       	lsr	r20
     c8a:	f1 df       	rcall	.-30     	; 0xc6e <__fp_splitA>
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <__fp_splitA+0x30>
     c8e:	16 16       	cp	r1, r22
     c90:	17 06       	cpc	r1, r23
     c92:	18 06       	cpc	r1, r24
     c94:	99 1f       	adc	r25, r25
     c96:	f1 cf       	rjmp	.-30     	; 0xc7a <__fp_splitA+0xc>
     c98:	86 95       	lsr	r24
     c9a:	71 05       	cpc	r23, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	08 94       	sec
     ca0:	08 95       	ret

00000ca2 <__fp_zero>:
     ca2:	e8 94       	clt

00000ca4 <__fp_szero>:
     ca4:	bb 27       	eor	r27, r27
     ca6:	66 27       	eor	r22, r22
     ca8:	77 27       	eor	r23, r23
     caa:	cb 01       	movw	r24, r22
     cac:	97 f9       	bld	r25, 7
     cae:	08 95       	ret

00000cb0 <__mulsf3>:
     cb0:	0b d0       	rcall	.+22     	; 0xcc8 <__mulsf3x>
     cb2:	c4 cf       	rjmp	.-120    	; 0xc3c <__fp_round>
     cb4:	b5 df       	rcall	.-150    	; 0xc20 <__fp_pscA>
     cb6:	28 f0       	brcs	.+10     	; 0xcc2 <__mulsf3+0x12>
     cb8:	ba df       	rcall	.-140    	; 0xc2e <__fp_pscB>
     cba:	18 f0       	brcs	.+6      	; 0xcc2 <__mulsf3+0x12>
     cbc:	95 23       	and	r25, r21
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__mulsf3+0x12>
     cc0:	a6 cf       	rjmp	.-180    	; 0xc0e <__fp_inf>
     cc2:	ab cf       	rjmp	.-170    	; 0xc1a <__fp_nan>
     cc4:	11 24       	eor	r1, r1
     cc6:	ee cf       	rjmp	.-36     	; 0xca4 <__fp_szero>

00000cc8 <__mulsf3x>:
     cc8:	ca df       	rcall	.-108    	; 0xc5e <__fp_split3>
     cca:	a0 f3       	brcs	.-24     	; 0xcb4 <__mulsf3+0x4>

00000ccc <__mulsf3_pse>:
     ccc:	95 9f       	mul	r25, r21
     cce:	d1 f3       	breq	.-12     	; 0xcc4 <__mulsf3+0x14>
     cd0:	95 0f       	add	r25, r21
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	55 1f       	adc	r21, r21
     cd6:	62 9f       	mul	r22, r18
     cd8:	f0 01       	movw	r30, r0
     cda:	72 9f       	mul	r23, r18
     cdc:	bb 27       	eor	r27, r27
     cde:	f0 0d       	add	r31, r0
     ce0:	b1 1d       	adc	r27, r1
     ce2:	63 9f       	mul	r22, r19
     ce4:	aa 27       	eor	r26, r26
     ce6:	f0 0d       	add	r31, r0
     ce8:	b1 1d       	adc	r27, r1
     cea:	aa 1f       	adc	r26, r26
     cec:	64 9f       	mul	r22, r20
     cee:	66 27       	eor	r22, r22
     cf0:	b0 0d       	add	r27, r0
     cf2:	a1 1d       	adc	r26, r1
     cf4:	66 1f       	adc	r22, r22
     cf6:	82 9f       	mul	r24, r18
     cf8:	22 27       	eor	r18, r18
     cfa:	b0 0d       	add	r27, r0
     cfc:	a1 1d       	adc	r26, r1
     cfe:	62 1f       	adc	r22, r18
     d00:	73 9f       	mul	r23, r19
     d02:	b0 0d       	add	r27, r0
     d04:	a1 1d       	adc	r26, r1
     d06:	62 1f       	adc	r22, r18
     d08:	83 9f       	mul	r24, r19
     d0a:	a0 0d       	add	r26, r0
     d0c:	61 1d       	adc	r22, r1
     d0e:	22 1f       	adc	r18, r18
     d10:	74 9f       	mul	r23, r20
     d12:	33 27       	eor	r19, r19
     d14:	a0 0d       	add	r26, r0
     d16:	61 1d       	adc	r22, r1
     d18:	23 1f       	adc	r18, r19
     d1a:	84 9f       	mul	r24, r20
     d1c:	60 0d       	add	r22, r0
     d1e:	21 1d       	adc	r18, r1
     d20:	82 2f       	mov	r24, r18
     d22:	76 2f       	mov	r23, r22
     d24:	6a 2f       	mov	r22, r26
     d26:	11 24       	eor	r1, r1
     d28:	9f 57       	subi	r25, 0x7F	; 127
     d2a:	50 40       	sbci	r21, 0x00	; 0
     d2c:	8a f0       	brmi	.+34     	; 0xd50 <__mulsf3_pse+0x84>
     d2e:	e1 f0       	breq	.+56     	; 0xd68 <__mulsf3_pse+0x9c>
     d30:	88 23       	and	r24, r24
     d32:	4a f0       	brmi	.+18     	; 0xd46 <__mulsf3_pse+0x7a>
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	bb 1f       	adc	r27, r27
     d3a:	66 1f       	adc	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	50 40       	sbci	r21, 0x00	; 0
     d44:	a9 f7       	brne	.-22     	; 0xd30 <__mulsf3_pse+0x64>
     d46:	9e 3f       	cpi	r25, 0xFE	; 254
     d48:	51 05       	cpc	r21, r1
     d4a:	70 f0       	brcs	.+28     	; 0xd68 <__mulsf3_pse+0x9c>
     d4c:	60 cf       	rjmp	.-320    	; 0xc0e <__fp_inf>
     d4e:	aa cf       	rjmp	.-172    	; 0xca4 <__fp_szero>
     d50:	5f 3f       	cpi	r21, 0xFF	; 255
     d52:	ec f3       	brlt	.-6      	; 0xd4e <__mulsf3_pse+0x82>
     d54:	98 3e       	cpi	r25, 0xE8	; 232
     d56:	dc f3       	brlt	.-10     	; 0xd4e <__mulsf3_pse+0x82>
     d58:	86 95       	lsr	r24
     d5a:	77 95       	ror	r23
     d5c:	67 95       	ror	r22
     d5e:	b7 95       	ror	r27
     d60:	f7 95       	ror	r31
     d62:	e7 95       	ror	r30
     d64:	9f 5f       	subi	r25, 0xFF	; 255
     d66:	c1 f7       	brne	.-16     	; 0xd58 <__mulsf3_pse+0x8c>
     d68:	fe 2b       	or	r31, r30
     d6a:	88 0f       	add	r24, r24
     d6c:	91 1d       	adc	r25, r1
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	97 f9       	bld	r25, 7
     d74:	08 95       	ret

00000d76 <printf>:
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 ec       	ldi	r30, 0xC1	; 193
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__prologue_saves__+0x20>
     d82:	fe 01       	movw	r30, r28
     d84:	35 96       	adiw	r30, 0x05	; 5
     d86:	61 91       	ld	r22, Z+
     d88:	71 91       	ld	r23, Z+
     d8a:	af 01       	movw	r20, r30
     d8c:	80 91 7d 02 	lds	r24, 0x027D
     d90:	90 91 7e 02 	lds	r25, 0x027E
     d94:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <vfprintf>
     d98:	e2 e0       	ldi	r30, 0x02	; 2
     d9a:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__epilogue_restores__+0x20>

00000d9e <puts>:
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	e0 91 7d 02 	lds	r30, 0x027D
     daa:	f0 91 7e 02 	lds	r31, 0x027E
     dae:	23 81       	ldd	r18, Z+3	; 0x03
     db0:	21 ff       	sbrs	r18, 1
     db2:	1b c0       	rjmp	.+54     	; 0xdea <puts+0x4c>
     db4:	ec 01       	movw	r28, r24
     db6:	00 e0       	ldi	r16, 0x00	; 0
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	89 91       	ld	r24, Y+
     dbc:	60 91 7d 02 	lds	r22, 0x027D
     dc0:	70 91 7e 02 	lds	r23, 0x027E
     dc4:	db 01       	movw	r26, r22
     dc6:	18 96       	adiw	r26, 0x08	; 8
     dc8:	ed 91       	ld	r30, X+
     dca:	fc 91       	ld	r31, X
     dcc:	19 97       	sbiw	r26, 0x09	; 9
     dce:	88 23       	and	r24, r24
     dd0:	31 f0       	breq	.+12     	; 0xdde <puts+0x40>
     dd2:	09 95       	icall
     dd4:	89 2b       	or	r24, r25
     dd6:	89 f3       	breq	.-30     	; 0xdba <puts+0x1c>
     dd8:	0f ef       	ldi	r16, 0xFF	; 255
     dda:	1f ef       	ldi	r17, 0xFF	; 255
     ddc:	ee cf       	rjmp	.-36     	; 0xdba <puts+0x1c>
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	09 95       	icall
     de2:	89 2b       	or	r24, r25
     de4:	11 f4       	brne	.+4      	; 0xdea <puts+0x4c>
     de6:	c8 01       	movw	r24, r16
     de8:	02 c0       	rjmp	.+4      	; 0xdee <puts+0x50>
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <vfprintf>:
     df8:	ac e0       	ldi	r26, 0x0C	; 12
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e2 e0       	ldi	r30, 0x02	; 2
     dfe:	f7 e0       	ldi	r31, 0x07	; 7
     e00:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__prologue_saves__>
     e04:	7c 01       	movw	r14, r24
     e06:	6b 01       	movw	r12, r22
     e08:	8a 01       	movw	r16, r20
     e0a:	fc 01       	movw	r30, r24
     e0c:	17 82       	std	Z+7, r1	; 0x07
     e0e:	16 82       	std	Z+6, r1	; 0x06
     e10:	83 81       	ldd	r24, Z+3	; 0x03
     e12:	81 ff       	sbrs	r24, 1
     e14:	bd c1       	rjmp	.+890    	; 0x1190 <vfprintf+0x398>
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	4c 01       	movw	r8, r24
     e1c:	f7 01       	movw	r30, r14
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	f6 01       	movw	r30, r12
     e22:	93 fd       	sbrc	r25, 3
     e24:	85 91       	lpm	r24, Z+
     e26:	93 ff       	sbrs	r25, 3
     e28:	81 91       	ld	r24, Z+
     e2a:	6f 01       	movw	r12, r30
     e2c:	88 23       	and	r24, r24
     e2e:	09 f4       	brne	.+2      	; 0xe32 <vfprintf+0x3a>
     e30:	ab c1       	rjmp	.+854    	; 0x1188 <vfprintf+0x390>
     e32:	85 32       	cpi	r24, 0x25	; 37
     e34:	39 f4       	brne	.+14     	; 0xe44 <vfprintf+0x4c>
     e36:	93 fd       	sbrc	r25, 3
     e38:	85 91       	lpm	r24, Z+
     e3a:	93 ff       	sbrs	r25, 3
     e3c:	81 91       	ld	r24, Z+
     e3e:	6f 01       	movw	r12, r30
     e40:	85 32       	cpi	r24, 0x25	; 37
     e42:	29 f4       	brne	.+10     	; 0xe4e <vfprintf+0x56>
     e44:	b7 01       	movw	r22, r14
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
     e4c:	e7 cf       	rjmp	.-50     	; 0xe1c <vfprintf+0x24>
     e4e:	51 2c       	mov	r5, r1
     e50:	31 2c       	mov	r3, r1
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	20 32       	cpi	r18, 0x20	; 32
     e56:	a0 f4       	brcc	.+40     	; 0xe80 <vfprintf+0x88>
     e58:	8b 32       	cpi	r24, 0x2B	; 43
     e5a:	69 f0       	breq	.+26     	; 0xe76 <vfprintf+0x7e>
     e5c:	30 f4       	brcc	.+12     	; 0xe6a <vfprintf+0x72>
     e5e:	80 32       	cpi	r24, 0x20	; 32
     e60:	59 f0       	breq	.+22     	; 0xe78 <vfprintf+0x80>
     e62:	83 32       	cpi	r24, 0x23	; 35
     e64:	69 f4       	brne	.+26     	; 0xe80 <vfprintf+0x88>
     e66:	20 61       	ori	r18, 0x10	; 16
     e68:	2c c0       	rjmp	.+88     	; 0xec2 <vfprintf+0xca>
     e6a:	8d 32       	cpi	r24, 0x2D	; 45
     e6c:	39 f0       	breq	.+14     	; 0xe7c <vfprintf+0x84>
     e6e:	80 33       	cpi	r24, 0x30	; 48
     e70:	39 f4       	brne	.+14     	; 0xe80 <vfprintf+0x88>
     e72:	21 60       	ori	r18, 0x01	; 1
     e74:	26 c0       	rjmp	.+76     	; 0xec2 <vfprintf+0xca>
     e76:	22 60       	ori	r18, 0x02	; 2
     e78:	24 60       	ori	r18, 0x04	; 4
     e7a:	23 c0       	rjmp	.+70     	; 0xec2 <vfprintf+0xca>
     e7c:	28 60       	ori	r18, 0x08	; 8
     e7e:	21 c0       	rjmp	.+66     	; 0xec2 <vfprintf+0xca>
     e80:	27 fd       	sbrc	r18, 7
     e82:	27 c0       	rjmp	.+78     	; 0xed2 <vfprintf+0xda>
     e84:	30 ed       	ldi	r19, 0xD0	; 208
     e86:	38 0f       	add	r19, r24
     e88:	3a 30       	cpi	r19, 0x0A	; 10
     e8a:	78 f4       	brcc	.+30     	; 0xeaa <vfprintf+0xb2>
     e8c:	26 ff       	sbrs	r18, 6
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <vfprintf+0xa4>
     e90:	fa e0       	ldi	r31, 0x0A	; 10
     e92:	5f 9e       	mul	r5, r31
     e94:	30 0d       	add	r19, r0
     e96:	11 24       	eor	r1, r1
     e98:	53 2e       	mov	r5, r19
     e9a:	13 c0       	rjmp	.+38     	; 0xec2 <vfprintf+0xca>
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	38 9e       	mul	r3, r24
     ea0:	30 0d       	add	r19, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	33 2e       	mov	r3, r19
     ea6:	20 62       	ori	r18, 0x20	; 32
     ea8:	0c c0       	rjmp	.+24     	; 0xec2 <vfprintf+0xca>
     eaa:	8e 32       	cpi	r24, 0x2E	; 46
     eac:	21 f4       	brne	.+8      	; 0xeb6 <vfprintf+0xbe>
     eae:	26 fd       	sbrc	r18, 6
     eb0:	6b c1       	rjmp	.+726    	; 0x1188 <vfprintf+0x390>
     eb2:	20 64       	ori	r18, 0x40	; 64
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0xca>
     eb6:	8c 36       	cpi	r24, 0x6C	; 108
     eb8:	11 f4       	brne	.+4      	; 0xebe <vfprintf+0xc6>
     eba:	20 68       	ori	r18, 0x80	; 128
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <vfprintf+0xca>
     ebe:	88 36       	cpi	r24, 0x68	; 104
     ec0:	41 f4       	brne	.+16     	; 0xed2 <vfprintf+0xda>
     ec2:	f6 01       	movw	r30, r12
     ec4:	93 fd       	sbrc	r25, 3
     ec6:	85 91       	lpm	r24, Z+
     ec8:	93 ff       	sbrs	r25, 3
     eca:	81 91       	ld	r24, Z+
     ecc:	6f 01       	movw	r12, r30
     ece:	81 11       	cpse	r24, r1
     ed0:	c1 cf       	rjmp	.-126    	; 0xe54 <vfprintf+0x5c>
     ed2:	98 2f       	mov	r25, r24
     ed4:	9f 7d       	andi	r25, 0xDF	; 223
     ed6:	95 54       	subi	r25, 0x45	; 69
     ed8:	93 30       	cpi	r25, 0x03	; 3
     eda:	28 f4       	brcc	.+10     	; 0xee6 <vfprintf+0xee>
     edc:	0c 5f       	subi	r16, 0xFC	; 252
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	ff e3       	ldi	r31, 0x3F	; 63
     ee2:	f9 83       	std	Y+1, r31	; 0x01
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <vfprintf+0x108>
     ee6:	83 36       	cpi	r24, 0x63	; 99
     ee8:	31 f0       	breq	.+12     	; 0xef6 <vfprintf+0xfe>
     eea:	83 37       	cpi	r24, 0x73	; 115
     eec:	71 f0       	breq	.+28     	; 0xf0a <vfprintf+0x112>
     eee:	83 35       	cpi	r24, 0x53	; 83
     ef0:	09 f0       	breq	.+2      	; 0xef4 <vfprintf+0xfc>
     ef2:	5b c0       	rjmp	.+182    	; 0xfaa <vfprintf+0x1b2>
     ef4:	22 c0       	rjmp	.+68     	; 0xf3a <vfprintf+0x142>
     ef6:	f8 01       	movw	r30, r16
     ef8:	80 81       	ld	r24, Z
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	0e 5f       	subi	r16, 0xFE	; 254
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	44 24       	eor	r4, r4
     f02:	43 94       	inc	r4
     f04:	51 2c       	mov	r5, r1
     f06:	54 01       	movw	r10, r8
     f08:	15 c0       	rjmp	.+42     	; 0xf34 <vfprintf+0x13c>
     f0a:	38 01       	movw	r6, r16
     f0c:	f2 e0       	ldi	r31, 0x02	; 2
     f0e:	6f 0e       	add	r6, r31
     f10:	71 1c       	adc	r7, r1
     f12:	f8 01       	movw	r30, r16
     f14:	a0 80       	ld	r10, Z
     f16:	b1 80       	ldd	r11, Z+1	; 0x01
     f18:	26 ff       	sbrs	r18, 6
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <vfprintf+0x12a>
     f1c:	65 2d       	mov	r22, r5
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x12e>
     f22:	6f ef       	ldi	r22, 0xFF	; 255
     f24:	7f ef       	ldi	r23, 0xFF	; 255
     f26:	c5 01       	movw	r24, r10
     f28:	2c 87       	std	Y+12, r18	; 0x0c
     f2a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <strnlen>
     f2e:	2c 01       	movw	r4, r24
     f30:	83 01       	movw	r16, r6
     f32:	2c 85       	ldd	r18, Y+12	; 0x0c
     f34:	2f 77       	andi	r18, 0x7F	; 127
     f36:	22 2e       	mov	r2, r18
     f38:	17 c0       	rjmp	.+46     	; 0xf68 <vfprintf+0x170>
     f3a:	38 01       	movw	r6, r16
     f3c:	f2 e0       	ldi	r31, 0x02	; 2
     f3e:	6f 0e       	add	r6, r31
     f40:	71 1c       	adc	r7, r1
     f42:	f8 01       	movw	r30, r16
     f44:	a0 80       	ld	r10, Z
     f46:	b1 80       	ldd	r11, Z+1	; 0x01
     f48:	26 ff       	sbrs	r18, 6
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <vfprintf+0x15a>
     f4c:	65 2d       	mov	r22, r5
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x15e>
     f52:	6f ef       	ldi	r22, 0xFF	; 255
     f54:	7f ef       	ldi	r23, 0xFF	; 255
     f56:	c5 01       	movw	r24, r10
     f58:	2c 87       	std	Y+12, r18	; 0x0c
     f5a:	0e 94 ce 08 	call	0x119c	; 0x119c <strnlen_P>
     f5e:	2c 01       	movw	r4, r24
     f60:	2c 85       	ldd	r18, Y+12	; 0x0c
     f62:	20 68       	ori	r18, 0x80	; 128
     f64:	22 2e       	mov	r2, r18
     f66:	83 01       	movw	r16, r6
     f68:	23 fc       	sbrc	r2, 3
     f6a:	1b c0       	rjmp	.+54     	; 0xfa2 <vfprintf+0x1aa>
     f6c:	83 2d       	mov	r24, r3
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	48 16       	cp	r4, r24
     f72:	59 06       	cpc	r5, r25
     f74:	b0 f4       	brcc	.+44     	; 0xfa2 <vfprintf+0x1aa>
     f76:	b7 01       	movw	r22, r14
     f78:	80 e2       	ldi	r24, 0x20	; 32
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
     f80:	3a 94       	dec	r3
     f82:	f4 cf       	rjmp	.-24     	; 0xf6c <vfprintf+0x174>
     f84:	f5 01       	movw	r30, r10
     f86:	27 fc       	sbrc	r2, 7
     f88:	85 91       	lpm	r24, Z+
     f8a:	27 fe       	sbrs	r2, 7
     f8c:	81 91       	ld	r24, Z+
     f8e:	5f 01       	movw	r10, r30
     f90:	b7 01       	movw	r22, r14
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
     f98:	31 10       	cpse	r3, r1
     f9a:	3a 94       	dec	r3
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	4f 1a       	sub	r4, r31
     fa0:	51 08       	sbc	r5, r1
     fa2:	41 14       	cp	r4, r1
     fa4:	51 04       	cpc	r5, r1
     fa6:	71 f7       	brne	.-36     	; 0xf84 <vfprintf+0x18c>
     fa8:	e5 c0       	rjmp	.+458    	; 0x1174 <vfprintf+0x37c>
     faa:	84 36       	cpi	r24, 0x64	; 100
     fac:	11 f0       	breq	.+4      	; 0xfb2 <vfprintf+0x1ba>
     fae:	89 36       	cpi	r24, 0x69	; 105
     fb0:	39 f5       	brne	.+78     	; 0x1000 <vfprintf+0x208>
     fb2:	f8 01       	movw	r30, r16
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <vfprintf+0x1ce>
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	0c 5f       	subi	r16, 0xFC	; 252
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <vfprintf+0x1de>
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	88 27       	eor	r24, r24
     fcc:	77 fd       	sbrc	r23, 7
     fce:	80 95       	com	r24
     fd0:	98 2f       	mov	r25, r24
     fd2:	0e 5f       	subi	r16, 0xFE	; 254
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	2f 76       	andi	r18, 0x6F	; 111
     fd8:	b2 2e       	mov	r11, r18
     fda:	97 ff       	sbrs	r25, 7
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <vfprintf+0x1f8>
     fde:	90 95       	com	r25
     fe0:	80 95       	com	r24
     fe2:	70 95       	com	r23
     fe4:	61 95       	neg	r22
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	20 68       	ori	r18, 0x80	; 128
     fee:	b2 2e       	mov	r11, r18
     ff0:	2a e0       	ldi	r18, 0x0A	; 10
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	a4 01       	movw	r20, r8
     ff6:	0e 94 16 09 	call	0x122c	; 0x122c <__ultoa_invert>
     ffa:	a8 2e       	mov	r10, r24
     ffc:	a8 18       	sub	r10, r8
     ffe:	44 c0       	rjmp	.+136    	; 0x1088 <vfprintf+0x290>
    1000:	85 37       	cpi	r24, 0x75	; 117
    1002:	29 f4       	brne	.+10     	; 0x100e <vfprintf+0x216>
    1004:	2f 7e       	andi	r18, 0xEF	; 239
    1006:	b2 2e       	mov	r11, r18
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	25 c0       	rjmp	.+74     	; 0x1058 <vfprintf+0x260>
    100e:	f2 2f       	mov	r31, r18
    1010:	f9 7f       	andi	r31, 0xF9	; 249
    1012:	bf 2e       	mov	r11, r31
    1014:	8f 36       	cpi	r24, 0x6F	; 111
    1016:	c1 f0       	breq	.+48     	; 0x1048 <vfprintf+0x250>
    1018:	18 f4       	brcc	.+6      	; 0x1020 <vfprintf+0x228>
    101a:	88 35       	cpi	r24, 0x58	; 88
    101c:	79 f0       	breq	.+30     	; 0x103c <vfprintf+0x244>
    101e:	b4 c0       	rjmp	.+360    	; 0x1188 <vfprintf+0x390>
    1020:	80 37       	cpi	r24, 0x70	; 112
    1022:	19 f0       	breq	.+6      	; 0x102a <vfprintf+0x232>
    1024:	88 37       	cpi	r24, 0x78	; 120
    1026:	21 f0       	breq	.+8      	; 0x1030 <vfprintf+0x238>
    1028:	af c0       	rjmp	.+350    	; 0x1188 <vfprintf+0x390>
    102a:	2f 2f       	mov	r18, r31
    102c:	20 61       	ori	r18, 0x10	; 16
    102e:	b2 2e       	mov	r11, r18
    1030:	b4 fe       	sbrs	r11, 4
    1032:	0d c0       	rjmp	.+26     	; 0x104e <vfprintf+0x256>
    1034:	8b 2d       	mov	r24, r11
    1036:	84 60       	ori	r24, 0x04	; 4
    1038:	b8 2e       	mov	r11, r24
    103a:	09 c0       	rjmp	.+18     	; 0x104e <vfprintf+0x256>
    103c:	24 ff       	sbrs	r18, 4
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <vfprintf+0x25c>
    1040:	9f 2f       	mov	r25, r31
    1042:	96 60       	ori	r25, 0x06	; 6
    1044:	b9 2e       	mov	r11, r25
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <vfprintf+0x25c>
    1048:	28 e0       	ldi	r18, 0x08	; 8
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <vfprintf+0x260>
    104e:	20 e1       	ldi	r18, 0x10	; 16
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vfprintf+0x260>
    1054:	20 e1       	ldi	r18, 0x10	; 16
    1056:	32 e0       	ldi	r19, 0x02	; 2
    1058:	f8 01       	movw	r30, r16
    105a:	b7 fe       	sbrs	r11, 7
    105c:	07 c0       	rjmp	.+14     	; 0x106c <vfprintf+0x274>
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	0c 5f       	subi	r16, 0xFC	; 252
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0x280>
    106c:	60 81       	ld	r22, Z
    106e:	71 81       	ldd	r23, Z+1	; 0x01
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 5f       	subi	r16, 0xFE	; 254
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	a4 01       	movw	r20, r8
    107a:	0e 94 16 09 	call	0x122c	; 0x122c <__ultoa_invert>
    107e:	a8 2e       	mov	r10, r24
    1080:	a8 18       	sub	r10, r8
    1082:	fb 2d       	mov	r31, r11
    1084:	ff 77       	andi	r31, 0x7F	; 127
    1086:	bf 2e       	mov	r11, r31
    1088:	b6 fe       	sbrs	r11, 6
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <vfprintf+0x2aa>
    108c:	2b 2d       	mov	r18, r11
    108e:	2e 7f       	andi	r18, 0xFE	; 254
    1090:	a5 14       	cp	r10, r5
    1092:	50 f4       	brcc	.+20     	; 0x10a8 <vfprintf+0x2b0>
    1094:	b4 fe       	sbrs	r11, 4
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <vfprintf+0x2b4>
    1098:	b2 fc       	sbrc	r11, 2
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <vfprintf+0x2b4>
    109c:	2b 2d       	mov	r18, r11
    109e:	2e 7e       	andi	r18, 0xEE	; 238
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <vfprintf+0x2b4>
    10a2:	7a 2c       	mov	r7, r10
    10a4:	2b 2d       	mov	r18, r11
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <vfprintf+0x2b6>
    10a8:	7a 2c       	mov	r7, r10
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <vfprintf+0x2b6>
    10ac:	75 2c       	mov	r7, r5
    10ae:	24 ff       	sbrs	r18, 4
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <vfprintf+0x2d4>
    10b2:	fe 01       	movw	r30, r28
    10b4:	ea 0d       	add	r30, r10
    10b6:	f1 1d       	adc	r31, r1
    10b8:	80 81       	ld	r24, Z
    10ba:	80 33       	cpi	r24, 0x30	; 48
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <vfprintf+0x2ca>
    10be:	29 7e       	andi	r18, 0xE9	; 233
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x2dc>
    10c2:	22 ff       	sbrs	r18, 2
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <vfprintf+0x2da>
    10c6:	73 94       	inc	r7
    10c8:	73 94       	inc	r7
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <vfprintf+0x2dc>
    10cc:	82 2f       	mov	r24, r18
    10ce:	86 78       	andi	r24, 0x86	; 134
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <vfprintf+0x2dc>
    10d2:	73 94       	inc	r7
    10d4:	23 fd       	sbrc	r18, 3
    10d6:	13 c0       	rjmp	.+38     	; 0x10fe <vfprintf+0x306>
    10d8:	20 ff       	sbrs	r18, 0
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <vfprintf+0x2f0>
    10dc:	5a 2c       	mov	r5, r10
    10de:	73 14       	cp	r7, r3
    10e0:	18 f4       	brcc	.+6      	; 0x10e8 <vfprintf+0x2f0>
    10e2:	53 0c       	add	r5, r3
    10e4:	57 18       	sub	r5, r7
    10e6:	73 2c       	mov	r7, r3
    10e8:	73 14       	cp	r7, r3
    10ea:	68 f4       	brcc	.+26     	; 0x1106 <vfprintf+0x30e>
    10ec:	b7 01       	movw	r22, r14
    10ee:	80 e2       	ldi	r24, 0x20	; 32
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	2c 87       	std	Y+12, r18	; 0x0c
    10f4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
    10f8:	73 94       	inc	r7
    10fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10fc:	f5 cf       	rjmp	.-22     	; 0x10e8 <vfprintf+0x2f0>
    10fe:	73 14       	cp	r7, r3
    1100:	10 f4       	brcc	.+4      	; 0x1106 <vfprintf+0x30e>
    1102:	37 18       	sub	r3, r7
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <vfprintf+0x310>
    1106:	31 2c       	mov	r3, r1
    1108:	24 ff       	sbrs	r18, 4
    110a:	12 c0       	rjmp	.+36     	; 0x1130 <vfprintf+0x338>
    110c:	b7 01       	movw	r22, r14
    110e:	80 e3       	ldi	r24, 0x30	; 48
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2c 87       	std	Y+12, r18	; 0x0c
    1114:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
    1118:	2c 85       	ldd	r18, Y+12	; 0x0c
    111a:	22 ff       	sbrs	r18, 2
    111c:	17 c0       	rjmp	.+46     	; 0x114c <vfprintf+0x354>
    111e:	21 ff       	sbrs	r18, 1
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <vfprintf+0x330>
    1122:	88 e5       	ldi	r24, 0x58	; 88
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x334>
    1128:	88 e7       	ldi	r24, 0x78	; 120
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	b7 01       	movw	r22, r14
    112e:	0c c0       	rjmp	.+24     	; 0x1148 <vfprintf+0x350>
    1130:	82 2f       	mov	r24, r18
    1132:	86 78       	andi	r24, 0x86	; 134
    1134:	59 f0       	breq	.+22     	; 0x114c <vfprintf+0x354>
    1136:	21 fd       	sbrc	r18, 1
    1138:	02 c0       	rjmp	.+4      	; 0x113e <vfprintf+0x346>
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <vfprintf+0x348>
    113e:	8b e2       	ldi	r24, 0x2B	; 43
    1140:	27 fd       	sbrc	r18, 7
    1142:	8d e2       	ldi	r24, 0x2D	; 45
    1144:	b7 01       	movw	r22, r14
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
    114c:	a5 14       	cp	r10, r5
    114e:	38 f4       	brcc	.+14     	; 0x115e <vfprintf+0x366>
    1150:	b7 01       	movw	r22, r14
    1152:	80 e3       	ldi	r24, 0x30	; 48
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
    115a:	5a 94       	dec	r5
    115c:	f7 cf       	rjmp	.-18     	; 0x114c <vfprintf+0x354>
    115e:	aa 94       	dec	r10
    1160:	f4 01       	movw	r30, r8
    1162:	ea 0d       	add	r30, r10
    1164:	f1 1d       	adc	r31, r1
    1166:	80 81       	ld	r24, Z
    1168:	b7 01       	movw	r22, r14
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
    1170:	a1 10       	cpse	r10, r1
    1172:	f5 cf       	rjmp	.-22     	; 0x115e <vfprintf+0x366>
    1174:	33 20       	and	r3, r3
    1176:	09 f4       	brne	.+2      	; 0x117a <vfprintf+0x382>
    1178:	51 ce       	rjmp	.-862    	; 0xe1c <vfprintf+0x24>
    117a:	b7 01       	movw	r22, r14
    117c:	80 e2       	ldi	r24, 0x20	; 32
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <fputc>
    1184:	3a 94       	dec	r3
    1186:	f6 cf       	rjmp	.-20     	; 0x1174 <vfprintf+0x37c>
    1188:	f7 01       	movw	r30, r14
    118a:	86 81       	ldd	r24, Z+6	; 0x06
    118c:	97 81       	ldd	r25, Z+7	; 0x07
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <vfprintf+0x39c>
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	9f ef       	ldi	r25, 0xFF	; 255
    1194:	2c 96       	adiw	r28, 0x0c	; 12
    1196:	e2 e1       	ldi	r30, 0x12	; 18
    1198:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__epilogue_restores__>

0000119c <strnlen_P>:
    119c:	fc 01       	movw	r30, r24
    119e:	05 90       	lpm	r0, Z+
    11a0:	61 50       	subi	r22, 0x01	; 1
    11a2:	70 40       	sbci	r23, 0x00	; 0
    11a4:	01 10       	cpse	r0, r1
    11a6:	d8 f7       	brcc	.-10     	; 0x119e <strnlen_P+0x2>
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	8e 0f       	add	r24, r30
    11ae:	9f 1f       	adc	r25, r31
    11b0:	08 95       	ret

000011b2 <strnlen>:
    11b2:	fc 01       	movw	r30, r24
    11b4:	61 50       	subi	r22, 0x01	; 1
    11b6:	70 40       	sbci	r23, 0x00	; 0
    11b8:	01 90       	ld	r0, Z+
    11ba:	01 10       	cpse	r0, r1
    11bc:	d8 f7       	brcc	.-10     	; 0x11b4 <strnlen+0x2>
    11be:	80 95       	com	r24
    11c0:	90 95       	com	r25
    11c2:	8e 0f       	add	r24, r30
    11c4:	9f 1f       	adc	r25, r31
    11c6:	08 95       	ret

000011c8 <fputc>:
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	18 2f       	mov	r17, r24
    11d2:	09 2f       	mov	r16, r25
    11d4:	eb 01       	movw	r28, r22
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	81 fd       	sbrc	r24, 1
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <fputc+0x1a>
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	20 c0       	rjmp	.+64     	; 0x1222 <fputc+0x5a>
    11e2:	82 ff       	sbrs	r24, 2
    11e4:	10 c0       	rjmp	.+32     	; 0x1206 <fputc+0x3e>
    11e6:	4e 81       	ldd	r20, Y+6	; 0x06
    11e8:	5f 81       	ldd	r21, Y+7	; 0x07
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	42 17       	cp	r20, r18
    11f0:	53 07       	cpc	r21, r19
    11f2:	7c f4       	brge	.+30     	; 0x1212 <fputc+0x4a>
    11f4:	e8 81       	ld	r30, Y
    11f6:	f9 81       	ldd	r31, Y+1	; 0x01
    11f8:	9f 01       	movw	r18, r30
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	39 83       	std	Y+1, r19	; 0x01
    1200:	28 83       	st	Y, r18
    1202:	10 83       	st	Z, r17
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <fputc+0x4a>
    1206:	e8 85       	ldd	r30, Y+8	; 0x08
    1208:	f9 85       	ldd	r31, Y+9	; 0x09
    120a:	81 2f       	mov	r24, r17
    120c:	09 95       	icall
    120e:	89 2b       	or	r24, r25
    1210:	29 f7       	brne	.-54     	; 0x11dc <fputc+0x14>
    1212:	2e 81       	ldd	r18, Y+6	; 0x06
    1214:	3f 81       	ldd	r19, Y+7	; 0x07
    1216:	2f 5f       	subi	r18, 0xFF	; 255
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	3f 83       	std	Y+7, r19	; 0x07
    121c:	2e 83       	std	Y+6, r18	; 0x06
    121e:	81 2f       	mov	r24, r17
    1220:	90 2f       	mov	r25, r16
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <__ultoa_invert>:
    122c:	fa 01       	movw	r30, r20
    122e:	aa 27       	eor	r26, r26
    1230:	28 30       	cpi	r18, 0x08	; 8
    1232:	51 f1       	breq	.+84     	; 0x1288 <__ultoa_invert+0x5c>
    1234:	20 31       	cpi	r18, 0x10	; 16
    1236:	81 f1       	breq	.+96     	; 0x1298 <__ultoa_invert+0x6c>
    1238:	e8 94       	clt
    123a:	6f 93       	push	r22
    123c:	6e 7f       	andi	r22, 0xFE	; 254
    123e:	6e 5f       	subi	r22, 0xFE	; 254
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	8f 4f       	sbci	r24, 0xFF	; 255
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	af 4f       	sbci	r26, 0xFF	; 255
    1248:	b1 e0       	ldi	r27, 0x01	; 1
    124a:	3e d0       	rcall	.+124    	; 0x12c8 <__ultoa_invert+0x9c>
    124c:	b4 e0       	ldi	r27, 0x04	; 4
    124e:	3c d0       	rcall	.+120    	; 0x12c8 <__ultoa_invert+0x9c>
    1250:	67 0f       	add	r22, r23
    1252:	78 1f       	adc	r23, r24
    1254:	89 1f       	adc	r24, r25
    1256:	9a 1f       	adc	r25, r26
    1258:	a1 1d       	adc	r26, r1
    125a:	68 0f       	add	r22, r24
    125c:	79 1f       	adc	r23, r25
    125e:	8a 1f       	adc	r24, r26
    1260:	91 1d       	adc	r25, r1
    1262:	a1 1d       	adc	r26, r1
    1264:	6a 0f       	add	r22, r26
    1266:	71 1d       	adc	r23, r1
    1268:	81 1d       	adc	r24, r1
    126a:	91 1d       	adc	r25, r1
    126c:	a1 1d       	adc	r26, r1
    126e:	20 d0       	rcall	.+64     	; 0x12b0 <__ultoa_invert+0x84>
    1270:	09 f4       	brne	.+2      	; 0x1274 <__ultoa_invert+0x48>
    1272:	68 94       	set
    1274:	3f 91       	pop	r19
    1276:	2a e0       	ldi	r18, 0x0A	; 10
    1278:	26 9f       	mul	r18, r22
    127a:	11 24       	eor	r1, r1
    127c:	30 19       	sub	r19, r0
    127e:	30 5d       	subi	r19, 0xD0	; 208
    1280:	31 93       	st	Z+, r19
    1282:	de f6       	brtc	.-74     	; 0x123a <__ultoa_invert+0xe>
    1284:	cf 01       	movw	r24, r30
    1286:	08 95       	ret
    1288:	46 2f       	mov	r20, r22
    128a:	47 70       	andi	r20, 0x07	; 7
    128c:	40 5d       	subi	r20, 0xD0	; 208
    128e:	41 93       	st	Z+, r20
    1290:	b3 e0       	ldi	r27, 0x03	; 3
    1292:	0f d0       	rcall	.+30     	; 0x12b2 <__ultoa_invert+0x86>
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__ultoa_invert+0x5c>
    1296:	f6 cf       	rjmp	.-20     	; 0x1284 <__ultoa_invert+0x58>
    1298:	46 2f       	mov	r20, r22
    129a:	4f 70       	andi	r20, 0x0F	; 15
    129c:	40 5d       	subi	r20, 0xD0	; 208
    129e:	4a 33       	cpi	r20, 0x3A	; 58
    12a0:	18 f0       	brcs	.+6      	; 0x12a8 <__ultoa_invert+0x7c>
    12a2:	49 5d       	subi	r20, 0xD9	; 217
    12a4:	31 fd       	sbrc	r19, 1
    12a6:	40 52       	subi	r20, 0x20	; 32
    12a8:	41 93       	st	Z+, r20
    12aa:	02 d0       	rcall	.+4      	; 0x12b0 <__ultoa_invert+0x84>
    12ac:	a9 f7       	brne	.-22     	; 0x1298 <__ultoa_invert+0x6c>
    12ae:	ea cf       	rjmp	.-44     	; 0x1284 <__ultoa_invert+0x58>
    12b0:	b4 e0       	ldi	r27, 0x04	; 4
    12b2:	a6 95       	lsr	r26
    12b4:	97 95       	ror	r25
    12b6:	87 95       	ror	r24
    12b8:	77 95       	ror	r23
    12ba:	67 95       	ror	r22
    12bc:	ba 95       	dec	r27
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <__ultoa_invert+0x86>
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 05       	cpc	r22, r1
    12c4:	71 05       	cpc	r23, r1
    12c6:	08 95       	ret
    12c8:	9b 01       	movw	r18, r22
    12ca:	ac 01       	movw	r20, r24
    12cc:	0a 2e       	mov	r0, r26
    12ce:	06 94       	lsr	r0
    12d0:	57 95       	ror	r21
    12d2:	47 95       	ror	r20
    12d4:	37 95       	ror	r19
    12d6:	27 95       	ror	r18
    12d8:	ba 95       	dec	r27
    12da:	c9 f7       	brne	.-14     	; 0x12ce <__ultoa_invert+0xa2>
    12dc:	62 0f       	add	r22, r18
    12de:	73 1f       	adc	r23, r19
    12e0:	84 1f       	adc	r24, r20
    12e2:	95 1f       	adc	r25, r21
    12e4:	a0 1d       	adc	r26, r0
    12e6:	08 95       	ret

000012e8 <__prologue_saves__>:
    12e8:	2f 92       	push	r2
    12ea:	3f 92       	push	r3
    12ec:	4f 92       	push	r4
    12ee:	5f 92       	push	r5
    12f0:	6f 92       	push	r6
    12f2:	7f 92       	push	r7
    12f4:	8f 92       	push	r8
    12f6:	9f 92       	push	r9
    12f8:	af 92       	push	r10
    12fa:	bf 92       	push	r11
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	ca 1b       	sub	r28, r26
    1312:	db 0b       	sbc	r29, r27
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	09 94       	ijmp

00001320 <__epilogue_restores__>:
    1320:	2a 88       	ldd	r2, Y+18	; 0x12
    1322:	39 88       	ldd	r3, Y+17	; 0x11
    1324:	48 88       	ldd	r4, Y+16	; 0x10
    1326:	5f 84       	ldd	r5, Y+15	; 0x0f
    1328:	6e 84       	ldd	r6, Y+14	; 0x0e
    132a:	7d 84       	ldd	r7, Y+13	; 0x0d
    132c:	8c 84       	ldd	r8, Y+12	; 0x0c
    132e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1330:	aa 84       	ldd	r10, Y+10	; 0x0a
    1332:	b9 84       	ldd	r11, Y+9	; 0x09
    1334:	c8 84       	ldd	r12, Y+8	; 0x08
    1336:	df 80       	ldd	r13, Y+7	; 0x07
    1338:	ee 80       	ldd	r14, Y+6	; 0x06
    133a:	fd 80       	ldd	r15, Y+5	; 0x05
    133c:	0c 81       	ldd	r16, Y+4	; 0x04
    133e:	1b 81       	ldd	r17, Y+3	; 0x03
    1340:	aa 81       	ldd	r26, Y+2	; 0x02
    1342:	b9 81       	ldd	r27, Y+1	; 0x01
    1344:	ce 0f       	add	r28, r30
    1346:	d1 1d       	adc	r29, r1
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	ed 01       	movw	r28, r26
    1354:	08 95       	ret

00001356 <_exit>:
    1356:	f8 94       	cli

00001358 <__stop_program>:
    1358:	ff cf       	rjmp	.-2      	; 0x1358 <__stop_program>
