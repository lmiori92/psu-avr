
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  0000140a  0000149e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000140a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000210  008001ca  008001ca  00001568  2**0
                  ALLOC
  3 .stab         0000351c  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002229  00000000  00000000  00004a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006cad  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e0       	ldi	r30, 0x0A	; 10
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3c       	cpi	r26, 0xCA	; 202
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	aa ec       	ldi	r26, 0xCA	; 202
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3d       	cpi	r26, 0xDA	; 218
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
      9e:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      c8:	80 91 d6 01 	lds	r24, 0x01D6
      cc:	88 23       	and	r24, r24
      ce:	c1 f0       	breq	.+48     	; 0x100 <__vector_21+0x5a>
        adc_mux_switch = true;
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
      d0:	10 92 d6 01 	sts	0x01D6, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
      d4:	80 91 7a 00 	lds	r24, 0x007A
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 93 7a 00 	sts	0x007A, r24

}
      de:	ff 91       	pop	r31
      e0:	ef 91       	pop	r30
      e2:	bf 91       	pop	r27
      e4:	af 91       	pop	r26
      e6:	9f 91       	pop	r25
      e8:	8f 91       	pop	r24
      ea:	7f 91       	pop	r23
      ec:	6f 91       	pop	r22
      ee:	5f 91       	pop	r21
      f0:	4f 91       	pop	r20
      f2:	3f 91       	pop	r19
      f4:	2f 91       	pop	r18
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
     100:	80 91 d7 01 	lds	r24, 0x01D7
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	20 91 78 00 	lds	r18, 0x0078
     10a:	40 91 79 00 	lds	r20, 0x0079
     10e:	fc 01       	movw	r30, r24
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	e6 53       	subi	r30, 0x36	; 54
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	34 2b       	or	r19, r20
     11c:	31 83       	std	Z+1, r19	; 0x01
     11e:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__divmodhi4>
     12a:	80 93 d7 01 	sts	0x01D7, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     12e:	80 91 7c 00 	lds	r24, 0x007C
     132:	80 7f       	andi	r24, 0xF0	; 240
     134:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adc_mux_index;
     138:	80 91 7c 00 	lds	r24, 0x007C
     13c:	90 91 d7 01 	lds	r25, 0x01D7
     140:	89 2b       	or	r24, r25
     142:	80 93 7c 00 	sts	0x007C, r24
        adc_mux_switch = true;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 d6 01 	sts	0x01D6, r24
     14c:	c3 cf       	rjmp	.-122    	; 0xd4 <__vector_21+0x2e>

0000014e <adc_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     14e:	ec e7       	ldi	r30, 0x7C	; 124
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 71       	andi	r24, 0x10	; 16
     156:	80 83       	st	Z, r24

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     168:	80 81       	ld	r24, Z
     16a:	8f 64       	ori	r24, 0x4F	; 79
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <adc_get>:
/* nothing */
#endif

uint16_t adc_get(e_adc_channel channel)
{
    return adc_samples[channel];
     170:	e8 2f       	mov	r30, r24
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	e6 53       	subi	r30, 0x36	; 54
     17a:	fe 4f       	sbci	r31, 0xFE	; 254
}
     17c:	80 81       	ld	r24, Z
     17e:	91 81       	ldd	r25, Z+1	; 0x01
     180:	08 95       	ret

00000182 <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     182:	08 95       	ret

00000184 <adc_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void adc_last_reset(void)
{
     184:	08 95       	ret

00000186 <encoder_init>:
 */
void encoder_init(void)
{

    /* Logic initialization */
    g_encoder[ENC_HW_0].pin_A = PIN6;
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	80 93 d8 01 	sts	0x01D8, r24
    g_encoder[ENC_HW_0].pin_B = PIN7;
     18c:	87 e0       	ldi	r24, 0x07	; 7
     18e:	80 93 d9 01 	sts	0x01D9, r24
    g_encoder[ENC_HW_0].tick = g_timestamp;
     192:	80 91 d6 03 	lds	r24, 0x03D6
     196:	90 91 d7 03 	lds	r25, 0x03D7
     19a:	a0 91 d8 03 	lds	r26, 0x03D8
     19e:	b0 91 d9 03 	lds	r27, 0x03D9
     1a2:	80 93 dd 01 	sts	0x01DD, r24
     1a6:	90 93 de 01 	sts	0x01DE, r25
     1aa:	a0 93 df 01 	sts	0x01DF, r26
     1ae:	b0 93 e0 01 	sts	0x01E0, r27

    /* Inputs */
    ENC_DDR &= ~(1<<PIN7);
     1b2:	57 98       	cbi	0x0a, 7	; 10
    ENC_DDR &= ~(1<<PIN6);
     1b4:	56 98       	cbi	0x0a, 6	; 10
    DDRB &= ~(1<<PIN0);
     1b6:	20 98       	cbi	0x04, 0	; 4

    /* Turn on pull-ups (encoder switches to GND) */
    ENC_PORT |= (1<<PIN7) | (1 << PIN6);
     1b8:	8b b1       	in	r24, 0x0b	; 11
     1ba:	80 6c       	ori	r24, 0xC0	; 192
     1bc:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 1<<PIN0;
     1be:	28 9a       	sbi	0x05, 0	; 5

    /* Enable interrupts on the encoder pins */
    PCMSK0 |= (1 << PCINT0 );                  /* click */
     1c0:	eb e6       	ldi	r30, 0x6B	; 107
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	81 60       	ori	r24, 0x01	; 1
     1c8:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT23 ) | (1 << PCINT22); /* wheel */
     1ca:	ed e6       	ldi	r30, 0x6D	; 109
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 6c       	ori	r24, 0xC0	; 192
     1d2:	80 83       	st	Z, r24

    /* Enable Pin Change subsystem (interrupts) */
    PCICR |= (1<< PCIE0);
     1d4:	e8 e6       	ldi	r30, 0x68	; 104
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	80 83       	st	Z, r24
    PCICR |= (1<< PCIE2);
     1de:	80 81       	ld	r24, Z
     1e0:	84 60       	ori	r24, 0x04	; 4
     1e2:	80 83       	st	Z, r24
     1e4:	08 95       	ret

000001e6 <encoder_set_callback>:
/**
 * Set the encoder event callback
 */
void encoder_set_callback(e_enc_hw index, t_enc_cb event_cb)
{
    g_encoder[index].evt_cb = event_cb;
     1e6:	9f e0       	ldi	r25, 0x0F	; 15
     1e8:	89 9f       	mul	r24, r25
     1ea:	f0 01       	movw	r30, r0
     1ec:	11 24       	eor	r1, r1
     1ee:	e8 52       	subi	r30, 0x28	; 40
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	76 87       	std	Z+14, r23	; 0x0e
     1f4:	65 87       	std	Z+13, r22	; 0x0d
     1f6:	08 95       	ret

000001f8 <__vector_3>:
}

ISR(PCINT0_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
    /* TODO generate the appropriate event */
}
     202:	0f 90       	pop	r0
     204:	0f be       	out	0x3f, r0	; 63
     206:	0f 90       	pop	r0
     208:	1f 90       	pop	r1
     20a:	18 95       	reti

0000020c <__vector_5>:
 * Best case execution time: 10us
 * Worst case execution time: 20us
 * => both well below the 100us system tick timer
 */
ISR(PCINT2_vect)
{
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31

    uint8_t i = 0;  /* left for a future multiple encoder implementation */

    {
        /* Shift the old values */
        g_encoder[i].pin_raw <<= 2;
     236:	90 91 da 01 	lds	r25, 0x01DA
     23a:	99 0f       	add	r25, r25
     23c:	99 0f       	add	r25, r25
     23e:	90 93 da 01 	sts	0x01DA, r25
        /* Store the new values */
        g_encoder[i].pin_raw |= ((ENC_PIN >> g_encoder[i].pin_A) & 0x1U) | (((ENC_PIN >> g_encoder[i].pin_B) & 0x1U) << 1U);
     242:	e9 b1       	in	r30, 0x09	; 9
     244:	89 b1       	in	r24, 0x09	; 9
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	00 90 d8 01 	lds	r0, 0x01D8
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_5+0x46>
     24e:	f5 95       	asr	r31
     250:	e7 95       	ror	r30
     252:	0a 94       	dec	r0
     254:	e2 f7       	brpl	.-8      	; 0x24e <__vector_5+0x42>
     256:	e1 70       	andi	r30, 0x01	; 1
     258:	e9 2b       	or	r30, r25
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	00 90 d9 01 	lds	r0, 0x01D9
     260:	02 c0       	rjmp	.+4      	; 0x266 <__vector_5+0x5a>
     262:	95 95       	asr	r25
     264:	87 95       	ror	r24
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <__vector_5+0x56>
     26a:	81 70       	andi	r24, 0x01	; 1
     26c:	88 0f       	add	r24, r24
     26e:	e8 2b       	or	r30, r24
     270:	e0 93 da 01 	sts	0x01DA, r30
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
     274:	ef 70       	andi	r30, 0x0F	; 15
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	e4 5e       	subi	r30, 0xE4	; 228
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	20 81       	ld	r18, Z
     27e:	80 91 db 01 	lds	r24, 0x01DB
     282:	28 0f       	add	r18, r24
     284:	20 93 db 01 	sts	0x01DB, r18
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
     288:	80 91 d6 03 	lds	r24, 0x03D6
     28c:	90 91 d7 03 	lds	r25, 0x03D7
     290:	a0 91 d8 03 	lds	r26, 0x03D8
     294:	b0 91 d9 03 	lds	r27, 0x03D9
     298:	40 91 dd 01 	lds	r20, 0x01DD
     29c:	50 91 de 01 	lds	r21, 0x01DE
     2a0:	60 91 df 01 	lds	r22, 0x01DF
     2a4:	70 91 e0 01 	lds	r23, 0x01E0
     2a8:	7c 01       	movw	r14, r24
     2aa:	8d 01       	movw	r16, r26
     2ac:	e4 1a       	sub	r14, r20
     2ae:	f5 0a       	sbc	r15, r21
     2b0:	06 0b       	sbc	r16, r22
     2b2:	17 0b       	sbc	r17, r23
     2b4:	b8 01       	movw	r22, r16
     2b6:	a7 01       	movw	r20, r14
     2b8:	41 32       	cpi	r20, 0x21	; 33
     2ba:	01 ea       	ldi	r16, 0xA1	; 161
     2bc:	50 07       	cpc	r21, r16
     2be:	07 e0       	ldi	r16, 0x07	; 7
     2c0:	60 07       	cpc	r22, r16
     2c2:	71 05       	cpc	r23, r1
     2c4:	b8 f5       	brcc	.+110    	; 0x334 <__vector_5+0x128>
            /* Timeout */
            g_encoder[i].raw = 0;
            g_encoder[i].pin_raw = 0;
            g_encoder[i].tick = g_timestamp;
        }
        else if (g_encoder[i].raw > 2)
     2c6:	23 30       	cpi	r18, 0x03	; 3
     2c8:	0c f0       	brlt	.+2      	; 0x2cc <__vector_5+0xc0>
     2ca:	41 c0       	rjmp	.+130    	; 0x34e <__vector_5+0x142>
            g_encoder[i].value++;
            g_encoder[i].raw = 0;
            g_encoder[i].tick = g_timestamp;
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
        }
        else if (g_encoder[i].raw < -2)
     2cc:	2e 3f       	cpi	r18, 0xFE	; 254
     2ce:	ec f4       	brge	.+58     	; 0x30a <__vector_5+0xfe>
        {
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     2d0:	40 93 e1 01 	sts	0x01E1, r20
     2d4:	50 93 e2 01 	sts	0x01E2, r21
     2d8:	60 93 e3 01 	sts	0x01E3, r22
     2dc:	70 93 e4 01 	sts	0x01E4, r23
            g_encoder[i].value--;
     2e0:	20 91 dc 01 	lds	r18, 0x01DC
     2e4:	21 50       	subi	r18, 0x01	; 1
     2e6:	20 93 dc 01 	sts	0x01DC, r18
            g_encoder[i].raw = 0;
     2ea:	10 92 db 01 	sts	0x01DB, r1
            g_encoder[i].tick = g_timestamp;
     2ee:	80 93 dd 01 	sts	0x01DD, r24
     2f2:	90 93 de 01 	sts	0x01DE, r25
     2f6:	a0 93 df 01 	sts	0x01DF, r26
     2fa:	b0 93 e0 01 	sts	0x01E0, r27
            g_encoder[i].evt_cb(ENC_EVT_LEFT, g_encoder[i].delta_t);
     2fe:	e0 91 e5 01 	lds	r30, 0x01E5
     302:	f0 91 e6 01 	lds	r31, 0x01E6
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	09 95       	icall
        }
    }

}
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	bf 91       	pop	r27
     310:	af 91       	pop	r26
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	7f 91       	pop	r23
     318:	6f 91       	pop	r22
     31a:	5f 91       	pop	r21
     31c:	4f 91       	pop	r20
     31e:	3f 91       	pop	r19
     320:	2f 91       	pop	r18
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
        {
            /* Timeout */
            g_encoder[i].raw = 0;
     334:	10 92 db 01 	sts	0x01DB, r1
            g_encoder[i].pin_raw = 0;
     338:	10 92 da 01 	sts	0x01DA, r1
            g_encoder[i].tick = g_timestamp;
     33c:	80 93 dd 01 	sts	0x01DD, r24
     340:	90 93 de 01 	sts	0x01DE, r25
     344:	a0 93 df 01 	sts	0x01DF, r26
     348:	b0 93 e0 01 	sts	0x01E0, r27
     34c:	de cf       	rjmp	.-68     	; 0x30a <__vector_5+0xfe>
        }
        else if (g_encoder[i].raw > 2)
        {
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     34e:	40 93 e1 01 	sts	0x01E1, r20
     352:	50 93 e2 01 	sts	0x01E2, r21
     356:	60 93 e3 01 	sts	0x01E3, r22
     35a:	70 93 e4 01 	sts	0x01E4, r23
            g_encoder[i].value++;
     35e:	20 91 dc 01 	lds	r18, 0x01DC
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	20 93 dc 01 	sts	0x01DC, r18
            g_encoder[i].raw = 0;
     368:	10 92 db 01 	sts	0x01DB, r1
            g_encoder[i].tick = g_timestamp;
     36c:	80 93 dd 01 	sts	0x01DD, r24
     370:	90 93 de 01 	sts	0x01DE, r25
     374:	a0 93 df 01 	sts	0x01DF, r26
     378:	b0 93 e0 01 	sts	0x01E0, r27
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
     37c:	e0 91 e5 01 	lds	r30, 0x01E5
     380:	f0 91 e6 01 	lds	r31, 0x01E6
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	09 95       	icall
     388:	c0 cf       	rjmp	.-128    	; 0x30a <__vector_5+0xfe>

0000038a <encoder_event_callback>:
    1, 1, 1, 20, 55, 90, 125, 160, 195, 230, 265, 300, 335, 370, 405, 440, 475,
    510, 545, 580, 615, 650, 685, 720, 755, 790, 825, 860, 895, 930, 965, 1000
};

static void encoder_event_callback(e_enc_event event, uint32_t delta_t)
{
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	af e7       	ldi	r26, 0x7F	; 127
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	e0 e0       	ldi	r30, 0x00	; 0
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <encoder_event_callback+0x16>
     398:	31 96       	adiw	r30, 0x01	; 1
    uint8_t i;
    uint16_t diff;
    for (i = 0; i < SMOOTHING_SIZE; i++)
     39a:	e0 32       	cpi	r30, 0x20	; 32
     39c:	f1 05       	cpc	r31, r1
     39e:	51 f1       	breq	.+84     	; 0x3f4 <encoder_event_callback+0x6a>
    {
        if (delta_t >= smoothing_deltat[i])
     3a0:	0d 91       	ld	r16, X+
     3a2:	1d 91       	ld	r17, X+
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 17       	cp	r20, r16
     3aa:	51 07       	cpc	r21, r17
     3ac:	62 07       	cpc	r22, r18
     3ae:	73 07       	cpc	r23, r19
     3b0:	98 f3       	brcs	.-26     	; 0x398 <encoder_event_callback+0xe>
        {
            diff = smoothing_result[i];
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e1 5c       	subi	r30, 0xC1	; 193
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	20 81       	ld	r18, Z
     3bc:	31 81       	ldd	r19, Z+1	; 0x01
            if (event == ENC_EVT_LEFT)
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	e1 f0       	breq	.+56     	; 0x3fa <encoder_event_callback+0x70>
            {
                lib_diff(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, diff);
            }
            else if (event == ENC_EVT_RIGHT)
     3c2:	81 11       	cpse	r24, r1
     3c4:	17 c0       	rjmp	.+46     	; 0x3f4 <encoder_event_callback+0x6a>
            {
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
     3c6:	80 91 0b 02 	lds	r24, 0x020B
     3ca:	90 91 0c 02 	lds	r25, 0x020C
    return output;
}

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
    if (limit < *value)
     3ce:	40 91 11 02 	lds	r20, 0x0211
     3d2:	50 91 12 02 	lds	r21, 0x0212
     3d6:	84 17       	cp	r24, r20
     3d8:	95 07       	cpc	r25, r21
     3da:	e8 f0       	brcs	.+58     	; 0x416 <encoder_event_callback+0x8c>
    {
        *value = limit;
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     3dc:	bc 01       	movw	r22, r24
     3de:	64 1b       	sub	r22, r20
     3e0:	75 0b       	sbc	r23, r21
     3e2:	26 17       	cp	r18, r22
     3e4:	37 07       	cpc	r19, r23
     3e6:	b8 f4       	brcc	.+46     	; 0x416 <encoder_event_callback+0x8c>
     3e8:	24 0f       	add	r18, r20
     3ea:	35 1f       	adc	r19, r21
     3ec:	30 93 12 02 	sts	0x0212, r19
     3f0:	20 93 11 02 	sts	0x0211, r18
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
            }
            break;
        }
    }
}
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	08 95       	ret
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
     3fa:	80 91 11 02 	lds	r24, 0x0211
     3fe:	90 91 12 02 	lds	r25, 0x0212
     402:	28 17       	cp	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	70 f4       	brcc	.+28     	; 0x424 <encoder_event_callback+0x9a>
     408:	82 1b       	sub	r24, r18
     40a:	93 0b       	sbc	r25, r19
     40c:	90 93 12 02 	sts	0x0212, r25
     410:	80 93 11 02 	sts	0x0211, r24
     414:	ef cf       	rjmp	.-34     	; 0x3f4 <encoder_event_callback+0x6a>
        *value = limit;
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
        else                          *value  = limit;
     416:	90 93 12 02 	sts	0x0212, r25
     41a:	80 93 11 02 	sts	0x0211, r24
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
            }
            break;
        }
    }
}
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
    else               *value  = 0;
     424:	10 92 12 02 	sts	0x0212, r1
     428:	10 92 11 02 	sts	0x0211, r1
     42c:	e3 cf       	rjmp	.-58     	; 0x3f4 <encoder_event_callback+0x6a>

0000042e <uart_received>:
{

    /* NOTE: interrupt callback. Pay attention to execution time... */

    /* Call the state machine with a single byte... */
    remote_buffer_to_datagram(byte);
     42e:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <remote_buffer_to_datagram>

00000432 <psu_get_channel_from_node_id>:
        channel->state = PSU_STATE_OPERATIONAL;
    }
}

t_psu_channel* psu_get_channel_from_node_id(uint8_t node_id)
{
     432:	28 2f       	mov	r18, r24

    t_psu_channel* ret = NULL;

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     434:	80 91 07 02 	lds	r24, 0x0207
     438:	82 17       	cp	r24, r18
     43a:	49 f0       	breq	.+18     	; 0x44e <psu_get_channel_from_node_id+0x1c>

t_psu_channel* psu_get_channel_from_node_id(uint8_t node_id)
{
    uint16_t i = 0;

    t_psu_channel* ret = NULL;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     440:	30 91 3d 02 	lds	r19, 0x023D
     444:	32 13       	cpse	r19, r18
            ret = &psu_channels[i];
        }
    }

    return ret;
}
     446:	08 95       	ret

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
        {
            ret = &psu_channels[i];
     448:	8d e3       	ldi	r24, 0x3D	; 61
     44a:	92 e0       	ldi	r25, 0x02	; 2
        }
    }

    return ret;
}
     44c:	08 95       	ret

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
        {
            ret = &psu_channels[i];
     44e:	87 e0       	ldi	r24, 0x07	; 7
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	f6 cf       	rjmp	.-20     	; 0x440 <psu_get_channel_from_node_id+0xe>

00000454 <lib_sum>:
    return output;
}

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
    if (limit < *value)
     454:	fc 01       	movw	r30, r24
     456:	20 81       	ld	r18, Z
     458:	31 81       	ldd	r19, Z+1	; 0x01
     45a:	62 17       	cp	r22, r18
     45c:	73 07       	cpc	r23, r19
     45e:	30 f0       	brcs	.+12     	; 0x46c <lib_sum+0x18>
    {
        *value = limit;
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     460:	fb 01       	movw	r30, r22
     462:	e2 1b       	sub	r30, r18
     464:	f3 0b       	sbc	r31, r19
     466:	4e 17       	cp	r20, r30
     468:	5f 07       	cpc	r21, r31
     46a:	20 f0       	brcs	.+8      	; 0x474 <lib_sum+0x20>

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
    if (limit < *value)
    {
        *value = limit;
     46c:	fc 01       	movw	r30, r24
     46e:	71 83       	std	Z+1, r23	; 0x01
     470:	60 83       	st	Z, r22
     472:	08 95       	ret
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     474:	24 0f       	add	r18, r20
     476:	35 1f       	adc	r19, r21
     478:	fc 01       	movw	r30, r24
     47a:	31 83       	std	Z+1, r19	; 0x01
     47c:	20 83       	st	Z, r18
     47e:	08 95       	ret

00000480 <lib_diff>:
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
     480:	fc 01       	movw	r30, r24
     482:	20 81       	ld	r18, Z
     484:	31 81       	ldd	r19, Z+1	; 0x01
     486:	62 17       	cp	r22, r18
     488:	73 07       	cpc	r23, r19
     48a:	20 f0       	brcs	.+8      	; 0x494 <lib_diff+0x14>
    else               *value  = 0;
     48c:	fc 01       	movw	r30, r24
     48e:	11 82       	std	Z+1, r1	; 0x01
     490:	10 82       	st	Z, r1
     492:	08 95       	ret
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
     494:	26 1b       	sub	r18, r22
     496:	37 0b       	sbc	r19, r23
     498:	31 83       	std	Z+1, r19	; 0x01
     49a:	20 83       	st	Z, r18
     49c:	08 95       	ret

0000049e <lib_limit>:
    else               *value  = 0;
}

void lib_limit(t_value *value, t_value_scale *scale)
{
     49e:	fc 01       	movw	r30, r24
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	db 01       	movw	r26, r22
     4a6:	2d 91       	ld	r18, X+
     4a8:	3c 91       	ld	r19, X
     4aa:	82 17       	cp	r24, r18
     4ac:	93 07       	cpc	r25, r19
     4ae:	10 f4       	brcc	.+4      	; 0x4b4 <lib_limit+0x16>
     4b0:	33 83       	std	Z+3, r19	; 0x03
     4b2:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     4b4:	db 01       	movw	r26, r22
     4b6:	12 96       	adiw	r26, 0x02	; 2
     4b8:	2d 91       	ld	r18, X+
     4ba:	3c 91       	ld	r19, X
     4bc:	13 97       	sbiw	r26, 0x03	; 3
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	10 f4       	brcc	.+4      	; 0x4c8 <lib_limit+0x2a>
     4c4:	33 83       	std	Z+3, r19	; 0x03
     4c6:	22 83       	std	Z+2, r18	; 0x02
     4c8:	08 95       	ret

000004ca <lib_scale>:
}

void lib_scale(t_value *value, t_value_scale *scale)
{
     4ca:	2f 92       	push	r2
     4cc:	3f 92       	push	r3
     4ce:	4f 92       	push	r4
     4d0:	5f 92       	push	r5
     4d2:	6f 92       	push	r6
     4d4:	7f 92       	push	r7
     4d6:	8f 92       	push	r8
     4d8:	9f 92       	push	r9
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <lib_scale+0x26>
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
     4f8:	3b 01       	movw	r6, r22
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     4fa:	fb 01       	movw	r30, r22
     4fc:	24 80       	ldd	r2, Z+4	; 0x04
     4fe:	35 80       	ldd	r3, Z+5	; 0x05
     500:	00 81       	ld	r16, Z
     502:	11 81       	ldd	r17, Z+1	; 0x01

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     504:	fc 01       	movw	r30, r24
     506:	60 81       	ld	r22, Z
     508:	71 81       	ldd	r23, Z+1	; 0x01
     50a:	60 1b       	sub	r22, r16
     50c:	71 0b       	sbc	r23, r17
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     516:	6b 01       	movw	r12, r22
     518:	7c 01       	movw	r14, r24
}

void lib_scale(t_value *value, t_value_scale *scale)
{
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     51a:	f3 01       	movw	r30, r6
     51c:	66 81       	ldd	r22, Z+6	; 0x06
     51e:	77 81       	ldd	r23, Z+7	; 0x07
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     528:	4b 01       	movw	r8, r22
     52a:	5c 01       	movw	r10, r24
     52c:	b1 01       	movw	r22, r2
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     536:	9b 01       	movw	r18, r22
     538:	ac 01       	movw	r20, r24
     53a:	c5 01       	movw	r24, r10
     53c:	b4 01       	movw	r22, r8
     53e:	0e 94 19 08 	call	0x1032	; 0x1032 <__subsf3>
     542:	4b 01       	movw	r8, r22
     544:	5c 01       	movw	r10, r24
     546:	f3 01       	movw	r30, r6
     548:	62 81       	ldd	r22, Z+2	; 0x02
     54a:	73 81       	ldd	r23, Z+3	; 0x03
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	b8 01       	movw	r22, r16
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     562:	9b 01       	movw	r18, r22
     564:	ac 01       	movw	r20, r24
     566:	c3 01       	movw	r24, r6
     568:	b2 01       	movw	r22, r4
     56a:	0e 94 19 08 	call	0x1032	; 0x1032 <__subsf3>
     56e:	9b 01       	movw	r18, r22
     570:	ac 01       	movw	r20, r24
     572:	c5 01       	movw	r24, r10
     574:	b4 01       	movw	r22, r8
     576:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__divsf3>
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	0e 94 a0 09 	call	0x1340	; 0x1340 <__mulsf3>
     586:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fixunssfsi>
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     58a:	62 0d       	add	r22, r2
     58c:	73 1d       	adc	r23, r3
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     58e:	e9 81       	ldd	r30, Y+1	; 0x01
     590:	fa 81       	ldd	r31, Y+2	; 0x02
     592:	73 83       	std	Z+3, r23	; 0x03
     594:	62 83       	std	Z+2, r22	; 0x02
}
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	df 90       	pop	r13
     5a8:	cf 90       	pop	r12
     5aa:	bf 90       	pop	r11
     5ac:	af 90       	pop	r10
     5ae:	9f 90       	pop	r9
     5b0:	8f 90       	pop	r8
     5b2:	7f 90       	pop	r7
     5b4:	6f 90       	pop	r6
     5b6:	5f 90       	pop	r5
     5b8:	4f 90       	pop	r4
     5ba:	3f 90       	pop	r3
     5bc:	2f 90       	pop	r2
     5be:	08 95       	ret

000005c0 <main>:
    }
}
*/

int main(void)
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <main+0x6>
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62

    /* System init */
    system_init();
     5ca:	0e 94 56 07 	call	0xeac	; 0xeac <system_init>
}

static void init_io(void)
{

    cli();
     5ce:	f8 94       	cli

    /* UART */
    uart_init();
     5d0:	0e 94 98 07 	call	0xf30	; 0xf30 <uart_init>
    uart_callback(uart_received);
     5d4:	87 e1       	ldi	r24, 0x17	; 23
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	0e 94 dd 07 	call	0xfba	; 0xfba <uart_callback>
    //stdout = &uart_output;
    //stdin  = &uart_input;

    /* ADC */
    adc_init();
     5dc:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>

    /* PWM */
    pwm_init();
     5e0:	0e 94 91 04 	call	0x922	; 0x922 <pwm_init>

    /* System timer */
    timer_init();
     5e4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <timer_init>

    /* Encoder */
    encoder_init();
     5e8:	0e 94 c3 00 	call	0x186	; 0x186 <encoder_init>
    encoder_set_callback(ENC_HW_0, encoder_event_callback);
     5ec:	65 ec       	ldi	r22, 0xC5	; 197
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <encoder_set_callback>

    sei();
     5f6:	78 94       	sei
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->remote_node         = 0U;
     5f8:	10 92 07 02 	sts	0x0207, r1
            channel->voltage_adc_channel = ADC_0;
     5fc:	10 92 21 02 	sts	0x0221, r1
            channel->current_adc_channel = ADC_1;
     600:	dd 24       	eor	r13, r13
     602:	d3 94       	inc	r13
     604:	d0 92 3b 02 	sts	0x023B, r13
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     608:	10 92 22 02 	sts	0x0222, r1
            channel->current_pwm_channel = PWM_CHANNEL_1;
     60c:	d0 92 3c 02 	sts	0x023C, r13
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     610:	10 92 16 02 	sts	0x0216, r1
     614:	10 92 15 02 	sts	0x0215, r1
    channel->voltage_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     618:	ee 24       	eor	r14, r14
     61a:	ea 94       	dec	r14
     61c:	33 e0       	ldi	r19, 0x03	; 3
     61e:	f3 2e       	mov	r15, r19
     620:	f0 92 18 02 	sts	0x0218, r15
     624:	e0 92 17 02 	sts	0x0217, r14
    channel->voltage_readout.scale.min_scaled = 0;
     628:	10 92 1a 02 	sts	0x021A, r1
     62c:	10 92 19 02 	sts	0x0219, r1
    channel->voltage_readout.scale.max_scaled = 28500;    /* Voltage */
     630:	04 e5       	ldi	r16, 0x54	; 84
     632:	1f e6       	ldi	r17, 0x6F	; 111
     634:	10 93 1c 02 	sts	0x021C, r17
     638:	00 93 1b 02 	sts	0x021B, r16

    channel->current_readout.scale.min = 0;
     63c:	10 92 30 02 	sts	0x0230, r1
     640:	10 92 2f 02 	sts	0x022F, r1
    channel->current_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     644:	f0 92 32 02 	sts	0x0232, r15
     648:	e0 92 31 02 	sts	0x0231, r14
    channel->current_readout.scale.min_scaled = 0;
     64c:	10 92 34 02 	sts	0x0234, r1
     650:	10 92 33 02 	sts	0x0233, r1
    channel->current_readout.scale.max_scaled = 2048;     /* Voltage */
     654:	a1 2c       	mov	r10, r1
     656:	48 e0       	ldi	r20, 0x08	; 8
     658:	b4 2e       	mov	r11, r20
     65a:	b0 92 36 02 	sts	0x0236, r11
     65e:	a0 92 35 02 	sts	0x0235, r10

    channel->voltage_setpoint.scale.min = 0;
     662:	10 92 0a 02 	sts	0x020A, r1
     666:	10 92 09 02 	sts	0x0209, r1
    channel->voltage_setpoint.scale.max = 28500;
     66a:	10 93 0c 02 	sts	0x020C, r17
     66e:	00 93 0b 02 	sts	0x020B, r16
    channel->voltage_setpoint.scale.min_scaled = 0;
     672:	10 92 0e 02 	sts	0x020E, r1
     676:	10 92 0d 02 	sts	0x020D, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 ed 04 	call	0x9da	; 0x9da <pwm_get_resolution>
     680:	90 93 10 02 	sts	0x0210, r25
     684:	80 93 0f 02 	sts	0x020F, r24

    channel->current_setpoint.scale.min = 0;
     688:	10 92 24 02 	sts	0x0224, r1
     68c:	10 92 23 02 	sts	0x0223, r1
    channel->current_setpoint.scale.max = 28500;
     690:	10 93 26 02 	sts	0x0226, r17
     694:	00 93 25 02 	sts	0x0225, r16
    channel->current_setpoint.scale.min_scaled = 0;
     698:	10 92 28 02 	sts	0x0228, r1
     69c:	10 92 27 02 	sts	0x0227, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     6a0:	80 91 3c 02 	lds	r24, 0x023C
     6a4:	0e 94 ed 04 	call	0x9da	; 0x9da <pwm_get_resolution>
     6a8:	90 93 2a 02 	sts	0x022A, r25
     6ac:	80 93 29 02 	sts	0x0229, r24
            channel->current_adc_channel = ADC_1;
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
            channel->current_pwm_channel = PWM_CHANNEL_1;
            break;
        case PSU_CHANNEL_1:
            channel->remote_node         = 1U;
     6b0:	d0 92 3d 02 	sts	0x023D, r13
            channel->voltage_adc_channel = ADC_2;
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	90 93 57 02 	sts	0x0257, r25
            channel->current_adc_channel = ADC_3;
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	80 93 71 02 	sts	0x0271, r24
            channel->voltage_pwm_channel = PWM_CHANNEL_2;
     6c0:	90 93 58 02 	sts	0x0258, r25
            channel->current_pwm_channel = PWM_CHANNEL_3;
     6c4:	80 93 72 02 	sts	0x0272, r24
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     6c8:	10 92 4c 02 	sts	0x024C, r1
     6cc:	10 92 4b 02 	sts	0x024B, r1
    channel->voltage_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     6d0:	f0 92 4e 02 	sts	0x024E, r15
     6d4:	e0 92 4d 02 	sts	0x024D, r14
    channel->voltage_readout.scale.min_scaled = 0;
     6d8:	10 92 50 02 	sts	0x0250, r1
     6dc:	10 92 4f 02 	sts	0x024F, r1
    channel->voltage_readout.scale.max_scaled = 28500;    /* Voltage */
     6e0:	10 93 52 02 	sts	0x0252, r17
     6e4:	00 93 51 02 	sts	0x0251, r16

    channel->current_readout.scale.min = 0;
     6e8:	10 92 66 02 	sts	0x0266, r1
     6ec:	10 92 65 02 	sts	0x0265, r1
    channel->current_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     6f0:	f0 92 68 02 	sts	0x0268, r15
     6f4:	e0 92 67 02 	sts	0x0267, r14
    channel->current_readout.scale.min_scaled = 0;
     6f8:	10 92 6a 02 	sts	0x026A, r1
     6fc:	10 92 69 02 	sts	0x0269, r1
    channel->current_readout.scale.max_scaled = 2048;     /* Voltage */
     700:	b0 92 6c 02 	sts	0x026C, r11
     704:	a0 92 6b 02 	sts	0x026B, r10

    channel->voltage_setpoint.scale.min = 0;
     708:	10 92 40 02 	sts	0x0240, r1
     70c:	10 92 3f 02 	sts	0x023F, r1
    channel->voltage_setpoint.scale.max = 28500;
     710:	10 93 42 02 	sts	0x0242, r17
     714:	00 93 41 02 	sts	0x0241, r16
    channel->voltage_setpoint.scale.min_scaled = 0;
     718:	10 92 44 02 	sts	0x0244, r1
     71c:	10 92 43 02 	sts	0x0243, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	0e 94 ed 04 	call	0x9da	; 0x9da <pwm_get_resolution>
     726:	90 93 46 02 	sts	0x0246, r25
     72a:	80 93 45 02 	sts	0x0245, r24

    channel->current_setpoint.scale.min = 0;
     72e:	10 92 5a 02 	sts	0x025A, r1
     732:	10 92 59 02 	sts	0x0259, r1
    channel->current_setpoint.scale.max = 28500;
     736:	10 93 5c 02 	sts	0x025C, r17
     73a:	00 93 5b 02 	sts	0x025B, r16
    channel->current_setpoint.scale.min_scaled = 0;
     73e:	10 92 5e 02 	sts	0x025E, r1
     742:	10 92 5d 02 	sts	0x025D, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     746:	80 91 72 02 	lds	r24, 0x0272
     74a:	0e 94 ed 04 	call	0x9da	; 0x9da <pwm_get_resolution>
     74e:	90 93 60 02 	sts	0x0260, r25
     752:	80 93 5f 02 	sts	0x025F, r24

    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/
    uart_putstring("\x1B[2J\x1B[H");
     756:	8c e2       	ldi	r24, 0x2C	; 44
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart_putstring>
 */
static void remote_decode_datagram(void)
{
    bool new;
    bool crc_ok;
    uint8_t i = 0;
     75e:	10 e0       	ldi	r17, 0x00	; 0

    do
    {
        new = remote_receive_buffer_get(&remote_dgram_rcv_copy);
     760:	87 ee       	ldi	r24, 0xE7	; 231
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 8a 05 	call	0xb14	; 0xb14 <remote_receive_buffer_get>
        if (new == true)
     768:	81 11       	cpse	r24, r1
     76a:	56 c0       	rjmp	.+172    	; 0x818 <main+0x258>
     76c:	07 e0       	ldi	r16, 0x07	; 7
     76e:	12 e0       	ldi	r17, 0x02	; 2

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
        {
            ret = &psu_channels[i];
     770:	e1 2c       	mov	r14, r1
     772:	f1 2c       	mov	r15, r1
    /* Parse remote datagrams */
    remote_decode_datagram();

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == 0U)
     774:	f8 01       	movw	r30, r16
     776:	80 81       	ld	r24, Z
     778:	88 23       	and	r24, r24
     77a:	09 f4       	brne	.+2      	; 0x77e <main+0x1be>
     77c:	79 c0       	rjmp	.+242    	; 0x870 <main+0x2b0>
}

static void psu_postprocessing(t_psu_channel *channel)
{
    /* Voltage Scaling */
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     77e:	b8 01       	movw	r22, r16
     780:	62 5f       	subi	r22, 0xF2	; 242
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	c8 01       	movw	r24, r16
     786:	46 96       	adiw	r24, 0x16	; 22
     788:	0e 94 65 02 	call	0x4ca	; 0x4ca <lib_scale>
    /* Current Scaling */
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     78c:	b8 01       	movw	r22, r16
     78e:	68 5d       	subi	r22, 0xD8	; 216
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	c8 01       	movw	r24, r16
     794:	c0 96       	adiw	r24, 0x30	; 48
     796:	0e 94 65 02 	call	0x4ca	; 0x4ca <lib_scale>
     79a:	0a 5c       	subi	r16, 0xCA	; 202
     79c:	1f 4f       	sbci	r17, 0xFF	; 255
     79e:	f6 e3       	ldi	r31, 0x36	; 54
     7a0:	ef 0e       	add	r14, r31
     7a2:	f1 1c       	adc	r15, r1
    uint8_t i;

    /* Parse remote datagrams */
    remote_decode_datagram();

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     7a4:	8c e6       	ldi	r24, 0x6C	; 108
     7a6:	e8 16       	cp	r14, r24
     7a8:	f1 04       	cpc	r15, r1
     7aa:	21 f7       	brne	.-56     	; 0x774 <main+0x1b4>
     7ac:	07 e0       	ldi	r16, 0x07	; 7
     7ae:	12 e0       	ldi	r17, 0x02	; 2
     7b0:	2b e2       	ldi	r18, 0x2B	; 43
     7b2:	e2 2e       	mov	r14, r18
     7b4:	22 e0       	ldi	r18, 0x02	; 2
     7b6:	f2 2e       	mov	r15, r18
     7b8:	b8 01       	movw	r22, r16
     7ba:	6e 5f       	subi	r22, 0xFE	; 254
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
}

static void psu_preprocessing(t_psu_channel *channel)
{
    /* Voltage Scaling */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     7be:	c8 01       	movw	r24, r16
     7c0:	0a 96       	adiw	r24, 0x0a	; 10
     7c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lib_scale>
     7c6:	b8 01       	movw	r22, r16
     7c8:	64 5e       	subi	r22, 0xE4	; 228
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
    /* Current Scaling */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     7cc:	c7 01       	movw	r24, r14
     7ce:	0e 94 65 02 	call	0x4ca	; 0x4ca <lib_scale>
    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        /* Pre-processing (scaling) of the values */
        psu_preprocessing(&psu_channels[i]);

        if (psu_channels[i].remote_node == 0U)
     7d2:	f8 01       	movw	r30, r16
     7d4:	80 81       	ld	r24, Z
     7d6:	81 11       	cpse	r24, r1
     7d8:	3f c0       	rjmp	.+126    	; 0x858 <main+0x298>

static void pwm_processing(t_psu_channel *channel)
{

    /* Voltage */
    pwm_set_duty(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     7da:	64 85       	ldd	r22, Z+12	; 0x0c
     7dc:	75 85       	ldd	r23, Z+13	; 0x0d
     7de:	f7 01       	movw	r30, r14
     7e0:	39 97       	sbiw	r30, 0x09	; 9
     7e2:	80 81       	ld	r24, Z
     7e4:	0e 94 c8 04 	call	0x990	; 0x990 <pwm_set_duty>

    /* Current */
    pwm_set_duty(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     7e8:	f7 01       	movw	r30, r14
     7ea:	62 81       	ldd	r22, Z+2	; 0x02
     7ec:	73 81       	ldd	r23, Z+3	; 0x03
     7ee:	f8 01       	movw	r30, r16
     7f0:	85 a9       	ldd	r24, Z+53	; 0x35
     7f2:	0e 94 c8 04 	call	0x990	; 0x990 <pwm_set_duty>
     7f6:	0a 5c       	subi	r16, 0xCA	; 202
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	f6 e3       	ldi	r31, 0x36	; 54
     7fc:	ef 0e       	add	r14, r31
     7fe:	f1 1c       	adc	r15, r1

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	03 37       	cpi	r16, 0x73	; 115
     804:	18 07       	cpc	r17, r24
     806:	c1 f6       	brne	.-80     	; 0x7b8 <main+0x1f8>
 */
static void remote_decode_datagram(void)
{
    bool new;
    bool crc_ok;
    uint8_t i = 0;
     808:	10 e0       	ldi	r17, 0x00	; 0

    do
    {
        new = remote_receive_buffer_get(&remote_dgram_rcv_copy);
     80a:	87 ee       	ldi	r24, 0xE7	; 231
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 8a 05 	call	0xb14	; 0xb14 <remote_receive_buffer_get>
        if (new == true)
     812:	88 23       	and	r24, r24
     814:	09 f4       	brne	.+2      	; 0x818 <main+0x258>
     816:	aa cf       	rjmp	.-172    	; 0x76c <main+0x1ac>
        {
            crc_ok = remote_calc_crc_buffer_and_compare(remote_dgram_rcv_copy.data, remote_dgram_rcv_copy.datagram.len, remote_dgram_rcv_copy.datagram.crc, NULL);
     818:	40 91 ed 01 	lds	r20, 0x01ED
     81c:	50 91 ee 01 	lds	r21, 0x01EE
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	60 91 ec 01 	lds	r22, 0x01EC
     828:	83 ef       	ldi	r24, 0xF3	; 243
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 08 07 	call	0xe10	; 0xe10 <remote_calc_crc_buffer_and_compare>
            if ((crc_ok == true) && (remote_dgram_rcv_copy.datagram.len > 0U))
     830:	88 23       	and	r24, r24
     832:	69 f0       	breq	.+26     	; 0x84e <main+0x28e>
     834:	80 91 ec 01 	lds	r24, 0x01EC
     838:	88 23       	and	r24, r24
     83a:	49 f0       	breq	.+18     	; 0x84e <main+0x28e>
            {

                switch (remote_dgram_rcv_copy.data[0])
     83c:	90 91 f3 01 	lds	r25, 0x01F3
     840:	92 30       	cpi	r25, 0x02	; 2
     842:	91 f1       	breq	.+100    	; 0x8a8 <main+0x2e8>
     844:	94 30       	cpi	r25, 0x04	; 4
     846:	39 f1       	breq	.+78     	; 0x896 <main+0x2d6>
     848:	91 30       	cpi	r25, 0x01	; 1
     84a:	09 f4       	brne	.+2      	; 0x84e <main+0x28e>
     84c:	48 c0       	rjmp	.+144    	; 0x8de <main+0x31e>
                default:
                    break;
                }
            }
        }
        i++;
     84e:	1f 5f       	subi	r17, 0xFF	; 255
    }
    while ((new == true) && (i < DGRAM_RCV_BUFFER_LEN));
     850:	15 30       	cpi	r17, 0x05	; 5
     852:	08 f4       	brcc	.+2      	; 0x856 <main+0x296>
     854:	85 cf       	rjmp	.-246    	; 0x760 <main+0x1a0>
     856:	8a cf       	rjmp	.-236    	; 0x76c <main+0x1ac>

static void remote_encode_datagram(e_datatype type, t_psu_channel *channel)
{

    t_remote_datagram_buffer *rem_buf;
    remote_send_buffer_alloc(&rem_buf);
     858:	ce 01       	movw	r24, r28
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	0e 94 44 05 	call	0xa88	; 0xa88 <remote_send_buffer_alloc>

    if (rem_buf != NULL)
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	09 f4       	brne	.+2      	; 0x86a <main+0x2aa>
     868:	4b c0       	rjmp	.+150    	; 0x900 <__stack+0x1>
        default:
            break;
        }

        /* set the datagram as sendable */
        remote_send_buffer_send(rem_buf);
     86a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <remote_send_buffer_send>
     86e:	c3 cf       	rjmp	.-122    	; 0x7f6 <main+0x236>
     870:	c7 01       	movw	r24, r14
     872:	89 5f       	subi	r24, 0xF9	; 249
     874:	9d 4f       	sbci	r25, 0xFD	; 253
     876:	5c 01       	movw	r10, r24

static void adc_processing(t_psu_channel *channel)
{

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     878:	fc 01       	movw	r30, r24
     87a:	82 8d       	ldd	r24, Z+26	; 0x1a
     87c:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     880:	f8 01       	movw	r30, r16
     882:	97 8b       	std	Z+23, r25	; 0x17
     884:	86 8b       	std	Z+22, r24	; 0x16

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     886:	f5 01       	movw	r30, r10
     888:	84 a9       	ldd	r24, Z+52	; 0x34
     88a:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     88e:	f8 01       	movw	r30, r16
     890:	91 ab       	std	Z+49, r25	; 0x31
     892:	80 ab       	std	Z+48, r24	; 0x30
     894:	74 cf       	rjmp	.-280    	; 0x77e <main+0x1be>

                switch (remote_dgram_rcv_copy.data[0])
                {
                case DATAYPE_DEBUG:
                    /* debug data (usually a string) */
                    uart_putstring(remote_dgram_rcv_copy.data);
     896:	83 ef       	ldi	r24, 0xF3	; 243
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart_putstring>
                    uart_putstring("\r\n");
     89e:	86 ec       	ldi	r24, 0xC6	; 198
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart_putstring>
     8a6:	d3 cf       	rjmp	.-90     	; 0x84e <main+0x28e>
                    /* config data */
                    remote_decode_config(&remote_dgram_rcv_copy, psu_get_channel_from_node_id(remote_dgram_rcv_copy.datagram.node_id));
                    break;
                case DATATYPE_READOUTS:
                    /* readout data */
                    remote_decode_readout(&remote_dgram_rcv_copy, psu_get_channel_from_node_id(remote_dgram_rcv_copy.datagram.node_id));
     8a8:	90 91 eb 01 	lds	r25, 0x01EB

    t_psu_channel* ret = NULL;

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     8ac:	20 91 07 02 	lds	r18, 0x0207
     8b0:	92 17       	cp	r25, r18
     8b2:	a1 f1       	breq	.+104    	; 0x91c <__stack+0x1d>

t_psu_channel* psu_get_channel_from_node_id(uint8_t node_id)
{
    uint16_t i = 0;

    t_psu_channel* ret = NULL;
     8b4:	e0 e0       	ldi	r30, 0x00	; 0
     8b6:	f0 e0       	ldi	r31, 0x00	; 0

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     8b8:	20 91 3d 02 	lds	r18, 0x023D
     8bc:	92 17       	cp	r25, r18
     8be:	59 f1       	breq	.+86     	; 0x916 <__stack+0x17>

}

static void remote_decode_readout(t_remote_datagram_buffer *datagram, t_psu_channel *channel)
{
    if ((datagram != NULL) && (channel != NULL) && (datagram->datagram.len >= 5U))
     8c0:	30 97       	sbiw	r30, 0x00	; 0
     8c2:	29 f2       	breq	.-118    	; 0x84e <main+0x28e>
     8c4:	85 30       	cpi	r24, 0x05	; 5
     8c6:	18 f2       	brcs	.-122    	; 0x84e <main+0x28e>
}

static uint16_t lib_bytes_to_uint16(uint8_t lo, uint8_t hi)
{
    uint16_t output;
    output  = (uint8_t)lo;
     8c8:	80 91 f4 01 	lds	r24, 0x01F4
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	97 8b       	std	Z+23, r25	; 0x17
     8d0:	86 8b       	std	Z+22, r24	; 0x16
     8d2:	80 91 f6 01 	lds	r24, 0x01F6
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	91 ab       	std	Z+49, r25	; 0x31
     8da:	80 ab       	std	Z+48, r24	; 0x30
     8dc:	b8 cf       	rjmp	.-144    	; 0x84e <main+0x28e>
                    uart_putstring(remote_dgram_rcv_copy.data);
                    uart_putstring("\r\n");
                    break;
                case DATATYPE_CONFIG:
                    /* config data */
                    remote_decode_config(&remote_dgram_rcv_copy, psu_get_channel_from_node_id(remote_dgram_rcv_copy.datagram.node_id));
     8de:	80 91 eb 01 	lds	r24, 0x01EB

    t_psu_channel* ret = NULL;

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     8e2:	90 91 07 02 	lds	r25, 0x0207
     8e6:	89 17       	cp	r24, r25
     8e8:	99 f0       	breq	.+38     	; 0x910 <__stack+0x11>

t_psu_channel* psu_get_channel_from_node_id(uint8_t node_id)
{
    uint16_t i = 0;

    t_psu_channel* ret = NULL;
     8ea:	e0 e0       	ldi	r30, 0x00	; 0
     8ec:	f0 e0       	ldi	r31, 0x00	; 0

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     8ee:	90 91 3d 02 	lds	r25, 0x023D
     8f2:	89 17       	cp	r24, r25
     8f4:	51 f0       	breq	.+20     	; 0x90a <__stack+0xb>
    }
}

static void remote_decode_config(t_remote_datagram_buffer *datagram, t_psu_channel *channel)
{
    if ((datagram != NULL) && (channel != NULL))
     8f6:	30 97       	sbiw	r30, 0x00	; 0
     8f8:	09 f4       	brne	.+2      	; 0x8fc <main+0x33c>
     8fa:	a9 cf       	rjmp	.-174    	; 0x84e <main+0x28e>
    {
        /* STUB */
        /* Config received, set to operational */
        channel->state = PSU_STATE_OPERATIONAL;
     8fc:	d1 82       	std	Z+1, r13	; 0x01
     8fe:	a7 cf       	rjmp	.-178    	; 0x84e <main+0x28e>
        remote_send_buffer_send(rem_buf);
    }
    else
    {
        /* Send buffer overflow */
        uart_putstring("send ovf\r\n");
     900:	84 e3       	ldi	r24, 0x34	; 52
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart_putstring>
     908:	76 cf       	rjmp	.-276    	; 0x7f6 <main+0x236>

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
        {
            ret = &psu_channels[i];
     90a:	ed e3       	ldi	r30, 0x3D	; 61
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	f3 cf       	rjmp	.-26     	; 0x8f6 <main+0x336>
     910:	e7 e0       	ldi	r30, 0x07	; 7
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	ec cf       	rjmp	.-40     	; 0x8ee <main+0x32e>
     916:	ed e3       	ldi	r30, 0x3D	; 61
     918:	f2 e0       	ldi	r31, 0x02	; 2
     91a:	d2 cf       	rjmp	.-92     	; 0x8c0 <main+0x300>
     91c:	e7 e0       	ldi	r30, 0x07	; 7
     91e:	f2 e0       	ldi	r31, 0x02	; 2
     920:	cb cf       	rjmp	.-106    	; 0x8b8 <main+0x2f8>

00000922 <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     922:	e3 e7       	ldi	r30, 0x73	; 115
     924:	f2 e0       	ldi	r31, 0x02	; 2

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     926:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Reset values, just in case */
        pwm_channels[i].duty = 0;
     928:	14 82       	std	Z+4, r1	; 0x04
     92a:	13 82       	std	Z+3, r1	; 0x03
        pwm_channels[i].resolution = 0;
     92c:	12 82       	std	Z+2, r1	; 0x02
     92e:	11 82       	std	Z+1, r1	; 0x01
        pwm_channels[i].channel = i;
     930:	80 83       	st	Z, r24
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	35 96       	adiw	r30, 0x05	; 5
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	b9 f7       	brne	.-18     	; 0x928 <pwm_init+0x6>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1));
     93a:	82 ea       	ldi	r24, 0xA2	; 162
     93c:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = ((PWM_MODE << 3) | (1 << WGM13) | (1 << CS10));
     940:	89 e1       	ldi	r24, 0x19	; 25
     942:	80 93 81 00 	sts	0x0081, r24
    ICR1H = (PWM_FREQ >> 8);
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	80 93 87 00 	sts	0x0087, r24
    ICR1L = (PWM_FREQ & 0xff);
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	80 93 86 00 	sts	0x0086, r24

    pwm_channels[PWM_CHANNEL_0].resolution = PWM_FREQ;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	90 93 75 02 	sts	0x0275, r25
     95a:	80 93 74 02 	sts	0x0274, r24
    pwm_channels[PWM_CHANNEL_1].resolution = PWM_FREQ;
     95e:	90 93 7a 02 	sts	0x027A, r25
     962:	80 93 79 02 	sts	0x0279, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     966:	81 ea       	ldi	r24, 0xA1	; 161
     968:	80 93 b0 00 	sts	0x00B0, r24
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 b1 00 	sts	0x00B1, r24

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     972:	84 b1       	in	r24, 0x04	; 4
     974:	8e 60       	ori	r24, 0x0E	; 14
     976:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIN3);
     978:	53 9a       	sbi	0x0a, 3	; 10

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 7f 02 	sts	0x027F, r25
     982:	80 93 7e 02 	sts	0x027E, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     986:	90 93 84 02 	sts	0x0284, r25
     98a:	80 93 83 02 	sts	0x0283, r24
     98e:	08 95       	ret

00000990 <pwm_set_duty>:
}

void pwm_set_duty(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;
     990:	28 2f       	mov	r18, r24
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	e2 0f       	add	r30, r18
     9a0:	f3 1f       	adc	r31, r19
     9a2:	ed 58       	subi	r30, 0x8D	; 141
     9a4:	fd 4f       	sbci	r31, 0xFD	; 253
     9a6:	63 83       	std	Z+3, r22	; 0x03
     9a8:	74 83       	std	Z+4, r23	; 0x04

    switch(pwm_channel)
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	89 f0       	breq	.+34     	; 0x9d0 <pwm_set_duty+0x40>
     9ae:	58 f0       	brcs	.+22     	; 0x9c6 <pwm_set_duty+0x36>
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	19 f0       	breq	.+6      	; 0x9ba <pwm_set_duty+0x2a>
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	21 f0       	breq	.+8      	; 0x9c0 <pwm_set_duty+0x30>
     9b8:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
        OCR1BL = duty;
        break;
    case PWM_CHANNEL_2:
        OCR2A = duty;
     9ba:	60 93 b3 00 	sts	0x00B3, r22
        break;
     9be:	08 95       	ret
    case PWM_CHANNEL_3:
        OCR2B = duty;
     9c0:	60 93 b4 00 	sts	0x00B4, r22
     9c4:	08 95       	ret
    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     9c6:	70 93 89 00 	sts	0x0089, r23
        OCR1AL = duty;
     9ca:	60 93 88 00 	sts	0x0088, r22
        break;
     9ce:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     9d0:	70 93 8b 00 	sts	0x008B, r23
        OCR1BL = duty;
     9d4:	60 93 8a 00 	sts	0x008A, r22
        break;
     9d8:	08 95       	ret

000009da <pwm_get_resolution>:
    }
}

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
    return pwm_channels[channel].resolution;
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	fc 01       	movw	r30, r24
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	e8 0f       	add	r30, r24
     9e8:	f9 1f       	adc	r31, r25
     9ea:	ed 58       	subi	r30, 0x8D	; 141
     9ec:	fd 4f       	sbci	r31, 0xFD	; 253
}
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	92 81       	ldd	r25, Z+2	; 0x02
     9f2:	08 95       	ret

000009f4 <remote_datagram_to_buffer>:

static t_remote_datagram_buffer remote_rcv_buf[DGRAM_RCV_BUFFER_LEN];
static t_remote_datagram_buffer remote_snd_buf[DGRAM_SND_BUFFER_LEN];

e_error remote_datagram_to_buffer(t_remote_datagram *datagram, uint8_t *buffer, uint8_t size)
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <remote_datagram_to_buffer+0x6>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	7a 83       	std	Y+2, r23	; 0x02
     a00:	69 83       	std	Y+1, r22	; 0x01
    if (size >= sizeof(t_remote_datagram))
     a02:	4c 30       	cpi	r20, 0x0C	; 12
     a04:	30 f4       	brcc	.+12     	; 0xa12 <remote_datagram_to_buffer+0x1e>
        return E_OK;
    }
    else
    {
        /* refuse to overflow ! */
        return E_OVERFLOW;
     a06:	83 e0       	ldi	r24, 0x03	; 3
    }
}
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret
e_error remote_datagram_to_buffer(t_remote_datagram *datagram, uint8_t *buffer, uint8_t size)
{
    if (size >= sizeof(t_remote_datagram))
    {
        /* enough large buffer */
        memcpy(&datagram[0], &buffer, sizeof(t_remote_datagram));
     a12:	2c e0       	ldi	r18, 0x0C	; 12
     a14:	fe 01       	movw	r30, r28
     a16:	31 96       	adiw	r30, 0x01	; 1
     a18:	dc 01       	movw	r26, r24
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	2a 95       	dec	r18
     a20:	e1 f7       	brne	.-8      	; 0xa1a <remote_datagram_to_buffer+0x26>
        return E_OK;
     a22:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        /* refuse to overflow ! */
        return E_OVERFLOW;
    }
}
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <remote_buffer_alloc>:

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
     a2e:	db 01       	movw	r26, r22
    uint8_t i;
    *datagram_buf = NULL;
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	1c 92       	st	X, r1
     a34:	1e 92       	st	-X, r1
     a36:	fc 01       	movw	r30, r24
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     a38:	80 e0       	ldi	r24, 0x00	; 0
    {
        if (static_buffer[i].timestamp == 0U)
     a3a:	44 8d       	ldd	r20, Z+28	; 0x1c
     a3c:	55 8d       	ldd	r21, Z+29	; 0x1d
     a3e:	66 8d       	ldd	r22, Z+30	; 0x1e
     a40:	77 8d       	ldd	r23, Z+31	; 0x1f
     a42:	45 2b       	or	r20, r21
     a44:	46 2b       	or	r20, r22
     a46:	47 2b       	or	r20, r23
     a48:	19 f4       	brne	.+6      	; 0xa50 <remote_buffer_alloc+0x22>
        {
            *datagram_buf = &(static_buffer[i]);
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	fc 93       	st	X, r31
     a4e:	ee 93       	st	-X, r30

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	b0 96       	adiw	r30, 0x20	; 32
     a54:	85 30       	cpi	r24, 0x05	; 5
     a56:	89 f7       	brne	.-30     	; 0xa3a <remote_buffer_alloc+0xc>
        if (static_buffer[i].timestamp == 0U)
        {
            *datagram_buf = &(static_buffer[i]);
        }
    }
}
     a58:	08 95       	ret

00000a5a <remote_receive_buffer_alloc>:

void remote_receive_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
     a5a:	dc 01       	movw	r26, r24
}

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	1c 92       	st	X, r1
     a60:	1e 92       	st	-X, r1
     a62:	e7 e2       	ldi	r30, 0x27	; 39
     a64:	f3 e0       	ldi	r31, 0x03	; 3
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
    {
        if (static_buffer[i].timestamp == 0U)
     a66:	44 8d       	ldd	r20, Z+28	; 0x1c
     a68:	55 8d       	ldd	r21, Z+29	; 0x1d
     a6a:	66 8d       	ldd	r22, Z+30	; 0x1e
     a6c:	77 8d       	ldd	r23, Z+31	; 0x1f
     a6e:	45 2b       	or	r20, r21
     a70:	46 2b       	or	r20, r22
     a72:	47 2b       	or	r20, r23
     a74:	19 f4       	brne	.+6      	; 0xa7c <remote_receive_buffer_alloc+0x22>
        {
            *datagram_buf = &(static_buffer[i]);
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	fc 93       	st	X, r31
     a7a:	ee 93       	st	-X, r30
     a7c:	b0 96       	adiw	r30, 0x20	; 32

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	e7 3c       	cpi	r30, 0xC7	; 199
     a82:	f8 07       	cpc	r31, r24
     a84:	81 f7       	brne	.-32     	; 0xa66 <remote_receive_buffer_alloc+0xc>

void remote_receive_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
    /* wrapper */
    remote_buffer_alloc(remote_rcv_buf, datagram_buf);
}
     a86:	08 95       	ret

00000a88 <remote_send_buffer_alloc>:

void remote_send_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
     a88:	dc 01       	movw	r26, r24
}

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
     a8a:	11 96       	adiw	r26, 0x01	; 1
     a8c:	1c 92       	st	X, r1
     a8e:	1e 92       	st	-X, r1
     a90:	e7 e8       	ldi	r30, 0x87	; 135
     a92:	f2 e0       	ldi	r31, 0x02	; 2
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
    {
        if (static_buffer[i].timestamp == 0U)
     a94:	44 8d       	ldd	r20, Z+28	; 0x1c
     a96:	55 8d       	ldd	r21, Z+29	; 0x1d
     a98:	66 8d       	ldd	r22, Z+30	; 0x1e
     a9a:	77 8d       	ldd	r23, Z+31	; 0x1f
     a9c:	45 2b       	or	r20, r21
     a9e:	46 2b       	or	r20, r22
     aa0:	47 2b       	or	r20, r23
     aa2:	19 f4       	brne	.+6      	; 0xaaa <remote_send_buffer_alloc+0x22>
        {
            *datagram_buf = &(static_buffer[i]);
     aa4:	11 96       	adiw	r26, 0x01	; 1
     aa6:	fc 93       	st	X, r31
     aa8:	ee 93       	st	-X, r30
     aaa:	b0 96       	adiw	r30, 0x20	; 32

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	e7 32       	cpi	r30, 0x27	; 39
     ab0:	f8 07       	cpc	r31, r24
     ab2:	81 f7       	brne	.-32     	; 0xa94 <remote_send_buffer_alloc+0xc>

void remote_send_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
    /* wrapper */
    remote_buffer_alloc(remote_snd_buf, datagram_buf);
}
     ab4:	08 95       	ret

00000ab6 <remote_receive_buffer_get_oldest>:

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
     aba:	fc 01       	movw	r30, r24
     abc:	11 82       	std	Z+1, r1	; 0x01
     abe:	10 82       	st	Z, r1
     ac0:	e3 e4       	ldi	r30, 0x43	; 67
     ac2:	f3 e0       	ldi	r31, 0x03	; 3

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
     ac4:	0f ef       	ldi	r16, 0xFF	; 255
     ac6:	1f ef       	ldi	r17, 0xFF	; 255
     ac8:	98 01       	movw	r18, r16
}

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
     aca:	bf ef       	ldi	r27, 0xFF	; 255
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     acc:	a0 e0       	ldi	r26, 0x00	; 0
    {
        if ((remote_rcv_buf[i].timestamp > 0U) && (remote_rcv_buf[i].timestamp < oldest))
     ace:	40 81       	ld	r20, Z
     ad0:	51 81       	ldd	r21, Z+1	; 0x01
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	41 15       	cp	r20, r1
     ad8:	51 05       	cpc	r21, r1
     ada:	61 05       	cpc	r22, r1
     adc:	71 05       	cpc	r23, r1
     ade:	41 f0       	breq	.+16     	; 0xaf0 <remote_receive_buffer_get_oldest+0x3a>
     ae0:	40 17       	cp	r20, r16
     ae2:	51 07       	cpc	r21, r17
     ae4:	62 07       	cpc	r22, r18
     ae6:	73 07       	cpc	r23, r19
     ae8:	18 f4       	brcc	.+6      	; 0xaf0 <remote_receive_buffer_get_oldest+0x3a>
     aea:	8a 01       	movw	r16, r20
     aec:	9b 01       	movw	r18, r22
     aee:	ba 2f       	mov	r27, r26
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     af0:	af 5f       	subi	r26, 0xFF	; 255
     af2:	b0 96       	adiw	r30, 0x20	; 32
     af4:	a5 30       	cpi	r26, 0x05	; 5
     af6:	59 f7       	brne	.-42     	; 0xace <remote_receive_buffer_get_oldest+0x18>
            id = i;
            oldest = remote_rcv_buf[i].timestamp;
        }
    }

    if (id != 0xFF) *datagram_buf = &(remote_rcv_buf[id]);
     af8:	bf 3f       	cpi	r27, 0xFF	; 255
     afa:	49 f0       	breq	.+18     	; 0xb0e <remote_receive_buffer_get_oldest+0x58>
     afc:	f0 e2       	ldi	r31, 0x20	; 32
     afe:	bf 9f       	mul	r27, r31
     b00:	90 01       	movw	r18, r0
     b02:	11 24       	eor	r1, r1
     b04:	29 5d       	subi	r18, 0xD9	; 217
     b06:	3c 4f       	sbci	r19, 0xFC	; 252
     b08:	fc 01       	movw	r30, r24
     b0a:	31 83       	std	Z+1, r19	; 0x01
     b0c:	20 83       	st	Z, r18
}
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <remote_receive_buffer_get>:

bool remote_receive_buffer_get(t_remote_datagram_buffer *datagram)
{
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	e3 e4       	ldi	r30, 0x43	; 67
     b1e:	f3 e0       	ldi	r31, 0x03	; 3
}

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
     b20:	cf ef       	ldi	r28, 0xFF	; 255
    uint32_t oldest = 0xFFFFFFFFU;
     b22:	0f ef       	ldi	r16, 0xFF	; 255
     b24:	1f ef       	ldi	r17, 0xFF	; 255
     b26:	98 01       	movw	r18, r16
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     b28:	a0 e0       	ldi	r26, 0x00	; 0
    {
        if ((remote_rcv_buf[i].timestamp > 0U) && (remote_rcv_buf[i].timestamp < oldest))
     b2a:	40 81       	ld	r20, Z
     b2c:	51 81       	ldd	r21, Z+1	; 0x01
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	41 f0       	breq	.+16     	; 0xb4c <remote_receive_buffer_get+0x38>
     b3c:	40 17       	cp	r20, r16
     b3e:	51 07       	cpc	r21, r17
     b40:	62 07       	cpc	r22, r18
     b42:	73 07       	cpc	r23, r19
     b44:	18 f4       	brcc	.+6      	; 0xb4c <remote_receive_buffer_get+0x38>
     b46:	8a 01       	movw	r16, r20
     b48:	9b 01       	movw	r18, r22
     b4a:	ca 2f       	mov	r28, r26
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     b4c:	af 5f       	subi	r26, 0xFF	; 255
     b4e:	b0 96       	adiw	r30, 0x20	; 32
     b50:	a5 30       	cpi	r26, 0x05	; 5
     b52:	59 f7       	brne	.-42     	; 0xb2a <remote_receive_buffer_get+0x16>
            id = i;
            oldest = remote_rcv_buf[i].timestamp;
        }
    }

    if (id != 0xFF) *datagram_buf = &(remote_rcv_buf[id]);
     b54:	cf 3f       	cpi	r28, 0xFF	; 255
     b56:	e9 f0       	breq	.+58     	; 0xb92 <remote_receive_buffer_get+0x7e>
     b58:	20 e2       	ldi	r18, 0x20	; 32
     b5a:	c2 9f       	mul	r28, r18
     b5c:	e0 01       	movw	r28, r0
     b5e:	11 24       	eor	r1, r1
     b60:	c9 5d       	subi	r28, 0xD9	; 217
     b62:	dc 4f       	sbci	r29, 0xFC	; 252
bool remote_receive_buffer_get(t_remote_datagram_buffer *datagram)
{
    t_remote_datagram_buffer *buf = NULL;
    remote_receive_buffer_get_oldest(&buf);

    if (buf != NULL && datagram != NULL)
     b64:	20 97       	sbiw	r28, 0x00	; 0
     b66:	a9 f0       	breq	.+42     	; 0xb92 <remote_receive_buffer_get+0x7e>
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	99 f0       	breq	.+38     	; 0xb92 <remote_receive_buffer_get+0x7e>
    {
        /* get a copy */
        (void)memcpy(datagram, buf, sizeof(t_remote_datagram_buffer));
     b6c:	20 e2       	ldi	r18, 0x20	; 32
     b6e:	fe 01       	movw	r30, r28
     b70:	dc 01       	movw	r26, r24
     b72:	01 90       	ld	r0, Z+
     b74:	0d 92       	st	X+, r0
     b76:	2a 95       	dec	r18
     b78:	e1 f7       	brne	.-8      	; 0xb72 <remote_receive_buffer_get+0x5e>
        /* immediately reset timestamp
         * CAUTION: critical section! */
        REMOTE_ENTER_CRITICAL_SECTION;
     b7a:	f8 94       	cli
        buf->timestamp = 0U;
     b7c:	1c 8e       	std	Y+28, r1	; 0x1c
     b7e:	1d 8e       	std	Y+29, r1	; 0x1d
     b80:	1e 8e       	std	Y+30, r1	; 0x1e
     b82:	1f 8e       	std	Y+31, r1	; 0x1f
        REMOTE_EXIT_CRITICAL_SECTION;
     b84:	78 94       	sei
        return true;
     b86:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return false;
    }
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	08 95       	ret
        REMOTE_EXIT_CRITICAL_SECTION;
        return true;
    }
    else
    {
        return false;
     b92:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	08 95       	ret

00000b9e <remote_send_buffer_send>:

void remote_send_buffer_send(t_remote_datagram_buffer *rem_buf)
{
    REMOTE_ENTER_CRITICAL_SECTION;
     b9e:	f8 94       	cli

    /* mark as sendable */
    rem_buf->timestamp = g_timestamp;
     ba0:	40 91 d6 03 	lds	r20, 0x03D6
     ba4:	50 91 d7 03 	lds	r21, 0x03D7
     ba8:	60 91 d8 03 	lds	r22, 0x03D8
     bac:	70 91 d9 03 	lds	r23, 0x03D9
     bb0:	fc 01       	movw	r30, r24
     bb2:	44 8f       	std	Z+28, r20	; 0x1c
     bb4:	55 8f       	std	Z+29, r21	; 0x1d
     bb6:	66 8f       	std	Z+30, r22	; 0x1e
     bb8:	77 8f       	std	Z+31, r23	; 0x1f

    REMOTE_EXIT_CRITICAL_SECTION;
     bba:	78 94       	sei
     bbc:	08 95       	ret

00000bbe <remote_buffer_to_datagram>:
}

e_error remote_buffer_to_datagram(uint8_t input)
{
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	98 2f       	mov	r25, r24

    e_error err = E_OK;    /* save the error code or so */

    /* Run the state machine for each received byte */
    if (g_timestamp > remote_rcv_sm.timeout)
     bc4:	40 91 d6 03 	lds	r20, 0x03D6
     bc8:	50 91 d7 03 	lds	r21, 0x03D7
     bcc:	60 91 d8 03 	lds	r22, 0x03D8
     bd0:	70 91 d9 03 	lds	r23, 0x03D9
     bd4:	00 91 c9 03 	lds	r16, 0x03C9
     bd8:	10 91 ca 03 	lds	r17, 0x03CA
     bdc:	20 91 cb 03 	lds	r18, 0x03CB
     be0:	30 91 cc 03 	lds	r19, 0x03CC
     be4:	04 17       	cp	r16, r20
     be6:	15 07       	cpc	r17, r21
     be8:	26 07       	cpc	r18, r22
     bea:	37 07       	cpc	r19, r23
     bec:	00 f1       	brcs	.+64     	; 0xc2e <remote_buffer_to_datagram+0x70>
     bee:	e0 91 c7 03 	lds	r30, 0x03C7
        remote_rcv_sm.state = DGRAM_RCV_MAGIC_START;
        remote_rcv_sm.state_prev = DGRAM_RCV_MAGIC_END;   /* force state change to reuse code */
        err = E_TIMEOUT;
    }

    if (remote_rcv_sm.state != remote_rcv_sm.state_prev)
     bf2:	80 91 c8 03 	lds	r24, 0x03C8
     bf6:	e8 13       	cpse	r30, r24
     bf8:	5f c0       	rjmp	.+190    	; 0xcb8 <remote_buffer_to_datagram+0xfa>
}

e_error remote_buffer_to_datagram(uint8_t input)
{

    e_error err = E_OK;    /* save the error code or so */
     bfa:	80 e0       	ldi	r24, 0x00	; 0
        remote_rcv_sm.buf_index = 0;
        remote_rcv_sm.timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
        remote_rcv_sm.state_prev = remote_rcv_sm.state;
    }

    switch(remote_rcv_sm.state)
     bfc:	e1 30       	cpi	r30, 0x01	; 1
     bfe:	b9 f5       	brne	.+110    	; 0xc6e <remote_buffer_to_datagram+0xb0>
        case DGRAM_RCV_HEADER:

            /* Use pointer arithmetic to optimize the ISR call:
             * Pick the start address, sum it up with the buf index
             * and finally set the value at the location to the input */
            *((uint8_t*)&(DATAGRAM_HEADER_START(remote_rcv_sm.datagram_buf->datagram)) + remote_rcv_sm.buf_index) = input;
     c00:	20 91 d1 03 	lds	r18, 0x03D1
     c04:	e0 91 d2 03 	lds	r30, 0x03D2
     c08:	f0 91 d3 03 	lds	r31, 0x03D3
     c0c:	e2 0f       	add	r30, r18
     c0e:	f1 1d       	adc	r31, r1
     c10:	94 83       	std	Z+4, r25	; 0x04
            remote_rcv_sm.buf_index++;
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	92 0f       	add	r25, r18
     c16:	90 93 d1 03 	sts	0x03D1, r25

            if (remote_rcv_sm.buf_index >= DATAGRAM_HEADER_SIZE)
     c1a:	94 30       	cpi	r25, 0x04	; 4
     c1c:	28 f0       	brcs	.+10     	; 0xc28 <remote_buffer_to_datagram+0x6a>
            {
                /* header completely received */
                remote_rcv_sm.state = DGRAM_RCV_MAGIC_END;
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	90 93 c7 03 	sts	0x03C7, r25
                remote_rcv_sm.buf_index = 0;
     c24:	10 92 d1 03 	sts	0x03D1, r1
            /* Fatal error */
            break;
    }
    return err;

}
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

    /* Run the state machine for each received byte */
    if (g_timestamp > remote_rcv_sm.timeout)
    {
        /* timed out - restart the state machine */
        remote_rcv_sm.state = DGRAM_RCV_MAGIC_START;
     c2e:	10 92 c7 03 	sts	0x03C7, r1
     c32:	e0 e0       	ldi	r30, 0x00	; 0
        remote_rcv_sm.state_prev = DGRAM_RCV_MAGIC_END;   /* force state change to reuse code */
        err = E_TIMEOUT;
     c34:	84 e0       	ldi	r24, 0x04	; 4
    }

    if (remote_rcv_sm.state != remote_rcv_sm.state_prev)
    {
        /* reset timeouts and indexes at state change */
        remote_rcv_sm.temp = 0;
     c36:	10 92 cd 03 	sts	0x03CD, r1
     c3a:	10 92 ce 03 	sts	0x03CE, r1
     c3e:	10 92 cf 03 	sts	0x03CF, r1
     c42:	10 92 d0 03 	sts	0x03D0, r1
        remote_rcv_sm.buf_index = 0;
     c46:	10 92 d1 03 	sts	0x03D1, r1
        remote_rcv_sm.timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     c4a:	8a 01       	movw	r16, r20
     c4c:	9b 01       	movw	r18, r22
     c4e:	00 5c       	subi	r16, 0xC0	; 192
     c50:	1d 4b       	sbci	r17, 0xBD	; 189
     c52:	20 4f       	sbci	r18, 0xF0	; 240
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	00 93 c9 03 	sts	0x03C9, r16
     c5a:	10 93 ca 03 	sts	0x03CA, r17
     c5e:	20 93 cb 03 	sts	0x03CB, r18
     c62:	30 93 cc 03 	sts	0x03CC, r19
        remote_rcv_sm.state_prev = remote_rcv_sm.state;
     c66:	e0 93 c8 03 	sts	0x03C8, r30
    }

    switch(remote_rcv_sm.state)
     c6a:	e1 30       	cpi	r30, 0x01	; 1
     c6c:	49 f2       	breq	.-110    	; 0xc00 <remote_buffer_to_datagram+0x42>
     c6e:	e1 30       	cpi	r30, 0x01	; 1
     c70:	08 f4       	brcc	.+2      	; 0xc74 <remote_buffer_to_datagram+0xb6>
     c72:	43 c0       	rjmp	.+134    	; 0xcfa <remote_buffer_to_datagram+0x13c>
     c74:	e2 30       	cpi	r30, 0x02	; 2
     c76:	11 f1       	breq	.+68     	; 0xcbc <remote_buffer_to_datagram+0xfe>
     c78:	e3 30       	cpi	r30, 0x03	; 3
     c7a:	b1 f6       	brne	.-84     	; 0xc28 <remote_buffer_to_datagram+0x6a>
            }

            break;
        case DGRAM_RCV_DATA:

            remote_rcv_sm.datagram_buf->data[remote_rcv_sm.buf_index] = input;
     c7c:	e0 91 d2 03 	lds	r30, 0x03D2
     c80:	f0 91 d3 03 	lds	r31, 0x03D3
     c84:	20 91 d1 03 	lds	r18, 0x03D1
     c88:	df 01       	movw	r26, r30
     c8a:	a2 0f       	add	r26, r18
     c8c:	b1 1d       	adc	r27, r1
     c8e:	1c 96       	adiw	r26, 0x0c	; 12
     c90:	9c 93       	st	X, r25
            remote_rcv_sm.buf_index++;
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	92 0f       	add	r25, r18
     c96:	90 93 d1 03 	sts	0x03D1, r25
            if ((remote_rcv_sm.buf_index >= remote_rcv_sm.datagram_buf->datagram.len) || (remote_rcv_sm.buf_index >= DGRAM_RCV_DATA_MAX))
     c9a:	25 81       	ldd	r18, Z+5	; 0x05
     c9c:	92 17       	cp	r25, r18
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <remote_buffer_to_datagram+0xe4>
     ca0:	55 c0       	rjmp	.+170    	; 0xd4c <remote_buffer_to_datagram+0x18e>
            {
                /* data transfer completed */
                remote_rcv_sm.state = DGRAM_RCV_MAGIC_START;
     ca2:	10 92 c7 03 	sts	0x03C7, r1
                /* set timestamp to indicate buffer slot not free and to give an order */
                remote_rcv_sm.datagram_buf->timestamp = g_timestamp;
     ca6:	44 8f       	std	Z+28, r20	; 0x1c
     ca8:	55 8f       	std	Z+29, r21	; 0x1d
     caa:	66 8f       	std	Z+30, r22	; 0x1e
     cac:	77 8f       	std	Z+31, r23	; 0x1f
/*                printf("*%d %d\n", buf_index, datagram_buf->datagram.len);    */
                remote_rcv_sm.buf_index = 0;
     cae:	10 92 d1 03 	sts	0x03D1, r1
            /* Fatal error */
            break;
    }
    return err;

}
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret
}

e_error remote_buffer_to_datagram(uint8_t input)
{

    e_error err = E_OK;    /* save the error code or so */
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	bd cf       	rjmp	.-134    	; 0xc36 <remote_buffer_to_datagram+0x78>

            break;
        case DGRAM_RCV_MAGIC_END:
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
     cbc:	40 91 cd 03 	lds	r20, 0x03CD
     cc0:	50 91 ce 03 	lds	r21, 0x03CE
     cc4:	60 91 cf 03 	lds	r22, 0x03CF
     cc8:	70 91 d0 03 	lds	r23, 0x03D0
     ccc:	76 2f       	mov	r23, r22
     cce:	65 2f       	mov	r22, r21
     cd0:	54 2f       	mov	r21, r20
     cd2:	44 27       	eor	r20, r20
            remote_rcv_sm.temp |= input;
     cd4:	49 2b       	or	r20, r25
     cd6:	40 93 cd 03 	sts	0x03CD, r20
     cda:	50 93 ce 03 	sts	0x03CE, r21
     cde:	60 93 cf 03 	sts	0x03CF, r22
     ce2:	70 93 d0 03 	sts	0x03D0, r23

            err = E_OK;

            if (remote_rcv_sm.temp == DGRAM_MAGIC_END)
     ce6:	4f 3e       	cpi	r20, 0xEF	; 239
     ce8:	5e 4b       	sbci	r21, 0xBE	; 190
     cea:	6d 4a       	sbci	r22, 0xAD	; 173
     cec:	7e 4d       	sbci	r23, 0xDE	; 222
     cee:	09 f4       	brne	.+2      	; 0xcf2 <remote_buffer_to_datagram+0x134>
     cf0:	85 c0       	rjmp	.+266    	; 0xdfc <remote_buffer_to_datagram+0x23e>
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            remote_rcv_sm.temp |= input;

            err = E_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
            /* Fatal error */
            break;
    }
    return err;

}
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret
    switch(remote_rcv_sm.state)
    {
        case DGRAM_RCV_MAGIC_START:
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
     cfa:	00 91 cd 03 	lds	r16, 0x03CD
     cfe:	10 91 ce 03 	lds	r17, 0x03CE
     d02:	20 91 cf 03 	lds	r18, 0x03CF
     d06:	30 91 d0 03 	lds	r19, 0x03D0
     d0a:	32 2f       	mov	r19, r18
     d0c:	21 2f       	mov	r18, r17
     d0e:	10 2f       	mov	r17, r16
     d10:	00 27       	eor	r16, r16
            remote_rcv_sm.temp |= input;
     d12:	09 2b       	or	r16, r25
     d14:	00 93 cd 03 	sts	0x03CD, r16
     d18:	10 93 ce 03 	sts	0x03CE, r17
     d1c:	20 93 cf 03 	sts	0x03CF, r18
     d20:	30 93 d0 03 	sts	0x03D0, r19

            if (remote_rcv_sm.temp == DGRAM_MAGIC_START)
     d24:	01 15       	cp	r16, r1
     d26:	1e 4e       	sbci	r17, 0xEE	; 238
     d28:	2f 4f       	sbci	r18, 0xFF	; 255
     d2a:	30 4c       	sbci	r19, 0xC0	; 192
     d2c:	99 f0       	breq	.+38     	; 0xd54 <remote_buffer_to_datagram+0x196>
                /* Invalid magic or out of sync */
                /* Stay listening for the magic sequence */
            }

            /* Never timeout in this state */
            remote_rcv_sm.timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     d2e:	40 5c       	subi	r20, 0xC0	; 192
     d30:	5d 4b       	sbci	r21, 0xBD	; 189
     d32:	60 4f       	sbci	r22, 0xF0	; 240
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	40 93 c9 03 	sts	0x03C9, r20
     d3a:	50 93 ca 03 	sts	0x03CA, r21
     d3e:	60 93 cb 03 	sts	0x03CB, r22
     d42:	70 93 cc 03 	sts	0x03CC, r23
            /* Fatal error */
            break;
    }
    return err;

}
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret
            break;
        case DGRAM_RCV_DATA:

            remote_rcv_sm.datagram_buf->data[remote_rcv_sm.buf_index] = input;
            remote_rcv_sm.buf_index++;
            if ((remote_rcv_sm.buf_index >= remote_rcv_sm.datagram_buf->datagram.len) || (remote_rcv_sm.buf_index >= DGRAM_RCV_DATA_MAX))
     d4c:	90 31       	cpi	r25, 0x10	; 16
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <remote_buffer_to_datagram+0x194>
     d50:	a8 cf       	rjmp	.-176    	; 0xca2 <remote_buffer_to_datagram+0xe4>
     d52:	6a cf       	rjmp	.-300    	; 0xc28 <remote_buffer_to_datagram+0x6a>
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
    {
        if (static_buffer[i].timestamp == 0U)
     d54:	00 91 43 03 	lds	r16, 0x0343
     d58:	10 91 44 03 	lds	r17, 0x0344
     d5c:	20 91 45 03 	lds	r18, 0x0345
     d60:	30 91 46 03 	lds	r19, 0x0346
     d64:	01 2b       	or	r16, r17
     d66:	02 2b       	or	r16, r18
     d68:	03 2b       	or	r16, r19
     d6a:	09 f4       	brne	.+2      	; 0xd6e <remote_buffer_to_datagram+0x1b0>
     d6c:	4c c0       	rjmp	.+152    	; 0xe06 <remote_buffer_to_datagram+0x248>
     d6e:	e0 e0       	ldi	r30, 0x00	; 0
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	00 91 63 03 	lds	r16, 0x0363
     d76:	10 91 64 03 	lds	r17, 0x0364
     d7a:	20 91 65 03 	lds	r18, 0x0365
     d7e:	30 91 66 03 	lds	r19, 0x0366
     d82:	01 2b       	or	r16, r17
     d84:	02 2b       	or	r16, r18
     d86:	03 2b       	or	r16, r19
     d88:	11 f4       	brne	.+4      	; 0xd8e <remote_buffer_to_datagram+0x1d0>
     d8a:	e7 e4       	ldi	r30, 0x47	; 71
     d8c:	f3 e0       	ldi	r31, 0x03	; 3
     d8e:	00 91 83 03 	lds	r16, 0x0383
     d92:	10 91 84 03 	lds	r17, 0x0384
     d96:	20 91 85 03 	lds	r18, 0x0385
     d9a:	30 91 86 03 	lds	r19, 0x0386
     d9e:	01 2b       	or	r16, r17
     da0:	02 2b       	or	r16, r18
     da2:	03 2b       	or	r16, r19
     da4:	11 f4       	brne	.+4      	; 0xdaa <remote_buffer_to_datagram+0x1ec>
     da6:	e7 e6       	ldi	r30, 0x67	; 103
     da8:	f3 e0       	ldi	r31, 0x03	; 3
     daa:	00 91 a3 03 	lds	r16, 0x03A3
     dae:	10 91 a4 03 	lds	r17, 0x03A4
     db2:	20 91 a5 03 	lds	r18, 0x03A5
     db6:	30 91 a6 03 	lds	r19, 0x03A6
     dba:	01 2b       	or	r16, r17
     dbc:	02 2b       	or	r16, r18
     dbe:	03 2b       	or	r16, r19
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <remote_buffer_to_datagram+0x208>
     dc2:	e7 e8       	ldi	r30, 0x87	; 135
     dc4:	f3 e0       	ldi	r31, 0x03	; 3
     dc6:	00 91 c3 03 	lds	r16, 0x03C3
     dca:	10 91 c4 03 	lds	r17, 0x03C4
     dce:	20 91 c5 03 	lds	r18, 0x03C5
     dd2:	30 91 c6 03 	lds	r19, 0x03C6
     dd6:	01 2b       	or	r16, r17
     dd8:	02 2b       	or	r16, r18
     dda:	03 2b       	or	r16, r19
     ddc:	11 f4       	brne	.+4      	; 0xde2 <remote_buffer_to_datagram+0x224>
     dde:	e7 ea       	ldi	r30, 0xA7	; 167
     de0:	f3 e0       	ldi	r31, 0x03	; 3
     de2:	f0 93 d3 03 	sts	0x03D3, r31
     de6:	e0 93 d2 03 	sts	0x03D2, r30

            if (remote_rcv_sm.temp == DGRAM_MAGIC_START)
            {
                /* new datagram is incoming: allocate a buffer slot, if possible */
                remote_receive_buffer_alloc(&remote_rcv_sm.datagram_buf);
                if (remote_rcv_sm.datagram_buf != NULL)
     dea:	30 97       	sbiw	r30, 0x00	; 0
     dec:	79 f0       	breq	.+30     	; 0xe0c <remote_buffer_to_datagram+0x24e>
                {
                    /* clear some fields */
                    remote_rcv_sm.datagram_buf->datagram.crc = 0;
     dee:	17 82       	std	Z+7, r1	; 0x07
     df0:	16 82       	std	Z+6, r1	; 0x06
                    remote_rcv_sm.datagram_buf->datagram.len = 0;
     df2:	15 82       	std	Z+5, r1	; 0x05
                    /* alright, datagram header synchronized! */
                    remote_rcv_sm.state = DGRAM_RCV_HEADER;
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	90 93 c7 03 	sts	0x03C7, r25
     dfa:	99 cf       	rjmp	.-206    	; 0xd2e <remote_buffer_to_datagram+0x170>
            err = E_OK;

            if (remote_rcv_sm.temp == DGRAM_MAGIC_END)
            {
                /* alright, datagram header synchronized! */
                remote_rcv_sm.state = DGRAM_RCV_DATA;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	80 93 c7 03 	sts	0x03C7, r24
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            remote_rcv_sm.temp |= input;

            err = E_OK;
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	11 cf       	rjmp	.-478    	; 0xc28 <remote_buffer_to_datagram+0x6a>
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
    {
        if (static_buffer[i].timestamp == 0U)
     e06:	e7 e2       	ldi	r30, 0x27	; 39
     e08:	f3 e0       	ldi	r31, 0x03	; 3
     e0a:	b3 cf       	rjmp	.-154    	; 0xd72 <remote_buffer_to_datagram+0x1b4>
                    remote_rcv_sm.state = DGRAM_RCV_HEADER;
                }
                else
                {
                    /* Overflow! */
                    err = E_OVERFLOW;
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	8f cf       	rjmp	.-226    	; 0xd2e <remote_buffer_to_datagram+0x170>

00000e10 <remote_calc_crc_buffer_and_compare>:
    return err;

}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < len; i++)
     e14:	c6 2f       	mov	r28, r22
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	20 97       	sbiw	r28, 0x00	; 0
     e1a:	09 f4       	brne	.+2      	; 0xe1e <remote_calc_crc_buffer_and_compare+0xe>
     e1c:	34 c0       	rjmp	.+104    	; 0xe86 <remote_calc_crc_buffer_and_compare+0x76>
     e1e:	dc 01       	movw	r26, r24
}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t i;
    uint16_t crc = 0;
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0

    for (i = 0; i < len; i++)
     e24:	e0 e0       	ldi	r30, 0x00	; 0
     e26:	f0 e0       	ldi	r31, 0x00	; 0
    {
        crc = _crc16_update(crc, buffer[i]);
     e28:	7d 91       	ld	r23, X+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     e2a:	87 27       	eor	r24, r23
     e2c:	78 2f       	mov	r23, r24
     e2e:	72 95       	swap	r23
     e30:	78 27       	eor	r23, r24
     e32:	07 2e       	mov	r0, r23
     e34:	76 95       	lsr	r23
     e36:	76 95       	lsr	r23
     e38:	70 25       	eor	r23, r0
     e3a:	07 2e       	mov	r0, r23
     e3c:	76 95       	lsr	r23
     e3e:	70 25       	eor	r23, r0
     e40:	77 70       	andi	r23, 0x07	; 7
     e42:	08 2e       	mov	r0, r24
     e44:	89 2f       	mov	r24, r25
     e46:	76 95       	lsr	r23
     e48:	07 94       	ror	r0
     e4a:	77 95       	ror	r23
     e4c:	90 2d       	mov	r25, r0
     e4e:	87 27       	eor	r24, r23
     e50:	06 94       	lsr	r0
     e52:	77 95       	ror	r23
     e54:	90 25       	eor	r25, r0
     e56:	87 27       	eor	r24, r23
bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < len; i++)
     e58:	31 96       	adiw	r30, 0x01	; 1
     e5a:	ec 17       	cp	r30, r28
     e5c:	fd 07       	cpc	r31, r29
     e5e:	20 f3       	brcs	.-56     	; 0xe28 <remote_calc_crc_buffer_and_compare+0x18>
    {
        crc = _crc16_update(crc, buffer[i]);
    }

    if (calc_crc != NULL) *calc_crc = crc;
     e60:	21 15       	cp	r18, r1
     e62:	31 05       	cpc	r19, r1
     e64:	19 f0       	breq	.+6      	; 0xe6c <remote_calc_crc_buffer_and_compare+0x5c>
     e66:	f9 01       	movw	r30, r18
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24

    if ((crc != expected_crc) || (len == 0U))
     e6c:	84 17       	cp	r24, r20
     e6e:	95 07       	cpc	r25, r21
     e70:	21 f0       	breq	.+8      	; 0xe7a <remote_calc_crc_buffer_and_compare+0x6a>
    {
        /* CRC is unexpected or length is zero -> something failed */
        return false;
     e72:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return true;
    }
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret
        crc = _crc16_update(crc, buffer[i]);
    }

    if (calc_crc != NULL) *calc_crc = crc;

    if ((crc != expected_crc) || (len == 0U))
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	66 23       	and	r22, r22
     e7e:	c9 f3       	breq	.-14     	; 0xe72 <remote_calc_crc_buffer_and_compare+0x62>
    }
    else
    {
        return true;
    }
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret
}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t i;
    uint16_t crc = 0;
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	ea cf       	rjmp	.-44     	; 0xe60 <remote_calc_crc_buffer_and_compare+0x50>

00000e8c <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     e8c:	1f 92       	push	r1
     e8e:	0f 92       	push	r0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
    uart_putstring("no ISR!\r\n");
     e96:	8f eb       	ldi	r24, 0xBF	; 191
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart_putstring>
     e9e:	ff cf       	rjmp	.-2      	; 0xe9e <__vector_default+0x12>

00000ea0 <system_fatal>:
    for(;;);
}

void system_fatal(char *str)
{
    uart_putstring(str);
     ea0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart_putstring>
     ea4:	ff cf       	rjmp	.-2      	; 0xea4 <system_fatal+0x4>

00000ea6 <system_reset>:

void system_reset(void)
{
    /* start at zero! */
    void (*start)(void) = 0;
    start();
     ea6:	e0 e0       	ldi	r30, 0x00	; 0
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	09 94       	ijmp

00000eac <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     eac:	84 b7       	in	r24, 0x34	; 52

    /* Reset state for the next proper detection */
    MCUSR = 0;
     eae:	14 be       	out	0x34, r1	; 52

    return t;
}
     eb0:	08 95       	ret

00000eb2 <timer_init>:
 */
void timer_init(void)
{

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	84 bd       	out	0x24, r24	; 36
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     eb6:	85 bd       	out	0x25, r24	; 37

    /* initialize counter */
    OCR0A = 200;
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	87 bd       	out	0x27, r24	; 39

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     ebc:	ee e6       	ldi	r30, 0x6E	; 110
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	80 83       	st	Z, r24
     ec6:	08 95       	ret

00000ec8 <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
     eda:	80 91 d6 03 	lds	r24, 0x03D6
     ede:	90 91 d7 03 	lds	r25, 0x03D7
     ee2:	a0 91 d8 03 	lds	r26, 0x03D8
     ee6:	b0 91 d9 03 	lds	r27, 0x03D9
     eea:	8c 59       	subi	r24, 0x9C	; 156
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	af 4f       	sbci	r26, 0xFF	; 255
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	80 93 d6 03 	sts	0x03D6, r24
     ef6:	90 93 d7 03 	sts	0x03D7, r25
     efa:	a0 93 d8 03 	sts	0x03D8, r26
     efe:	b0 93 d9 03 	sts	0x03D9, r27
}
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <uart_putchar>:
    uart_cb = cb;
}

void uart_putchar(char c, FILE *stream)
{
    loop_until_bit_is_set(UCSRA, UDRE);
     f14:	90 91 c0 00 	lds	r25, 0x00C0
     f18:	95 ff       	sbrs	r25, 5
     f1a:	fc cf       	rjmp	.-8      	; 0xf14 <uart_putchar>
    UDR = c;
     f1c:	80 93 c6 00 	sts	0x00C6, r24
     f20:	08 95       	ret

00000f22 <uart_getchar>:
    }
}

char uart_getchar(FILE *stream)
{
    loop_until_bit_is_set(UCSRA, RXC);
     f22:	80 91 c0 00 	lds	r24, 0x00C0
     f26:	87 ff       	sbrs	r24, 7
     f28:	fc cf       	rjmp	.-8      	; 0xf22 <uart_getchar>
    return UDR;
     f2a:	80 91 c6 00 	lds	r24, 0x00C6
}
     f2e:	08 95       	ret

00000f30 <uart_init>:

void uart_init(void)
{

    /* Enable UART power */
    power_usart0_enable();
     f30:	e4 e6       	ldi	r30, 0x64	; 100
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8d 7f       	andi	r24, 0xFD	; 253
     f38:	80 83       	st	Z, r24

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
    #else
        UCSRA &= ~(_BV(U2X0));
     f3a:	e0 ec       	ldi	r30, 0xC0	; 192
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8d 7f       	andi	r24, 0xFD	; 253
     f42:	80 83       	st	Z, r24
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     f44:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     f48:	87 e6       	ldi	r24, 0x67	; 103
     f4a:	80 93 c4 00 	sts	0x00C4, r24

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	80 93 c2 00 	sts	0x00C2, r24


    /* Enable RX and TX */
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     f54:	e1 ec       	ldi	r30, 0xC1	; 193
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	88 e1       	ldi	r24, 0x18	; 24
     f5a:	80 83       	st	Z, r24

    /* RX interrupt */
    UCSR0B |= (1<<RXCIE0);
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	80 83       	st	Z, r24
     f62:	08 95       	ret

00000f64 <__vector_18>:
//    UBRRL = UBRRL_VALUE;

}

ISR(USART_RX_vect)
{
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
    /* byte received ! */
    if (uart_cb != NULL)
     f86:	e0 91 d4 03 	lds	r30, 0x03D4
     f8a:	f0 91 d5 03 	lds	r31, 0x03D5
     f8e:	30 97       	sbiw	r30, 0x00	; 0
     f90:	19 f0       	breq	.+6      	; 0xf98 <__vector_18+0x34>
    {
        uart_cb(UDR);
     f92:	80 91 c6 00 	lds	r24, 0x00C6
     f96:	09 95       	icall
    }
}
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <uart_callback>:

void uart_callback(t_uart_cb cb)
{
    uart_cb = cb;
     fba:	90 93 d5 03 	sts	0x03D5, r25
     fbe:	80 93 d4 03 	sts	0x03D4, r24
     fc2:	08 95       	ret

00000fc4 <uart_putstring>:
    UDR = c;
}

void uart_putstring(char *str)
{
    while (*str != 0)
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 81       	ld	r18, Z
     fc8:	22 23       	and	r18, r18
     fca:	51 f0       	breq	.+20     	; 0xfe0 <uart_putstring+0x1c>
     fcc:	31 96       	adiw	r30, 0x01	; 1
    uart_cb = cb;
}

void uart_putchar(char c, FILE *stream)
{
    loop_until_bit_is_set(UCSRA, UDRE);
     fce:	80 91 c0 00 	lds	r24, 0x00C0
     fd2:	85 ff       	sbrs	r24, 5
     fd4:	fc cf       	rjmp	.-8      	; 0xfce <uart_putstring+0xa>
    UDR = c;
     fd6:	20 93 c6 00 	sts	0x00C6, r18
}

void uart_putstring(char *str)
{
    while (*str != 0)
     fda:	21 91       	ld	r18, Z+
     fdc:	21 11       	cpse	r18, r1
     fde:	f7 cf       	rjmp	.-18     	; 0xfce <uart_putstring+0xa>
     fe0:	08 95       	ret

00000fe2 <__divmodhi4>:
     fe2:	97 fb       	bst	r25, 7
     fe4:	07 2e       	mov	r0, r23
     fe6:	16 f4       	brtc	.+4      	; 0xfec <__divmodhi4+0xa>
     fe8:	00 94       	com	r0
     fea:	07 d0       	rcall	.+14     	; 0xffa <__divmodhi4_neg1>
     fec:	77 fd       	sbrc	r23, 7
     fee:	09 d0       	rcall	.+18     	; 0x1002 <__divmodhi4_neg2>
     ff0:	0e 94 05 08 	call	0x100a	; 0x100a <__udivmodhi4>
     ff4:	07 fc       	sbrc	r0, 7
     ff6:	05 d0       	rcall	.+10     	; 0x1002 <__divmodhi4_neg2>
     ff8:	3e f4       	brtc	.+14     	; 0x1008 <__divmodhi4_exit>

00000ffa <__divmodhi4_neg1>:
     ffa:	90 95       	com	r25
     ffc:	81 95       	neg	r24
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	08 95       	ret

00001002 <__divmodhi4_neg2>:
    1002:	70 95       	com	r23
    1004:	61 95       	neg	r22
    1006:	7f 4f       	sbci	r23, 0xFF	; 255

00001008 <__divmodhi4_exit>:
    1008:	08 95       	ret

0000100a <__udivmodhi4>:
    100a:	aa 1b       	sub	r26, r26
    100c:	bb 1b       	sub	r27, r27
    100e:	51 e1       	ldi	r21, 0x11	; 17
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <__udivmodhi4_ep>

00001012 <__udivmodhi4_loop>:
    1012:	aa 1f       	adc	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	a6 17       	cp	r26, r22
    1018:	b7 07       	cpc	r27, r23
    101a:	10 f0       	brcs	.+4      	; 0x1020 <__udivmodhi4_ep>
    101c:	a6 1b       	sub	r26, r22
    101e:	b7 0b       	sbc	r27, r23

00001020 <__udivmodhi4_ep>:
    1020:	88 1f       	adc	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	5a 95       	dec	r21
    1026:	a9 f7       	brne	.-22     	; 0x1012 <__udivmodhi4_loop>
    1028:	80 95       	com	r24
    102a:	90 95       	com	r25
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	08 95       	ret

00001032 <__subsf3>:
    1032:	50 58       	subi	r21, 0x80	; 128

00001034 <__addsf3>:
    1034:	bb 27       	eor	r27, r27
    1036:	aa 27       	eor	r26, r26
    1038:	0e d0       	rcall	.+28     	; 0x1056 <__addsf3x>
    103a:	48 c1       	rjmp	.+656    	; 0x12cc <__fp_round>
    103c:	39 d1       	rcall	.+626    	; 0x12b0 <__fp_pscA>
    103e:	30 f0       	brcs	.+12     	; 0x104c <__addsf3+0x18>
    1040:	3e d1       	rcall	.+636    	; 0x12be <__fp_pscB>
    1042:	20 f0       	brcs	.+8      	; 0x104c <__addsf3+0x18>
    1044:	31 f4       	brne	.+12     	; 0x1052 <__addsf3+0x1e>
    1046:	9f 3f       	cpi	r25, 0xFF	; 255
    1048:	11 f4       	brne	.+4      	; 0x104e <__addsf3+0x1a>
    104a:	1e f4       	brtc	.+6      	; 0x1052 <__addsf3+0x1e>
    104c:	2e c1       	rjmp	.+604    	; 0x12aa <__fp_nan>
    104e:	0e f4       	brtc	.+2      	; 0x1052 <__addsf3+0x1e>
    1050:	e0 95       	com	r30
    1052:	e7 fb       	bst	r30, 7
    1054:	24 c1       	rjmp	.+584    	; 0x129e <__fp_inf>

00001056 <__addsf3x>:
    1056:	e9 2f       	mov	r30, r25
    1058:	4a d1       	rcall	.+660    	; 0x12ee <__fp_split3>
    105a:	80 f3       	brcs	.-32     	; 0x103c <__addsf3+0x8>
    105c:	ba 17       	cp	r27, r26
    105e:	62 07       	cpc	r22, r18
    1060:	73 07       	cpc	r23, r19
    1062:	84 07       	cpc	r24, r20
    1064:	95 07       	cpc	r25, r21
    1066:	18 f0       	brcs	.+6      	; 0x106e <__addsf3x+0x18>
    1068:	71 f4       	brne	.+28     	; 0x1086 <__addsf3x+0x30>
    106a:	9e f5       	brtc	.+102    	; 0x10d2 <__addsf3x+0x7c>
    106c:	62 c1       	rjmp	.+708    	; 0x1332 <__fp_zero>
    106e:	0e f4       	brtc	.+2      	; 0x1072 <__addsf3x+0x1c>
    1070:	e0 95       	com	r30
    1072:	0b 2e       	mov	r0, r27
    1074:	ba 2f       	mov	r27, r26
    1076:	a0 2d       	mov	r26, r0
    1078:	0b 01       	movw	r0, r22
    107a:	b9 01       	movw	r22, r18
    107c:	90 01       	movw	r18, r0
    107e:	0c 01       	movw	r0, r24
    1080:	ca 01       	movw	r24, r20
    1082:	a0 01       	movw	r20, r0
    1084:	11 24       	eor	r1, r1
    1086:	ff 27       	eor	r31, r31
    1088:	59 1b       	sub	r21, r25
    108a:	99 f0       	breq	.+38     	; 0x10b2 <__addsf3x+0x5c>
    108c:	59 3f       	cpi	r21, 0xF9	; 249
    108e:	50 f4       	brcc	.+20     	; 0x10a4 <__addsf3x+0x4e>
    1090:	50 3e       	cpi	r21, 0xE0	; 224
    1092:	68 f1       	brcs	.+90     	; 0x10ee <__addsf3x+0x98>
    1094:	1a 16       	cp	r1, r26
    1096:	f0 40       	sbci	r31, 0x00	; 0
    1098:	a2 2f       	mov	r26, r18
    109a:	23 2f       	mov	r18, r19
    109c:	34 2f       	mov	r19, r20
    109e:	44 27       	eor	r20, r20
    10a0:	58 5f       	subi	r21, 0xF8	; 248
    10a2:	f3 cf       	rjmp	.-26     	; 0x108a <__addsf3x+0x34>
    10a4:	46 95       	lsr	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	a7 95       	ror	r26
    10ac:	f0 40       	sbci	r31, 0x00	; 0
    10ae:	53 95       	inc	r21
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__addsf3x+0x4e>
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__addsf3x+0x7c>
    10b4:	1f 16       	cp	r1, r31
    10b6:	ba 0b       	sbc	r27, r26
    10b8:	62 0b       	sbc	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba f0       	brmi	.+46     	; 0x10ee <__addsf3x+0x98>
    10c0:	91 50       	subi	r25, 0x01	; 1
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <__addsf3x+0x96>
    10c4:	ff 0f       	add	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	c2 f7       	brpl	.-16     	; 0x10c0 <__addsf3x+0x6a>
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <__addsf3x+0x98>
    10d2:	ba 0f       	add	r27, r26
    10d4:	62 1f       	adc	r22, r18
    10d6:	73 1f       	adc	r23, r19
    10d8:	84 1f       	adc	r24, r20
    10da:	48 f4       	brcc	.+18     	; 0x10ee <__addsf3x+0x98>
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f7 95       	ror	r31
    10e6:	9e 3f       	cpi	r25, 0xFE	; 254
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__addsf3x+0x96>
    10ea:	b3 cf       	rjmp	.-154    	; 0x1052 <__addsf3+0x1e>
    10ec:	93 95       	inc	r25
    10ee:	88 0f       	add	r24, r24
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__addsf3x+0x9e>
    10f2:	99 27       	eor	r25, r25
    10f4:	ee 0f       	add	r30, r30
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	08 95       	ret

000010fc <__divsf3>:
    10fc:	0c d0       	rcall	.+24     	; 0x1116 <__divsf3x>
    10fe:	e6 c0       	rjmp	.+460    	; 0x12cc <__fp_round>
    1100:	de d0       	rcall	.+444    	; 0x12be <__fp_pscB>
    1102:	40 f0       	brcs	.+16     	; 0x1114 <__divsf3+0x18>
    1104:	d5 d0       	rcall	.+426    	; 0x12b0 <__fp_pscA>
    1106:	30 f0       	brcs	.+12     	; 0x1114 <__divsf3+0x18>
    1108:	21 f4       	brne	.+8      	; 0x1112 <__divsf3+0x16>
    110a:	5f 3f       	cpi	r21, 0xFF	; 255
    110c:	19 f0       	breq	.+6      	; 0x1114 <__divsf3+0x18>
    110e:	c7 c0       	rjmp	.+398    	; 0x129e <__fp_inf>
    1110:	51 11       	cpse	r21, r1
    1112:	10 c1       	rjmp	.+544    	; 0x1334 <__fp_szero>
    1114:	ca c0       	rjmp	.+404    	; 0x12aa <__fp_nan>

00001116 <__divsf3x>:
    1116:	eb d0       	rcall	.+470    	; 0x12ee <__fp_split3>
    1118:	98 f3       	brcs	.-26     	; 0x1100 <__divsf3+0x4>

0000111a <__divsf3_pse>:
    111a:	99 23       	and	r25, r25
    111c:	c9 f3       	breq	.-14     	; 0x1110 <__divsf3+0x14>
    111e:	55 23       	and	r21, r21
    1120:	b1 f3       	breq	.-20     	; 0x110e <__divsf3+0x12>
    1122:	95 1b       	sub	r25, r21
    1124:	55 0b       	sbc	r21, r21
    1126:	bb 27       	eor	r27, r27
    1128:	aa 27       	eor	r26, r26
    112a:	62 17       	cp	r22, r18
    112c:	73 07       	cpc	r23, r19
    112e:	84 07       	cpc	r24, r20
    1130:	38 f0       	brcs	.+14     	; 0x1140 <__divsf3_pse+0x26>
    1132:	9f 5f       	subi	r25, 0xFF	; 255
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	44 1f       	adc	r20, r20
    113c:	aa 1f       	adc	r26, r26
    113e:	a9 f3       	breq	.-22     	; 0x112a <__divsf3_pse+0x10>
    1140:	33 d0       	rcall	.+102    	; 0x11a8 <__divsf3_pse+0x8e>
    1142:	0e 2e       	mov	r0, r30
    1144:	3a f0       	brmi	.+14     	; 0x1154 <__divsf3_pse+0x3a>
    1146:	e0 e8       	ldi	r30, 0x80	; 128
    1148:	30 d0       	rcall	.+96     	; 0x11aa <__divsf3_pse+0x90>
    114a:	91 50       	subi	r25, 0x01	; 1
    114c:	50 40       	sbci	r21, 0x00	; 0
    114e:	e6 95       	lsr	r30
    1150:	00 1c       	adc	r0, r0
    1152:	ca f7       	brpl	.-14     	; 0x1146 <__divsf3_pse+0x2c>
    1154:	29 d0       	rcall	.+82     	; 0x11a8 <__divsf3_pse+0x8e>
    1156:	fe 2f       	mov	r31, r30
    1158:	27 d0       	rcall	.+78     	; 0x11a8 <__divsf3_pse+0x8e>
    115a:	66 0f       	add	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	bb 1f       	adc	r27, r27
    1162:	26 17       	cp	r18, r22
    1164:	37 07       	cpc	r19, r23
    1166:	48 07       	cpc	r20, r24
    1168:	ab 07       	cpc	r26, r27
    116a:	b0 e8       	ldi	r27, 0x80	; 128
    116c:	09 f0       	breq	.+2      	; 0x1170 <__divsf3_pse+0x56>
    116e:	bb 0b       	sbc	r27, r27
    1170:	80 2d       	mov	r24, r0
    1172:	bf 01       	movw	r22, r30
    1174:	ff 27       	eor	r31, r31
    1176:	93 58       	subi	r25, 0x83	; 131
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
    117a:	2a f0       	brmi	.+10     	; 0x1186 <__divsf3_pse+0x6c>
    117c:	9e 3f       	cpi	r25, 0xFE	; 254
    117e:	51 05       	cpc	r21, r1
    1180:	68 f0       	brcs	.+26     	; 0x119c <__divsf3_pse+0x82>
    1182:	8d c0       	rjmp	.+282    	; 0x129e <__fp_inf>
    1184:	d7 c0       	rjmp	.+430    	; 0x1334 <__fp_szero>
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	ec f3       	brlt	.-6      	; 0x1184 <__divsf3_pse+0x6a>
    118a:	98 3e       	cpi	r25, 0xE8	; 232
    118c:	dc f3       	brlt	.-10     	; 0x1184 <__divsf3_pse+0x6a>
    118e:	86 95       	lsr	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	b7 95       	ror	r27
    1196:	f7 95       	ror	r31
    1198:	9f 5f       	subi	r25, 0xFF	; 255
    119a:	c9 f7       	brne	.-14     	; 0x118e <__divsf3_pse+0x74>
    119c:	88 0f       	add	r24, r24
    119e:	91 1d       	adc	r25, r1
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret
    11a8:	e1 e0       	ldi	r30, 0x01	; 1
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	bb 1f       	adc	r27, r27
    11b2:	62 17       	cp	r22, r18
    11b4:	73 07       	cpc	r23, r19
    11b6:	84 07       	cpc	r24, r20
    11b8:	ba 07       	cpc	r27, r26
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__divsf3_pse+0xaa>
    11bc:	62 1b       	sub	r22, r18
    11be:	73 0b       	sbc	r23, r19
    11c0:	84 0b       	sbc	r24, r20
    11c2:	ba 0b       	sbc	r27, r26
    11c4:	ee 1f       	adc	r30, r30
    11c6:	88 f7       	brcc	.-30     	; 0x11aa <__divsf3_pse+0x90>
    11c8:	e0 95       	com	r30
    11ca:	08 95       	ret

000011cc <__fixunssfsi>:
    11cc:	98 d0       	rcall	.+304    	; 0x12fe <__fp_splitA>
    11ce:	88 f0       	brcs	.+34     	; 0x11f2 <__fixunssfsi+0x26>
    11d0:	9f 57       	subi	r25, 0x7F	; 127
    11d2:	90 f0       	brcs	.+36     	; 0x11f8 <__fixunssfsi+0x2c>
    11d4:	b9 2f       	mov	r27, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	b7 51       	subi	r27, 0x17	; 23
    11da:	a0 f0       	brcs	.+40     	; 0x1204 <__fixunssfsi+0x38>
    11dc:	d1 f0       	breq	.+52     	; 0x1212 <__fixunssfsi+0x46>
    11de:	66 0f       	add	r22, r22
    11e0:	77 1f       	adc	r23, r23
    11e2:	88 1f       	adc	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	1a f0       	brmi	.+6      	; 0x11ee <__fixunssfsi+0x22>
    11e8:	ba 95       	dec	r27
    11ea:	c9 f7       	brne	.-14     	; 0x11de <__fixunssfsi+0x12>
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <__fixunssfsi+0x46>
    11ee:	b1 30       	cpi	r27, 0x01	; 1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <__fixunssfsi+0x46>
    11f2:	9f d0       	rcall	.+318    	; 0x1332 <__fp_zero>
    11f4:	b1 e0       	ldi	r27, 0x01	; 1
    11f6:	08 95       	ret
    11f8:	9c c0       	rjmp	.+312    	; 0x1332 <__fp_zero>
    11fa:	67 2f       	mov	r22, r23
    11fc:	78 2f       	mov	r23, r24
    11fe:	88 27       	eor	r24, r24
    1200:	b8 5f       	subi	r27, 0xF8	; 248
    1202:	39 f0       	breq	.+14     	; 0x1212 <__fixunssfsi+0x46>
    1204:	b9 3f       	cpi	r27, 0xF9	; 249
    1206:	cc f3       	brlt	.-14     	; 0x11fa <__fixunssfsi+0x2e>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b3 95       	inc	r27
    1210:	d9 f7       	brne	.-10     	; 0x1208 <__fixunssfsi+0x3c>
    1212:	3e f4       	brtc	.+14     	; 0x1222 <__fixunssfsi+0x56>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	08 95       	ret

00001224 <__floatunsisf>:
    1224:	e8 94       	clt
    1226:	09 c0       	rjmp	.+18     	; 0x123a <__floatsisf+0x12>

00001228 <__floatsisf>:
    1228:	97 fb       	bst	r25, 7
    122a:	3e f4       	brtc	.+14     	; 0x123a <__floatsisf+0x12>
    122c:	90 95       	com	r25
    122e:	80 95       	com	r24
    1230:	70 95       	com	r23
    1232:	61 95       	neg	r22
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	8f 4f       	sbci	r24, 0xFF	; 255
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	99 23       	and	r25, r25
    123c:	a9 f0       	breq	.+42     	; 0x1268 <__floatsisf+0x40>
    123e:	f9 2f       	mov	r31, r25
    1240:	96 e9       	ldi	r25, 0x96	; 150
    1242:	bb 27       	eor	r27, r27
    1244:	93 95       	inc	r25
    1246:	f6 95       	lsr	r31
    1248:	87 95       	ror	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	b7 95       	ror	r27
    1250:	f1 11       	cpse	r31, r1
    1252:	f8 cf       	rjmp	.-16     	; 0x1244 <__floatsisf+0x1c>
    1254:	fa f4       	brpl	.+62     	; 0x1294 <__floatsisf+0x6c>
    1256:	bb 0f       	add	r27, r27
    1258:	11 f4       	brne	.+4      	; 0x125e <__floatsisf+0x36>
    125a:	60 ff       	sbrs	r22, 0
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <__floatsisf+0x6c>
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <__floatsisf+0x6c>
    1268:	88 23       	and	r24, r24
    126a:	11 f0       	breq	.+4      	; 0x1270 <__floatsisf+0x48>
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	11 c0       	rjmp	.+34     	; 0x1292 <__floatsisf+0x6a>
    1270:	77 23       	and	r23, r23
    1272:	21 f0       	breq	.+8      	; 0x127c <__floatsisf+0x54>
    1274:	9e e8       	ldi	r25, 0x8E	; 142
    1276:	87 2f       	mov	r24, r23
    1278:	76 2f       	mov	r23, r22
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <__floatsisf+0x5e>
    127c:	66 23       	and	r22, r22
    127e:	71 f0       	breq	.+28     	; 0x129c <__floatsisf+0x74>
    1280:	96 e8       	ldi	r25, 0x86	; 134
    1282:	86 2f       	mov	r24, r22
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	2a f0       	brmi	.+10     	; 0x1294 <__floatsisf+0x6c>
    128a:	9a 95       	dec	r25
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	da f7       	brpl	.-10     	; 0x128a <__floatsisf+0x62>
    1294:	88 0f       	add	r24, r24
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <__fp_inf>:
    129e:	97 f9       	bld	r25, 7
    12a0:	9f 67       	ori	r25, 0x7F	; 127
    12a2:	80 e8       	ldi	r24, 0x80	; 128
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	08 95       	ret

000012aa <__fp_nan>:
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	80 ec       	ldi	r24, 0xC0	; 192
    12ae:	08 95       	ret

000012b0 <__fp_pscA>:
    12b0:	00 24       	eor	r0, r0
    12b2:	0a 94       	dec	r0
    12b4:	16 16       	cp	r1, r22
    12b6:	17 06       	cpc	r1, r23
    12b8:	18 06       	cpc	r1, r24
    12ba:	09 06       	cpc	r0, r25
    12bc:	08 95       	ret

000012be <__fp_pscB>:
    12be:	00 24       	eor	r0, r0
    12c0:	0a 94       	dec	r0
    12c2:	12 16       	cp	r1, r18
    12c4:	13 06       	cpc	r1, r19
    12c6:	14 06       	cpc	r1, r20
    12c8:	05 06       	cpc	r0, r21
    12ca:	08 95       	ret

000012cc <__fp_round>:
    12cc:	09 2e       	mov	r0, r25
    12ce:	03 94       	inc	r0
    12d0:	00 0c       	add	r0, r0
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__fp_round+0xc>
    12d4:	88 23       	and	r24, r24
    12d6:	52 f0       	brmi	.+20     	; 0x12ec <__fp_round+0x20>
    12d8:	bb 0f       	add	r27, r27
    12da:	40 f4       	brcc	.+16     	; 0x12ec <__fp_round+0x20>
    12dc:	bf 2b       	or	r27, r31
    12de:	11 f4       	brne	.+4      	; 0x12e4 <__fp_round+0x18>
    12e0:	60 ff       	sbrs	r22, 0
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <__fp_round+0x20>
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	08 95       	ret

000012ee <__fp_split3>:
    12ee:	57 fd       	sbrc	r21, 7
    12f0:	90 58       	subi	r25, 0x80	; 128
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	59 f0       	breq	.+22     	; 0x130e <__fp_splitA+0x10>
    12f8:	5f 3f       	cpi	r21, 0xFF	; 255
    12fa:	71 f0       	breq	.+28     	; 0x1318 <__fp_splitA+0x1a>
    12fc:	47 95       	ror	r20

000012fe <__fp_splitA>:
    12fe:	88 0f       	add	r24, r24
    1300:	97 fb       	bst	r25, 7
    1302:	99 1f       	adc	r25, r25
    1304:	61 f0       	breq	.+24     	; 0x131e <__fp_splitA+0x20>
    1306:	9f 3f       	cpi	r25, 0xFF	; 255
    1308:	79 f0       	breq	.+30     	; 0x1328 <__fp_splitA+0x2a>
    130a:	87 95       	ror	r24
    130c:	08 95       	ret
    130e:	12 16       	cp	r1, r18
    1310:	13 06       	cpc	r1, r19
    1312:	14 06       	cpc	r1, r20
    1314:	55 1f       	adc	r21, r21
    1316:	f2 cf       	rjmp	.-28     	; 0x12fc <__fp_split3+0xe>
    1318:	46 95       	lsr	r20
    131a:	f1 df       	rcall	.-30     	; 0x12fe <__fp_splitA>
    131c:	08 c0       	rjmp	.+16     	; 0x132e <__fp_splitA+0x30>
    131e:	16 16       	cp	r1, r22
    1320:	17 06       	cpc	r1, r23
    1322:	18 06       	cpc	r1, r24
    1324:	99 1f       	adc	r25, r25
    1326:	f1 cf       	rjmp	.-30     	; 0x130a <__fp_splitA+0xc>
    1328:	86 95       	lsr	r24
    132a:	71 05       	cpc	r23, r1
    132c:	61 05       	cpc	r22, r1
    132e:	08 94       	sec
    1330:	08 95       	ret

00001332 <__fp_zero>:
    1332:	e8 94       	clt

00001334 <__fp_szero>:
    1334:	bb 27       	eor	r27, r27
    1336:	66 27       	eor	r22, r22
    1338:	77 27       	eor	r23, r23
    133a:	cb 01       	movw	r24, r22
    133c:	97 f9       	bld	r25, 7
    133e:	08 95       	ret

00001340 <__mulsf3>:
    1340:	0b d0       	rcall	.+22     	; 0x1358 <__mulsf3x>
    1342:	c4 cf       	rjmp	.-120    	; 0x12cc <__fp_round>
    1344:	b5 df       	rcall	.-150    	; 0x12b0 <__fp_pscA>
    1346:	28 f0       	brcs	.+10     	; 0x1352 <__mulsf3+0x12>
    1348:	ba df       	rcall	.-140    	; 0x12be <__fp_pscB>
    134a:	18 f0       	brcs	.+6      	; 0x1352 <__mulsf3+0x12>
    134c:	95 23       	and	r25, r21
    134e:	09 f0       	breq	.+2      	; 0x1352 <__mulsf3+0x12>
    1350:	a6 cf       	rjmp	.-180    	; 0x129e <__fp_inf>
    1352:	ab cf       	rjmp	.-170    	; 0x12aa <__fp_nan>
    1354:	11 24       	eor	r1, r1
    1356:	ee cf       	rjmp	.-36     	; 0x1334 <__fp_szero>

00001358 <__mulsf3x>:
    1358:	ca df       	rcall	.-108    	; 0x12ee <__fp_split3>
    135a:	a0 f3       	brcs	.-24     	; 0x1344 <__mulsf3+0x4>

0000135c <__mulsf3_pse>:
    135c:	95 9f       	mul	r25, r21
    135e:	d1 f3       	breq	.-12     	; 0x1354 <__mulsf3+0x14>
    1360:	95 0f       	add	r25, r21
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	55 1f       	adc	r21, r21
    1366:	62 9f       	mul	r22, r18
    1368:	f0 01       	movw	r30, r0
    136a:	72 9f       	mul	r23, r18
    136c:	bb 27       	eor	r27, r27
    136e:	f0 0d       	add	r31, r0
    1370:	b1 1d       	adc	r27, r1
    1372:	63 9f       	mul	r22, r19
    1374:	aa 27       	eor	r26, r26
    1376:	f0 0d       	add	r31, r0
    1378:	b1 1d       	adc	r27, r1
    137a:	aa 1f       	adc	r26, r26
    137c:	64 9f       	mul	r22, r20
    137e:	66 27       	eor	r22, r22
    1380:	b0 0d       	add	r27, r0
    1382:	a1 1d       	adc	r26, r1
    1384:	66 1f       	adc	r22, r22
    1386:	82 9f       	mul	r24, r18
    1388:	22 27       	eor	r18, r18
    138a:	b0 0d       	add	r27, r0
    138c:	a1 1d       	adc	r26, r1
    138e:	62 1f       	adc	r22, r18
    1390:	73 9f       	mul	r23, r19
    1392:	b0 0d       	add	r27, r0
    1394:	a1 1d       	adc	r26, r1
    1396:	62 1f       	adc	r22, r18
    1398:	83 9f       	mul	r24, r19
    139a:	a0 0d       	add	r26, r0
    139c:	61 1d       	adc	r22, r1
    139e:	22 1f       	adc	r18, r18
    13a0:	74 9f       	mul	r23, r20
    13a2:	33 27       	eor	r19, r19
    13a4:	a0 0d       	add	r26, r0
    13a6:	61 1d       	adc	r22, r1
    13a8:	23 1f       	adc	r18, r19
    13aa:	84 9f       	mul	r24, r20
    13ac:	60 0d       	add	r22, r0
    13ae:	21 1d       	adc	r18, r1
    13b0:	82 2f       	mov	r24, r18
    13b2:	76 2f       	mov	r23, r22
    13b4:	6a 2f       	mov	r22, r26
    13b6:	11 24       	eor	r1, r1
    13b8:	9f 57       	subi	r25, 0x7F	; 127
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	8a f0       	brmi	.+34     	; 0x13e0 <__mulsf3_pse+0x84>
    13be:	e1 f0       	breq	.+56     	; 0x13f8 <__mulsf3_pse+0x9c>
    13c0:	88 23       	and	r24, r24
    13c2:	4a f0       	brmi	.+18     	; 0x13d6 <__mulsf3_pse+0x7a>
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	bb 1f       	adc	r27, r27
    13ca:	66 1f       	adc	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	50 40       	sbci	r21, 0x00	; 0
    13d4:	a9 f7       	brne	.-22     	; 0x13c0 <__mulsf3_pse+0x64>
    13d6:	9e 3f       	cpi	r25, 0xFE	; 254
    13d8:	51 05       	cpc	r21, r1
    13da:	70 f0       	brcs	.+28     	; 0x13f8 <__mulsf3_pse+0x9c>
    13dc:	60 cf       	rjmp	.-320    	; 0x129e <__fp_inf>
    13de:	aa cf       	rjmp	.-172    	; 0x1334 <__fp_szero>
    13e0:	5f 3f       	cpi	r21, 0xFF	; 255
    13e2:	ec f3       	brlt	.-6      	; 0x13de <__mulsf3_pse+0x82>
    13e4:	98 3e       	cpi	r25, 0xE8	; 232
    13e6:	dc f3       	brlt	.-10     	; 0x13de <__mulsf3_pse+0x82>
    13e8:	86 95       	lsr	r24
    13ea:	77 95       	ror	r23
    13ec:	67 95       	ror	r22
    13ee:	b7 95       	ror	r27
    13f0:	f7 95       	ror	r31
    13f2:	e7 95       	ror	r30
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	c1 f7       	brne	.-16     	; 0x13e8 <__mulsf3_pse+0x8c>
    13f8:	fe 2b       	or	r31, r30
    13fa:	88 0f       	add	r24, r24
    13fc:	91 1d       	adc	r25, r1
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <_exit>:
    1406:	f8 94       	cli

00001408 <__stop_program>:
    1408:	ff cf       	rjmp	.-2      	; 0x1408 <__stop_program>
