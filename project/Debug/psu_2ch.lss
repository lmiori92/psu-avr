
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00001996  00001a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  0080015c  0080015c  00001a86  2**0
                  ALLOC
  3 .stab         00002364  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001900  00000000  00000000  00003dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000056ec  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e9       	ldi	r30, 0x96	; 150
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 35       	cpi	r26, 0x5C	; 92
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ac e5       	ldi	r26, 0x5C	; 92
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <main>
      9e:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	00 90 5f 00 	lds	r0, 0x005F
      ae:	0f 92       	push	r0
      b0:	11 24       	eor	r1, r1
      b2:	2f 93       	push	r18
      b4:	3f 93       	push	r19
      b6:	4f 93       	push	r20
      b8:	5f 93       	push	r21
      ba:	6f 93       	push	r22
      bc:	7f 93       	push	r23
      be:	8f 93       	push	r24
      c0:	9f 93       	push	r25
      c2:	af 93       	push	r26
      c4:	bf 93       	push	r27
      c6:	ef 93       	push	r30
      c8:	ff 93       	push	r31
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <__vector_21+0x2a>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      d4:	90 91 5d 01 	lds	r25, 0x015D
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	89 27       	eor	r24, r25
      dc:	88 23       	and	r24, r24
      de:	09 f4       	brne	.+2      	; 0xe2 <__vector_21+0x3c>
      e0:	3f c0       	rjmp	.+126    	; 0x160 <__vector_21+0xba>
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
      e2:	80 91 5c 01 	lds	r24, 0x015C
      e6:	88 2f       	mov	r24, r24
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	28 e7       	ldi	r18, 0x78	; 120
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	f9 01       	movw	r30, r18
      f0:	20 81       	ld	r18, Z
      f2:	42 2f       	mov	r20, r18
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	29 e7       	ldi	r18, 0x79	; 121
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	22 2f       	mov	r18, r18
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	32 2f       	mov	r19, r18
     104:	22 27       	eor	r18, r18
     106:	24 2b       	or	r18, r20
     108:	35 2b       	or	r19, r21
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	82 5a       	subi	r24, 0xA2	; 162
     110:	9e 4f       	sbci	r25, 0xFE	; 254
     112:	fc 01       	movw	r30, r24
     114:	31 83       	std	Z+1, r19	; 0x01
     116:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
     118:	80 91 5c 01 	lds	r24, 0x015C
     11c:	88 2f       	mov	r24, r24
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	26 e0       	ldi	r18, 0x06	; 6
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	b9 01       	movw	r22, r18
     128:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__divmodhi4>
     12c:	80 93 5c 01 	sts	0x015C, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     130:	8c e7       	ldi	r24, 0x7C	; 124
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2c e7       	ldi	r18, 0x7C	; 124
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 7f       	andi	r18, 0xF0	; 240
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
        ADMUX |= adc_mux_index;
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	2c e7       	ldi	r18, 0x7C	; 124
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	30 81       	ld	r19, Z
     14e:	20 91 5c 01 	lds	r18, 0x015C
     152:	23 2b       	or	r18, r19
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
        adc_mux_switch = true;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 5d 01 	sts	0x015D, r24
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__vector_21+0xbe>
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
     160:	10 92 5d 01 	sts	0x015D, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
     164:	8a e7       	ldi	r24, 0x7A	; 122
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2a e7       	ldi	r18, 0x7A	; 122
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	20 64       	ori	r18, 0x40	; 64
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18

}
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	bf 91       	pop	r27
     184:	af 91       	pop	r26
     186:	9f 91       	pop	r25
     188:	8f 91       	pop	r24
     18a:	7f 91       	pop	r23
     18c:	6f 91       	pop	r22
     18e:	5f 91       	pop	r21
     190:	4f 91       	pop	r20
     192:	3f 91       	pop	r19
     194:	2f 91       	pop	r18
     196:	0f 90       	pop	r0
     198:	00 92 5f 00 	sts	0x005F, r0
     19c:	0f 90       	pop	r0
     19e:	1f 90       	pop	r1
     1a0:	18 95       	reti

000001a2 <adc_init>:
 *
 * @brief ADC initialization, assuming the interrupts are disabled.
 *
 */
void adc_init(void)
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     1aa:	8c e7       	ldi	r24, 0x7C	; 124
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2c e7       	ldi	r18, 0x7C	; 124
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	f9 01       	movw	r30, r18
     1b4:	20 81       	ld	r18, Z
     1b6:	20 71       	andi	r18, 0x10	; 16
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     1bc:	8c e7       	ldi	r24, 0x7C	; 124
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	2c e7       	ldi	r18, 0x7C	; 124
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	f9 01       	movw	r30, r18
     1c6:	20 81       	ld	r18, Z
     1c8:	20 64       	ori	r18, 0x40	; 64
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     1ce:	8a e7       	ldi	r24, 0x7A	; 122
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	2a e7       	ldi	r18, 0x7A	; 122
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	20 68       	ori	r18, 0x80	; 128
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     1e0:	8a e7       	ldi	r24, 0x7A	; 122
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	2a e7       	ldi	r18, 0x7A	; 122
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	2f 64       	ori	r18, 0x4F	; 79
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18

#ifdef ADC_SCOPE_DEBUG
    DBG_CONFIG;
#endif

}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <adc_periodic>:

void adc_periodic(void)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	1f 92       	push	r1
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    /* STUB */
    static uint32_t ts = 0;
    uint8_t i = 0;
     202:	19 82       	std	Y+1, r1	; 0x01
    if (g_timestamp > (ts + 1000000))
     204:	80 91 6a 01 	lds	r24, 0x016A
     208:	90 91 6b 01 	lds	r25, 0x016B
     20c:	a0 91 6c 01 	lds	r26, 0x016C
     210:	b0 91 6d 01 	lds	r27, 0x016D
     214:	9c 01       	movw	r18, r24
     216:	ad 01       	movw	r20, r26
     218:	20 5c       	subi	r18, 0xC0	; 192
     21a:	3d 4b       	sbci	r19, 0xBD	; 189
     21c:	40 4f       	sbci	r20, 0xF0	; 240
     21e:	5f 4f       	sbci	r21, 0xFF	; 255
     220:	80 91 fe 01 	lds	r24, 0x01FE
     224:	90 91 ff 01 	lds	r25, 0x01FF
     228:	a0 91 00 02 	lds	r26, 0x0200
     22c:	b0 91 01 02 	lds	r27, 0x0201
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	4a 07       	cpc	r20, r26
     236:	5b 07       	cpc	r21, r27
     238:	d0 f5       	brcc	.+116    	; 0x2ae <adc_periodic+0xb6>
    {
        ts = g_timestamp;
     23a:	80 91 fe 01 	lds	r24, 0x01FE
     23e:	90 91 ff 01 	lds	r25, 0x01FF
     242:	a0 91 00 02 	lds	r26, 0x0200
     246:	b0 91 01 02 	lds	r27, 0x0201
     24a:	80 93 6a 01 	sts	0x016A, r24
     24e:	90 93 6b 01 	sts	0x016B, r25
     252:	a0 93 6c 01 	sts	0x016C, r26
     256:	b0 93 6d 01 	sts	0x016D, r27
        for (i = 0; i < ADC_NUM; i++)
     25a:	19 82       	std	Y+1, r1	; 0x01
     25c:	25 c0       	rjmp	.+74     	; 0x2a8 <adc_periodic+0xb0>
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	82 5a       	subi	r24, 0xA2	; 162
     26a:	9e 4f       	sbci	r25, 0xFE	; 254
     26c:	fc 01       	movw	r30, r24
     26e:	20 81       	ld	r18, Z
     270:	31 81       	ldd	r19, Z+1	; 0x01
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	43 2f       	mov	r20, r19
     27a:	4f 93       	push	r20
     27c:	2f 93       	push	r18
     27e:	29 2f       	mov	r18, r25
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	8c e1       	ldi	r24, 0x1C	; 28
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	89 2f       	mov	r24, r25
     28a:	8f 93       	push	r24
     28c:	8c e1       	ldi	r24, 0x1C	; 28
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	8f 93       	push	r24
     292:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <printf>
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
    static uint32_t ts = 0;
    uint8_t i = 0;
    if (g_timestamp > (ts + 1000000))
    {
        ts = g_timestamp;
        for (i = 0; i < ADC_NUM; i++)
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	8f 5f       	subi	r24, 0xFF	; 255
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	86 30       	cpi	r24, 0x06	; 6
     2ac:	c0 f2       	brcs	.-80     	; 0x25e <adc_periodic+0x66>
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
        }
    }
}
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <adc_get>:

uint16_t adc_get(e_adc_channel channel)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	89 83       	std	Y+1, r24	; 0x01
    return adc_samples[channel];
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	82 5a       	subi	r24, 0xA2	; 162
     2ce:	9e 4f       	sbci	r25, 0xFE	; 254
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
}
     2d6:	0f 90       	pop	r0
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <adc_last_capture+0x6>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <adc_last_capture+0x8>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <adc_last_capture+0xa>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	9a 83       	std	Y+2, r25	; 0x02
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	7c 83       	std	Y+4, r23	; 0x04
     2f2:	6b 83       	std	Y+3, r22	; 0x03
     2f4:	5e 83       	std	Y+6, r21	; 0x06
     2f6:	4d 83       	std	Y+5, r20	; 0x05
#ifdef ADC_NOISE_DEBUG
    *last_capture = last_captureS;
    *adc_min = adc_minS;
    *adc_max = adc_maxS;
#endif
}
     2f8:	26 96       	adiw	r28, 0x06	; 6
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <adc_last_reset>:

void adc_last_reset(void)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
#ifdef ADC_NOISE_DEBUG
    last_captureS = 0;
    adc_minS = 0xFFFF;
    adc_maxS = 0;
#endif
}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <readVcc>:


/* TODO */
#include <avr/delay.h>
long readVcc() {
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	68 97       	sbiw	r28, 0x18	; 24
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
  #elif defined (__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
    ADMUX = _BV(MUX5) | _BV(MUX0);
  #elif defined (__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
    ADMUX = _BV(MUX3) | _BV(MUX2);
  #else
    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
     32c:	8c e7       	ldi	r24, 0x7C	; 124
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	2e e4       	ldi	r18, 0x4E	; 78
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	a0 e0       	ldi	r26, 0x00	; 0
     33c:	b0 e4       	ldi	r27, 0x40	; 64
     33e:	8f 83       	std	Y+7, r24	; 0x07
     340:	98 87       	std	Y+8, r25	; 0x08
     342:	a9 87       	std	Y+9, r26	; 0x09
     344:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4a e7       	ldi	r20, 0x7A	; 122
     34c:	55 e4       	ldi	r21, 0x45	; 69
     34e:	6f 81       	ldd	r22, Y+7	; 0x07
     350:	78 85       	ldd	r23, Y+8	; 0x08
     352:	89 85       	ldd	r24, Y+9	; 0x09
     354:	9a 85       	ldd	r25, Y+10	; 0x0a
     356:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	8b 87       	std	Y+11, r24	; 0x0b
     360:	9c 87       	std	Y+12, r25	; 0x0c
     362:	ad 87       	std	Y+13, r26	; 0x0d
     364:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e8       	ldi	r20, 0x80	; 128
     36c:	5f e3       	ldi	r21, 0x3F	; 63
     36e:	6b 85       	ldd	r22, Y+11	; 0x0b
     370:	7c 85       	ldd	r23, Y+12	; 0x0c
     372:	8d 85       	ldd	r24, Y+13	; 0x0d
     374:	9e 85       	ldd	r25, Y+14	; 0x0e
     376:	0e 94 28 08 	call	0x1050	; 0x1050 <__cmpsf2>
     37a:	88 23       	and	r24, r24
     37c:	2c f4       	brge	.+10     	; 0x388 <readVcc+0x70>
		__ticks = 1;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	98 8b       	std	Y+16, r25	; 0x10
     384:	8f 87       	std	Y+15, r24	; 0x0f
     386:	3f c0       	rjmp	.+126    	; 0x406 <readVcc+0xee>
	else if (__tmp > 65535)
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	3f ef       	ldi	r19, 0xFF	; 255
     38c:	4f e7       	ldi	r20, 0x7F	; 127
     38e:	57 e4       	ldi	r21, 0x47	; 71
     390:	6b 85       	ldd	r22, Y+11	; 0x0b
     392:	7c 85       	ldd	r23, Y+12	; 0x0c
     394:	8d 85       	ldd	r24, Y+13	; 0x0d
     396:	9e 85       	ldd	r25, Y+14	; 0x0e
     398:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__gesf2>
     39c:	18 16       	cp	r1, r24
     39e:	4c f5       	brge	.+82     	; 0x3f2 <readVcc+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e2       	ldi	r20, 0x20	; 32
     3a6:	51 e4       	ldi	r21, 0x41	; 65
     3a8:	6f 81       	ldd	r22, Y+7	; 0x07
     3aa:	78 85       	ldd	r23, Y+8	; 0x08
     3ac:	89 85       	ldd	r24, Y+9	; 0x09
     3ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b0:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
     3b4:	dc 01       	movw	r26, r24
     3b6:	cb 01       	movw	r24, r22
     3b8:	bc 01       	movw	r22, r24
     3ba:	cd 01       	movw	r24, r26
     3bc:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
     3c0:	dc 01       	movw	r26, r24
     3c2:	cb 01       	movw	r24, r22
     3c4:	98 8b       	std	Y+16, r25	; 0x10
     3c6:	8f 87       	std	Y+15, r24	; 0x0f
     3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <readVcc+0xd0>
     3ca:	80 e9       	ldi	r24, 0x90	; 144
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	9a 8b       	std	Y+18, r25	; 0x12
     3d0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d2:	89 89       	ldd	r24, Y+17	; 0x11
     3d4:	9a 89       	ldd	r25, Y+18	; 0x12
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <readVcc+0xbe>
     3da:	9a 8b       	std	Y+18, r25	; 0x12
     3dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3de:	8f 85       	ldd	r24, Y+15	; 0x0f
     3e0:	98 89       	ldd	r25, Y+16	; 0x10
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	98 8b       	std	Y+16, r25	; 0x10
     3e6:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ea:	98 89       	ldd	r25, Y+16	; 0x10
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	69 f7       	brne	.-38     	; 0x3ca <readVcc+0xb2>
     3f0:	14 c0       	rjmp	.+40     	; 0x41a <readVcc+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f2:	6b 85       	ldd	r22, Y+11	; 0x0b
     3f4:	7c 85       	ldd	r23, Y+12	; 0x0c
     3f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3fa:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	98 8b       	std	Y+16, r25	; 0x10
     404:	8f 87       	std	Y+15, r24	; 0x0f
     406:	8f 85       	ldd	r24, Y+15	; 0x0f
     408:	98 89       	ldd	r25, Y+16	; 0x10
     40a:	9c 8b       	std	Y+20, r25	; 0x14
     40c:	8b 8b       	std	Y+19, r24	; 0x13
     40e:	8b 89       	ldd	r24, Y+19	; 0x13
     410:	9c 89       	ldd	r25, Y+20	; 0x14
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <readVcc+0xfa>
     416:	9c 8b       	std	Y+20, r25	; 0x14
     418:	8b 8b       	std	Y+19, r24	; 0x13
  #endif

  _delay_ms(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
     41a:	8a e7       	ldi	r24, 0x7A	; 122
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	2a e7       	ldi	r18, 0x7A	; 122
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	20 81       	ld	r18, Z
     426:	20 64       	ori	r18, 0x40	; 64
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
  while (bit_is_set(ADCSRA,ADSC)); // measuring
     42c:	00 00       	nop
     42e:	8a e7       	ldi	r24, 0x7A	; 122
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	80 81       	ld	r24, Z
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	80 74       	andi	r24, 0x40	; 64
     43c:	99 27       	eor	r25, r25
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	b1 f7       	brne	.-20     	; 0x42e <readVcc+0x116>

  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH
     442:	88 e7       	ldi	r24, 0x78	; 120
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	89 83       	std	Y+1, r24	; 0x01
  uint8_t high = ADCH; // unlocks both
     44c:	89 e7       	ldi	r24, 0x79	; 121
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	fc 01       	movw	r30, r24
     452:	80 81       	ld	r24, Z
     454:	8a 83       	std	Y+2, r24	; 0x02

  long result = (high<<8) | low;
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	38 2f       	mov	r19, r24
     45e:	22 27       	eor	r18, r18
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	88 2f       	mov	r24, r24
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	82 2b       	or	r24, r18
     468:	93 2b       	or	r25, r19
     46a:	aa 27       	eor	r26, r26
     46c:	97 fd       	sbrc	r25, 7
     46e:	a0 95       	com	r26
     470:	ba 2f       	mov	r27, r26
     472:	8b 83       	std	Y+3, r24	; 0x03
     474:	9c 83       	std	Y+4, r25	; 0x04
     476:	ad 83       	std	Y+5, r26	; 0x05
     478:	be 83       	std	Y+6, r27	; 0x06

  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
     47a:	84 eb       	ldi	r24, 0xB4	; 180
     47c:	9b e2       	ldi	r25, 0x2B	; 43
     47e:	a1 e1       	ldi	r26, 0x11	; 17
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	2b 81       	ldd	r18, Y+3	; 0x03
     484:	3c 81       	ldd	r19, Y+4	; 0x04
     486:	4d 81       	ldd	r20, Y+5	; 0x05
     488:	5e 81       	ldd	r21, Y+6	; 0x06
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	0e 94 6e 07 	call	0xedc	; 0xedc <__divmodsi4>
     492:	da 01       	movw	r26, r20
     494:	c9 01       	movw	r24, r18
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	9c 83       	std	Y+4, r25	; 0x04
     49a:	ad 83       	std	Y+5, r26	; 0x05
     49c:	be 83       	std	Y+6, r27	; 0x06
  return result; // Vcc in millivolts
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	9c 81       	ldd	r25, Y+4	; 0x04
     4a2:	ad 81       	ldd	r26, Y+5	; 0x05
     4a4:	be 81       	ldd	r27, Y+6	; 0x06
}
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	68 96       	adiw	r28, 0x18	; 24
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <lib_limit>:

/* GLOBALS */
static t_psu_channel psu_channels[PSU_CHANNEL_NUM];

void lib_limit(t_value *value, t_value_scale *scale)
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <lib_limit+0x6>
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <lib_limit+0x8>
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	89 83       	std	Y+1, r24	; 0x01
     4cc:	7c 83       	std	Y+4, r23	; 0x04
     4ce:	6b 83       	std	Y+3, r22	; 0x03
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 81       	ld	r18, Z
     4d8:	31 81       	ldd	r19, Z+1	; 0x01
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	9c 81       	ldd	r25, Y+4	; 0x04
     4de:	fc 01       	movw	r30, r24
     4e0:	82 81       	ldd	r24, Z+2	; 0x02
     4e2:	93 81       	ldd	r25, Z+3	; 0x03
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	50 f4       	brcc	.+20     	; 0x4fe <lib_limit+0x42>
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	9c 81       	ldd	r25, Y+4	; 0x04
     4ee:	fc 01       	movw	r30, r24
     4f0:	22 81       	ldd	r18, Z+2	; 0x02
     4f2:	33 81       	ldd	r19, Z+3	; 0x03
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	9a 81       	ldd	r25, Y+2	; 0x02
     4f8:	fc 01       	movw	r30, r24
     4fa:	33 83       	std	Z+3, r19	; 0x03
     4fc:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	fc 01       	movw	r30, r24
     504:	20 81       	ld	r18, Z
     506:	31 81       	ldd	r19, Z+1	; 0x01
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	9c 81       	ldd	r25, Y+4	; 0x04
     50c:	fc 01       	movw	r30, r24
     50e:	84 81       	ldd	r24, Z+4	; 0x04
     510:	95 81       	ldd	r25, Z+5	; 0x05
     512:	82 17       	cp	r24, r18
     514:	93 07       	cpc	r25, r19
     516:	50 f4       	brcc	.+20     	; 0x52c <lib_limit+0x70>
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	9c 81       	ldd	r25, Y+4	; 0x04
     51c:	fc 01       	movw	r30, r24
     51e:	24 81       	ldd	r18, Z+4	; 0x04
     520:	35 81       	ldd	r19, Z+5	; 0x05
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	fc 01       	movw	r30, r24
     528:	33 83       	std	Z+3, r19	; 0x03
     52a:	22 83       	std	Z+2, r18	; 0x02
}
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <lib_scale>:

void lib_scale(t_value *value, t_value_scale *scale)
{
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	2a 97       	sbiw	r28, 0x0a	; 10
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	98 87       	std	Y+8, r25	; 0x08
     560:	8f 83       	std	Y+7, r24	; 0x07
     562:	7a 87       	std	Y+10, r23	; 0x0a
     564:	69 87       	std	Y+9, r22	; 0x09
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     566:	89 85       	ldd	r24, Y+9	; 0x09
     568:	9a 85       	ldd	r25, Y+10	; 0x0a
     56a:	fc 01       	movw	r30, r24
     56c:	80 85       	ldd	r24, Z+8	; 0x08
     56e:	91 85       	ldd	r25, Z+9	; 0x09
     570:	cc 01       	movw	r24, r24
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b0 e0       	ldi	r27, 0x00	; 0
     576:	bc 01       	movw	r22, r24
     578:	cd 01       	movw	r24, r26
     57a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatunsisf>
     57e:	6b 01       	movw	r12, r22
     580:	7c 01       	movw	r14, r24
     582:	89 85       	ldd	r24, Y+9	; 0x09
     584:	9a 85       	ldd	r25, Y+10	; 0x0a
     586:	fc 01       	movw	r30, r24
     588:	86 81       	ldd	r24, Z+6	; 0x06
     58a:	97 81       	ldd	r25, Z+7	; 0x07
     58c:	cc 01       	movw	r24, r24
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	bc 01       	movw	r22, r24
     594:	cd 01       	movw	r24, r26
     596:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatunsisf>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	9c 01       	movw	r18, r24
     5a0:	ad 01       	movw	r20, r26
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	0e 94 c3 07 	call	0xf86	; 0xf86 <__subsf3>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	6c 01       	movw	r12, r24
     5b0:	7d 01       	movw	r14, r26
     5b2:	89 85       	ldd	r24, Y+9	; 0x09
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	fc 01       	movw	r30, r24
     5b8:	84 81       	ldd	r24, Z+4	; 0x04
     5ba:	95 81       	ldd	r25, Z+5	; 0x05
     5bc:	cc 01       	movw	r24, r24
     5be:	a0 e0       	ldi	r26, 0x00	; 0
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatunsisf>
     5ca:	4b 01       	movw	r8, r22
     5cc:	5c 01       	movw	r10, r24
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d2:	fc 01       	movw	r30, r24
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	cc 01       	movw	r24, r24
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	bc 01       	movw	r22, r24
     5e0:	cd 01       	movw	r24, r26
     5e2:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatunsisf>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	9c 01       	movw	r18, r24
     5ec:	ad 01       	movw	r20, r26
     5ee:	c5 01       	movw	r24, r10
     5f0:	b4 01       	movw	r22, r8
     5f2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__subsf3>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	9c 01       	movw	r18, r24
     5fc:	ad 01       	movw	r20, r26
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divsf3>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	ab 83       	std	Y+3, r26	; 0x03
     610:	bc 83       	std	Y+4, r27	; 0x04

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     612:	8f 81       	ldd	r24, Y+7	; 0x07
     614:	98 85       	ldd	r25, Y+8	; 0x08
     616:	fc 01       	movw	r30, r24
     618:	20 81       	ld	r18, Z
     61a:	31 81       	ldd	r19, Z+1	; 0x01
     61c:	89 85       	ldd	r24, Y+9	; 0x09
     61e:	9a 85       	ldd	r25, Y+10	; 0x0a
     620:	fc 01       	movw	r30, r24
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	a9 01       	movw	r20, r18
     628:	48 1b       	sub	r20, r24
     62a:	59 0b       	sbc	r21, r25
     62c:	ca 01       	movw	r24, r20
     62e:	9e 83       	std	Y+6, r25	; 0x06
     630:	8d 83       	std	Y+5, r24	; 0x05
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     632:	8d 81       	ldd	r24, Y+5	; 0x05
     634:	9e 81       	ldd	r25, Y+6	; 0x06
     636:	cc 01       	movw	r24, r24
     638:	a0 e0       	ldi	r26, 0x00	; 0
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatunsisf>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	29 81       	ldd	r18, Y+1	; 0x01
     64a:	3a 81       	ldd	r19, Y+2	; 0x02
     64c:	4b 81       	ldd	r20, Y+3	; 0x03
     64e:	5c 81       	ldd	r21, Y+4	; 0x04
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	0e 94 76 09 	call	0x12ec	; 0x12ec <__mulsf3>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	bc 01       	movw	r22, r24
     65e:	cd 01       	movw	r24, r26
     660:	0e 94 94 08 	call	0x1128	; 0x1128 <__fixunssfsi>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	9e 83       	std	Y+6, r25	; 0x06
     66a:	8d 83       	std	Y+5, r24	; 0x05
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     66c:	89 85       	ldd	r24, Y+9	; 0x09
     66e:	9a 85       	ldd	r25, Y+10	; 0x0a
     670:	fc 01       	movw	r30, r24
     672:	86 81       	ldd	r24, Z+6	; 0x06
     674:	97 81       	ldd	r25, Z+7	; 0x07
     676:	2d 81       	ldd	r18, Y+5	; 0x05
     678:	3e 81       	ldd	r19, Y+6	; 0x06
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	9e 83       	std	Y+6, r25	; 0x06
     680:	8d 83       	std	Y+5, r24	; 0x05
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     682:	8f 81       	ldd	r24, Y+7	; 0x07
     684:	98 85       	ldd	r25, Y+8	; 0x08
     686:	2d 81       	ldd	r18, Y+5	; 0x05
     688:	3e 81       	ldd	r19, Y+6	; 0x06
     68a:	fc 01       	movw	r30, r24
     68c:	33 83       	std	Z+3, r19	; 0x03
     68e:	22 83       	std	Z+2, r18	; 0x02
}
     690:	2a 96       	adiw	r28, 0x0a	; 10
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	9f 90       	pop	r9
     6ae:	8f 90       	pop	r8
     6b0:	08 95       	ret

000006b2 <init_channel>:

static void init_channel(t_psu_channel *channel, e_psu_channel psu_ch)
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <init_channel+0x6>
     6b8:	1f 92       	push	r1
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	6b 83       	std	Y+3, r22	; 0x03

    switch(psu_ch)
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	21 f0       	breq	.+8      	; 0x6d6 <init_channel+0x24>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	91 05       	cpc	r25, r1
     6d2:	a1 f0       	breq	.+40     	; 0x6fc <init_channel+0x4a>
            channel->voltage_pwm_channel = PWM_CHANNEL_1;
            channel->current_pwm_channel = PWM_CHANNEL_3;
            break;
        default:
            /* No channel selected */
            break;
     6d4:	28 c0       	rjmp	.+80     	; 0x726 <init_channel+0x74>
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->voltage_adc_channel = ADC_0;
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	fc 01       	movw	r30, r24
     6dc:	14 8e       	std	Z+28, r1	; 0x1c
            channel->current_adc_channel = ADC_1;
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	fc 01       	movw	r30, r24
     6e6:	22 af       	std	Z+58, r18	; 0x3a
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	fc 01       	movw	r30, r24
     6ee:	15 8e       	std	Z+29, r1	; 0x1d
            channel->current_pwm_channel = PWM_CHANNEL_2;
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	22 e0       	ldi	r18, 0x02	; 2
     6f6:	fc 01       	movw	r30, r24
     6f8:	23 af       	std	Z+59, r18	; 0x3b
            break;
     6fa:	15 c0       	rjmp	.+42     	; 0x726 <init_channel+0x74>
        case PSU_CHANNEL_1:
            channel->voltage_adc_channel = ADC_2;
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	22 e0       	ldi	r18, 0x02	; 2
     702:	fc 01       	movw	r30, r24
     704:	24 8f       	std	Z+28, r18	; 0x1c
            channel->current_adc_channel = ADC_3;
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	23 e0       	ldi	r18, 0x03	; 3
     70c:	fc 01       	movw	r30, r24
     70e:	22 af       	std	Z+58, r18	; 0x3a
            channel->voltage_pwm_channel = PWM_CHANNEL_1;
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	21 e0       	ldi	r18, 0x01	; 1
     716:	fc 01       	movw	r30, r24
     718:	25 8f       	std	Z+29, r18	; 0x1d
            channel->current_pwm_channel = PWM_CHANNEL_3;
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	23 e0       	ldi	r18, 0x03	; 3
     720:	fc 01       	movw	r30, r24
     722:	23 af       	std	Z+59, r18	; 0x3b
            break;
     724:	00 00       	nop
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	9a 81       	ldd	r25, Y+2	; 0x02
     72a:	fc 01       	movw	r30, r24
     72c:	11 8a       	std	Z+17, r1	; 0x11
     72e:	10 8a       	std	Z+16, r1	; 0x10
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	9a 81       	ldd	r25, Y+2	; 0x02
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	33 e0       	ldi	r19, 0x03	; 3
     738:	fc 01       	movw	r30, r24
     73a:	33 8b       	std	Z+19, r19	; 0x13
     73c:	22 8b       	std	Z+18, r18	; 0x12
    channel->voltage_readout.scale.min_scaled = 0;
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	fc 01       	movw	r30, r24
     744:	15 8a       	std	Z+21, r1	; 0x15
     746:	14 8a       	std	Z+20, r1	; 0x14
    channel->voltage_readout.scale.max_scaled = 4980;//25575;  /* Voltage */
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	24 e7       	ldi	r18, 0x74	; 116
     74e:	33 e1       	ldi	r19, 0x13	; 19
     750:	fc 01       	movw	r30, r24
     752:	37 8b       	std	Z+23, r19	; 0x17
     754:	26 8b       	std	Z+22, r18	; 0x16

    channel->current_readout.scale.min = 0;
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	9a 81       	ldd	r25, Y+2	; 0x02
     75a:	fc 01       	movw	r30, r24
     75c:	17 a6       	std	Z+47, r1	; 0x2f
     75e:	16 a6       	std	Z+46, r1	; 0x2e
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	33 e0       	ldi	r19, 0x03	; 3
     768:	fc 01       	movw	r30, r24
     76a:	31 ab       	std	Z+49, r19	; 0x31
     76c:	20 ab       	std	Z+48, r18	; 0x30
    channel->current_readout.scale.min_scaled = 0;
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	13 aa       	std	Z+51, r1	; 0x33
     776:	12 aa       	std	Z+50, r1	; 0x32
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	38 e0       	ldi	r19, 0x08	; 8
     780:	fc 01       	movw	r30, r24
     782:	35 ab       	std	Z+53, r19	; 0x35
     784:	24 ab       	std	Z+52, r18	; 0x34

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	fc 01       	movw	r30, r24
     78c:	24 89       	ldd	r18, Z+20	; 0x14
     78e:	35 89       	ldd	r19, Z+21	; 0x15
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	9a 81       	ldd	r25, Y+2	; 0x02
     794:	fc 01       	movw	r30, r24
     796:	33 83       	std	Z+3, r19	; 0x03
     798:	22 83       	std	Z+2, r18	; 0x02
    channel->voltage_setpoint.scale.max = 4980;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	24 e7       	ldi	r18, 0x74	; 116
     7a0:	33 e1       	ldi	r19, 0x13	; 19
     7a2:	fc 01       	movw	r30, r24
     7a4:	35 83       	std	Z+5, r19	; 0x05
     7a6:	24 83       	std	Z+4, r18	; 0x04
    channel->voltage_setpoint.scale.min_scaled = 0;
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	fc 01       	movw	r30, r24
     7ae:	17 82       	std	Z+7, r1	; 0x07
     7b0:	16 82       	std	Z+6, r1	; 0x06
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     7b2:	89 81       	ldd	r24, Y+1	; 0x01
     7b4:	9a 81       	ldd	r25, Y+2	; 0x02
     7b6:	fc 01       	movw	r30, r24
     7b8:	85 8d       	ldd	r24, Z+29	; 0x1d
     7ba:	0e 94 fe 05 	call	0xbfc	; 0xbfc <pwm_get_resolution>
     7be:	9c 01       	movw	r18, r24
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	fc 01       	movw	r30, r24
     7c6:	31 87       	std	Z+9, r19	; 0x09
     7c8:	20 87       	std	Z+8, r18	; 0x08

    channel->current_setpoint.scale.min = 0;
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	fc 01       	movw	r30, r24
     7d0:	11 a2       	std	Z+33, r1	; 0x21
     7d2:	10 a2       	std	Z+32, r1	; 0x20
    channel->current_setpoint.scale.max = 4980;
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	24 e7       	ldi	r18, 0x74	; 116
     7da:	33 e1       	ldi	r19, 0x13	; 19
     7dc:	fc 01       	movw	r30, r24
     7de:	33 a3       	std	Z+35, r19	; 0x23
     7e0:	22 a3       	std	Z+34, r18	; 0x22
    channel->current_setpoint.scale.min_scaled = 0;
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	fc 01       	movw	r30, r24
     7e8:	15 a2       	std	Z+37, r1	; 0x25
     7ea:	14 a2       	std	Z+36, r1	; 0x24
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	9a 81       	ldd	r25, Y+2	; 0x02
     7f0:	fc 01       	movw	r30, r24
     7f2:	83 ad       	ldd	r24, Z+59	; 0x3b
     7f4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <pwm_get_resolution>
     7f8:	9c 01       	movw	r18, r24
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	fc 01       	movw	r30, r24
     800:	37 a3       	std	Z+39, r19	; 0x27
     802:	26 a3       	std	Z+38, r18	; 0x26

}
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <init_psu>:

static void init_psu(t_psu_channel *channel)
{
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <init_psu+0x6>
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9b 83       	std	Y+3, r25	; 0x03
     81e:	8a 83       	std	Y+2, r24	; 0x02

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     820:	19 82       	std	Y+1, r1	; 0x01
     822:	13 c0       	rjmp	.+38     	; 0x84a <init_psu+0x3a>
    {
        init_channel(&channel[i], (e_psu_channel)i);
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	28 2f       	mov	r18, r24
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4c e3       	ldi	r20, 0x3C	; 60
     82c:	42 9f       	mul	r20, r18
     82e:	c0 01       	movw	r24, r0
     830:	43 9f       	mul	r20, r19
     832:	90 0d       	add	r25, r0
     834:	11 24       	eor	r1, r1
     836:	2a 81       	ldd	r18, Y+2	; 0x02
     838:	3b 81       	ldd	r19, Y+3	; 0x03
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	69 81       	ldd	r22, Y+1	; 0x01
     840:	0e 94 59 03 	call	0x6b2	; 0x6b2 <init_channel>
static void init_psu(t_psu_channel *channel)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	89 83       	std	Y+1, r24	; 0x01
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	50 f3       	brcs	.-44     	; 0x824 <init_psu+0x14>
    {
        init_channel(&channel[i], (e_psu_channel)i);
    }

}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <init_io>:

static void init_io(void)
{
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62

    cli();
     864:	f8 94       	cli

    /* UART */
    uart_init();
     866:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_init>
    stdout = &uart_output;
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	90 93 05 02 	sts	0x0205, r25
     872:	80 93 04 02 	sts	0x0204, r24
    stdin  = &uart_input;
     876:	8e e0       	ldi	r24, 0x0E	; 14
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	90 93 03 02 	sts	0x0203, r25
     87e:	80 93 02 02 	sts	0x0202, r24

    /* ADC */
    adc_init();
     882:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <adc_init>

    /* PWM */
    pwm_init();
     886:	0e 94 1d 05 	call	0xa3a	; 0xa3a <pwm_init>

    /* System timer */
    timer_init();
     88a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer_init>

    sei();
     88e:	78 94       	sei

}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <adc_processing>:

static void adc_processing(t_psu_channel *channel)
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	00 d0       	rcall	.+0      	; 0x89c <adc_processing+0x6>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	fc 01       	movw	r30, r24
     8aa:	84 8d       	ldd	r24, Z+28	; 0x1c
     8ac:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_get>
     8b0:	9c 01       	movw	r18, r24
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	fc 01       	movw	r30, r24
     8b8:	31 8f       	std	Z+25, r19	; 0x19
     8ba:	20 8f       	std	Z+24, r18	; 0x18
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	9c 01       	movw	r18, r24
     8c2:	22 5f       	subi	r18, 0xF2	; 242
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	48 96       	adiw	r24, 0x18	; 24
     8cc:	b9 01       	movw	r22, r18
     8ce:	0e 94 9d 02 	call	0x53a	; 0x53a <lib_scale>

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	fc 01       	movw	r30, r24
     8d8:	82 ad       	ldd	r24, Z+58	; 0x3a
     8da:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_get>
     8de:	9c 01       	movw	r18, r24
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	fc 01       	movw	r30, r24
     8e6:	37 ab       	std	Z+55, r19	; 0x37
     8e8:	26 ab       	std	Z+54, r18	; 0x36
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	9c 01       	movw	r18, r24
     8f0:	24 5d       	subi	r18, 0xD4	; 212
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	c6 96       	adiw	r24, 0x36	; 54
     8fa:	b9 01       	movw	r22, r18
     8fc:	0e 94 9d 02 	call	0x53a	; 0x53a <lib_scale>

}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <pwm_processing>:

static void pwm_processing(t_psu_channel *channel)
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <pwm_processing+0x6>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	9a 83       	std	Y+2, r25	; 0x02
     916:	89 83       	std	Y+1, r24	; 0x01

    /* Voltage */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	3a 81       	ldd	r19, Y+2	; 0x02
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	0a 96       	adiw	r24, 0x0a	; 10
     922:	b9 01       	movw	r22, r18
     924:	0e 94 9d 02 	call	0x53a	; 0x53a <lib_scale>
    pwm_set(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	fc 01       	movw	r30, r24
     92e:	84 85       	ldd	r24, Z+12	; 0x0c
     930:	95 85       	ldd	r25, Z+13	; 0x0d
     932:	29 81       	ldd	r18, Y+1	; 0x01
     934:	3a 81       	ldd	r19, Y+2	; 0x02
     936:	f9 01       	movw	r30, r18
     938:	25 8d       	ldd	r18, Z+29	; 0x1d
     93a:	bc 01       	movw	r22, r24
     93c:	82 2f       	mov	r24, r18
     93e:	0e 94 a3 05 	call	0xb46	; 0xb46 <pwm_set>

    /* Current */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	9c 01       	movw	r18, r24
     948:	22 5e       	subi	r18, 0xE2	; 226
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	9a 81       	ldd	r25, Y+2	; 0x02
     950:	88 96       	adiw	r24, 0x28	; 40
     952:	b9 01       	movw	r22, r18
     954:	0e 94 9d 02 	call	0x53a	; 0x53a <lib_scale>
    pwm_set(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	82 a5       	ldd	r24, Z+42	; 0x2a
     960:	93 a5       	ldd	r25, Z+43	; 0x2b
     962:	29 81       	ldd	r18, Y+1	; 0x01
     964:	3a 81       	ldd	r19, Y+2	; 0x02
     966:	f9 01       	movw	r30, r18
     968:	23 ad       	ldd	r18, Z+59	; 0x3b
     96a:	bc 01       	movw	r22, r24
     96c:	82 2f       	mov	r24, r18
     96e:	0e 94 a3 05 	call	0xb46	; 0xb46 <pwm_set>

}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <input_processing>:

static void input_processing(void)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	1f 92       	push	r1
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     986:	19 82       	std	Y+1, r1	; 0x01
     988:	10 c0       	rjmp	.+32     	; 0x9aa <input_processing+0x2e>
    {
        adc_processing(&psu_channels[i]);
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	4c e3       	ldi	r20, 0x3C	; 60
     992:	42 9f       	mul	r20, r18
     994:	c0 01       	movw	r24, r0
     996:	43 9f       	mul	r20, r19
     998:	90 0d       	add	r25, r0
     99a:	11 24       	eor	r1, r1
     99c:	82 59       	subi	r24, 0x92	; 146
     99e:	9e 4f       	sbci	r25, 0xFE	; 254
     9a0:	0e 94 4b 04 	call	0x896	; 0x896 <adc_processing>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	68 f3       	brcs	.-38     	; 0x98a <input_processing+0xe>
    {
        adc_processing(&psu_channels[i]);
    }

}
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <output_processing>:

static void output_processing(void)
{
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	1f 92       	push	r1
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     9c2:	19 82       	std	Y+1, r1	; 0x01
     9c4:	10 c0       	rjmp	.+32     	; 0x9e6 <output_processing+0x2e>
    {
        pwm_processing(&psu_channels[i]);
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	4c e3       	ldi	r20, 0x3C	; 60
     9ce:	42 9f       	mul	r20, r18
     9d0:	c0 01       	movw	r24, r0
     9d2:	43 9f       	mul	r20, r19
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	82 59       	subi	r24, 0x92	; 146
     9da:	9e 4f       	sbci	r25, 0xFE	; 254
     9dc:	0e 94 85 04 	call	0x90a	; 0x90a <pwm_processing>

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	68 f3       	brcs	.-38     	; 0x9c6 <output_processing+0xe>
    {
        pwm_processing(&psu_channels[i]);
    }

}
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <main>:

int main(void)
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62

    /* System init */
    system_init();
     9fc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <system_init>

    /* Initialize I/Os */
    init_io();
     a00:	0e 94 2e 04 	call	0x85c	; 0x85c <init_io>

    /* Init ranges and precisions */
    init_psu(psu_channels);
     a04:	8e e6       	ldi	r24, 0x6E	; 110
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 08 04 	call	0x810	; 0x810 <init_psu>
    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/

    printf("Starting the main loop\r\n");
     a0c:	85 e2       	ldi	r24, 0x25	; 37
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 ed 09 	call	0x13da	; 0x13da <puts>
    while (1)
    {
        //DBG_LOW;
        /* Periodic functions */
        //adc_periodic();
        input_processing();
     a14:	0e 94 be 04 	call	0x97c	; 0x97c <input_processing>
//printf("%d (%d)\r\n", channels[PSU_CHANNEL_0].voltage_readout.value.scaled, channels[PSU_CHANNEL_0].voltage_readout.value.raw);
//_delay_ms(500);
        /** DEBUG PERIODIC FUNCS **/
        psu_channels[0].voltage_setpoint.value.raw = 1785;
     a18:	89 ef       	ldi	r24, 0xF9	; 249
     a1a:	96 e0       	ldi	r25, 0x06	; 6
     a1c:	90 93 79 01 	sts	0x0179, r25
     a20:	80 93 78 01 	sts	0x0178, r24
        psu_channels[0].current_setpoint.value.raw = 2047;
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	97 e0       	ldi	r25, 0x07	; 7
     a28:	90 93 97 01 	sts	0x0197, r25
     a2c:	80 93 96 01 	sts	0x0196, r24

        /* Debug the timer */
        timer_debug();
     a30:	0e 94 8d 06 	call	0xd1a	; 0xd1a <timer_debug>

        /* Output processing */
        output_processing();
     a34:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <output_processing>

    }
     a38:	ed cf       	rjmp	.-38     	; 0xa14 <main+0x20>

00000a3a <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	1f 92       	push	r1
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     a44:	19 82       	std	Y+1, r1	; 0x01
     a46:	30 c0       	rjmp	.+96     	; 0xaa8 <pwm_init+0x6e>
    {
        pwm_channels[i].duty = 0;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	c9 01       	movw	r24, r18
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	87 51       	subi	r24, 0x17	; 23
     a5e:	9e 4f       	sbci	r25, 0xFE	; 254
     a60:	fc 01       	movw	r30, r24
     a62:	11 82       	std	Z+1, r1	; 0x01
     a64:	10 82       	st	Z, r1
        pwm_channels[i].resolution = 0;
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	28 2f       	mov	r18, r24
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	c9 01       	movw	r24, r18
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	82 0f       	add	r24, r18
     a78:	93 1f       	adc	r25, r19
     a7a:	89 51       	subi	r24, 0x19	; 25
     a7c:	9e 4f       	sbci	r25, 0xFE	; 254
     a7e:	fc 01       	movw	r30, r24
     a80:	11 82       	std	Z+1, r1	; 0x01
     a82:	10 82       	st	Z, r1
        pwm_channels[i].channel = i;
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	28 2f       	mov	r18, r24
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	c9 01       	movw	r24, r18
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	8a 51       	subi	r24, 0x1A	; 26
     a9a:	9e 4f       	sbci	r25, 0xFE	; 254
     a9c:	29 81       	ldd	r18, Y+1	; 0x01
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	84 30       	cpi	r24, 0x04	; 4
     aac:	68 f2       	brcs	.-102    	; 0xa48 <pwm_init+0xe>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1)); //
     aae:	80 e8       	ldi	r24, 0x80	; 128
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	20 ea       	ldi	r18, 0xA0	; 160
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18
    TCCR1B = ((PWM_MODE << 3) | 0x11); // ck/1
     ab8:	81 e8       	ldi	r24, 0x81	; 129
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	21 e1       	ldi	r18, 0x11	; 17
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
//    TIMSK1 = 0x20; // interrupt on capture interrupt
    ICR1H = (PWM_FREQ >> 8);
     ac2:	87 e8       	ldi	r24, 0x87	; 135
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	23 e0       	ldi	r18, 0x03	; 3
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
    ICR1L = (PWM_FREQ & 0xff);
     acc:	86 e8       	ldi	r24, 0x86	; 134
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	2f ef       	ldi	r18, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18

    pwm_channels[PWM_CHANNEL_0].resolution = 0x3FF;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	93 e0       	ldi	r25, 0x03	; 3
     ada:	90 93 e8 01 	sts	0x01E8, r25
     ade:	80 93 e7 01 	sts	0x01E7, r24
    pwm_channels[PWM_CHANNEL_1].resolution = 0x3FF;
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	90 93 ed 01 	sts	0x01ED, r25
     aea:	80 93 ec 01 	sts	0x01EC, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     aee:	80 eb       	ldi	r24, 0xB0	; 176
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	21 ea       	ldi	r18, 0xA1	; 161
     af4:	fc 01       	movw	r30, r24
     af6:	20 83       	st	Z, r18
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     af8:	81 eb       	ldi	r24, 0xB1	; 177
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18

    /* enable output compare match interrupt */
//    TIMSK0 |= (1 << OCIE0A);

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     b02:	84 e2       	ldi	r24, 0x24	; 36
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	24 e2       	ldi	r18, 0x24	; 36
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	f9 01       	movw	r30, r18
     b0c:	20 81       	ld	r18, Z
     b0e:	2e 60       	ori	r18, 0x0E	; 14
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
    DDRD |= (1 << PIN3);
     b14:	8a e2       	ldi	r24, 0x2A	; 42
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	2a e2       	ldi	r18, 0x2A	; 42
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	28 60       	ori	r18, 0x08	; 8
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 f2 01 	sts	0x01F2, r25
     b2e:	80 93 f1 01 	sts	0x01F1, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 f7 01 	sts	0x01F7, r25
     b3a:	80 93 f6 01 	sts	0x01F6, r24
    //OCR1AL = 0x7F;

    //OCR1BH = 0x01;
    //OCR1BL = 0x34;

}
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <pwm_set>:

void pwm_set(e_pwm_channel pwm_channel, uint16_t duty)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <pwm_set+0x6>
     b4c:	1f 92       	push	r1
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	7b 83       	std	Y+3, r23	; 0x03
     b56:	6a 83       	std	Y+2, r22	; 0x02

    pwm_channels[pwm_channel].duty = duty;
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	c9 01       	movw	r24, r18
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	82 0f       	add	r24, r18
     b6a:	93 1f       	adc	r25, r19
     b6c:	87 51       	subi	r24, 0x17	; 23
     b6e:	9e 4f       	sbci	r25, 0xFE	; 254
     b70:	2a 81       	ldd	r18, Y+2	; 0x02
     b72:	3b 81       	ldd	r19, Y+3	; 0x03
     b74:	fc 01       	movw	r30, r24
     b76:	31 83       	std	Z+1, r19	; 0x01
     b78:	20 83       	st	Z, r18

    switch(pwm_channel)
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	d9 f0       	breq	.+54     	; 0xbbc <pwm_set+0x76>
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	91 05       	cpc	r25, r1
     b8a:	1c f4       	brge	.+6      	; 0xb92 <pwm_set+0x4c>
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	41 f0       	breq	.+16     	; 0xba0 <pwm_set+0x5a>
        break;
    case PWM_CHANNEL_3:
        OCR2B = duty;
        break;
    default:
        break;
     b90:	2f c0       	rjmp	.+94     	; 0xbf0 <pwm_set+0xaa>
void pwm_set(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	91 05       	cpc	r25, r1
     b96:	01 f1       	breq	.+64     	; 0xbd8 <pwm_set+0x92>
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	19 f1       	breq	.+70     	; 0xbe4 <pwm_set+0x9e>
        break;
    case PWM_CHANNEL_3:
        OCR2B = duty;
        break;
    default:
        break;
     b9e:	28 c0       	rjmp	.+80     	; 0xbf0 <pwm_set+0xaa>
    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     ba0:	89 e8       	ldi	r24, 0x89	; 137
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	2a 81       	ldd	r18, Y+2	; 0x02
     ba6:	3b 81       	ldd	r19, Y+3	; 0x03
     ba8:	23 2f       	mov	r18, r19
     baa:	33 27       	eor	r19, r19
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
        OCR1AL = duty;
     bb0:	88 e8       	ldi	r24, 0x88	; 136
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2a 81       	ldd	r18, Y+2	; 0x02
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
        break;
     bba:	1a c0       	rjmp	.+52     	; 0xbf0 <pwm_set+0xaa>
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     bbc:	8b e8       	ldi	r24, 0x8B	; 139
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2a 81       	ldd	r18, Y+2	; 0x02
     bc2:	3b 81       	ldd	r19, Y+3	; 0x03
     bc4:	23 2f       	mov	r18, r19
     bc6:	33 27       	eor	r19, r19
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
        OCR1BL = duty;
     bcc:	8a e8       	ldi	r24, 0x8A	; 138
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	2a 81       	ldd	r18, Y+2	; 0x02
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18
        break;
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <pwm_set+0xaa>
    case PWM_CHANNEL_2:
        OCR2A = duty;
     bd8:	83 eb       	ldi	r24, 0xB3	; 179
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	2a 81       	ldd	r18, Y+2	; 0x02
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
        break;
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <pwm_set+0xaa>
    case PWM_CHANNEL_3:
        OCR2B = duty;
     be4:	84 eb       	ldi	r24, 0xB4	; 180
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2a 81       	ldd	r18, Y+2	; 0x02
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
        break;
     bee:	00 00       	nop
    default:
        break;
    }
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <pwm_get_resolution>:

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
    return pwm_channels[channel].resolution;
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	c9 01       	movw	r24, r18
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	89 51       	subi	r24, 0x19	; 25
     c1e:	9e 4f       	sbci	r25, 0xFE	; 254
     c20:	fc 01       	movw	r30, r24
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
}
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	00 90 5f 00 	lds	r0, 0x005F
     c36:	0f 92       	push	r0
     c38:	11 24       	eor	r1, r1
     c3a:	2f 93       	push	r18
     c3c:	3f 93       	push	r19
     c3e:	4f 93       	push	r20
     c40:	5f 93       	push	r21
     c42:	6f 93       	push	r22
     c44:	7f 93       	push	r23
     c46:	8f 93       	push	r24
     c48:	9f 93       	push	r25
     c4a:	af 93       	push	r26
     c4c:	bf 93       	push	r27
     c4e:	ef 93       	push	r30
     c50:	ff 93       	push	r31
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
    printf("no ISR!\r\n");
     c5a:	8d e3       	ldi	r24, 0x3D	; 61
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 ed 09 	call	0x13da	; 0x13da <puts>
    for(;;);
     c62:	ff cf       	rjmp	.-2      	; 0xc62 <__vector_default+0x34>

00000c64 <system_fatal>:
}

void system_fatal(char *str)
{
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 d0       	rcall	.+0      	; 0xc6a <system_fatal+0x6>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
    printf("%s", str);
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	8f 93       	push	r24
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	8f 93       	push	r24
     c7a:	86 e4       	ldi	r24, 0x46	; 70
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	89 2f       	mov	r24, r25
     c80:	8f 93       	push	r24
     c82:	86 e4       	ldi	r24, 0x46	; 70
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	8f 93       	push	r24
     c88:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <printf>
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
    for(;;);
     c94:	ff cf       	rjmp	.-2      	; 0xc94 <system_fatal+0x30>

00000c96 <system_reset>:
}

void system_reset(void)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <system_reset+0x6>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
    /* start at zero! */
    void (*start)(void) = 0;
     ca0:	1a 82       	std	Y+2, r1	; 0x02
     ca2:	19 82       	std	Y+1, r1	; 0x01
    start();
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	fc 01       	movw	r30, r24
     caa:	09 95       	icall
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <system_init>:
 *
 * @brief System init
 *
 */
uint8_t system_init(void)
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	1f 92       	push	r1
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     cc0:	84 e5       	ldi	r24, 0x54	; 84
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	fc 01       	movw	r30, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	89 83       	std	Y+1, r24	; 0x01

    /* Reset state for the next proper detection */
    MCUSR = 0;
     cca:	84 e5       	ldi	r24, 0x54	; 84
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	fc 01       	movw	r30, r24
     cd0:	10 82       	st	Z, r1

    return t;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd4:	0f 90       	pop	r0
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <timer_init>:
 * @brief Initialize timer, interrupt and variable.
 *        Assumes that interrupts are disabled while intializing
 *
 */
void timer_init(void)
{
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     ce4:	84 e4       	ldi	r24, 0x44	; 68
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	22 e0       	ldi	r18, 0x02	; 2
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     cee:	85 e4       	ldi	r24, 0x45	; 69
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	22 e0       	ldi	r18, 0x02	; 2
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18

    /* initialize counter */
    OCR0A = 200;
     cf8:	87 e4       	ldi	r24, 0x47	; 71
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	28 ec       	ldi	r18, 0xC8	; 200
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     d02:	8e e6       	ldi	r24, 0x6E	; 110
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	2e e6       	ldi	r18, 0x6E	; 110
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	22 60       	ori	r18, 0x02	; 2
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18

}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <timer_debug>:

void timer_debug(void)
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
#ifdef TIMER_DEBUG
    static uint32_t ts = 0;
    if (g_timestamp > (ts + 1000000L))
     d22:	80 91 fa 01 	lds	r24, 0x01FA
     d26:	90 91 fb 01 	lds	r25, 0x01FB
     d2a:	a0 91 fc 01 	lds	r26, 0x01FC
     d2e:	b0 91 fd 01 	lds	r27, 0x01FD
     d32:	9c 01       	movw	r18, r24
     d34:	ad 01       	movw	r20, r26
     d36:	20 5c       	subi	r18, 0xC0	; 192
     d38:	3d 4b       	sbci	r19, 0xBD	; 189
     d3a:	40 4f       	sbci	r20, 0xF0	; 240
     d3c:	5f 4f       	sbci	r21, 0xFF	; 255
     d3e:	80 91 fe 01 	lds	r24, 0x01FE
     d42:	90 91 ff 01 	lds	r25, 0x01FF
     d46:	a0 91 00 02 	lds	r26, 0x0200
     d4a:	b0 91 01 02 	lds	r27, 0x0201
     d4e:	28 17       	cp	r18, r24
     d50:	39 07       	cpc	r19, r25
     d52:	4a 07       	cpc	r20, r26
     d54:	5b 07       	cpc	r21, r27
     d56:	a0 f4       	brcc	.+40     	; 0xd80 <timer_debug+0x66>
    {
        ts = g_timestamp;
     d58:	80 91 fe 01 	lds	r24, 0x01FE
     d5c:	90 91 ff 01 	lds	r25, 0x01FF
     d60:	a0 91 00 02 	lds	r26, 0x0200
     d64:	b0 91 01 02 	lds	r27, 0x0201
     d68:	80 93 fa 01 	sts	0x01FA, r24
     d6c:	90 93 fb 01 	sts	0x01FB, r25
     d70:	a0 93 fc 01 	sts	0x01FC, r26
     d74:	b0 93 fd 01 	sts	0x01FD, r27
        printf("1 second trigger\r\n");
     d78:	89 e4       	ldi	r24, 0x49	; 73
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 ed 09 	call	0x13da	; 0x13da <puts>
    }
#endif
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	00 90 5f 00 	lds	r0, 0x005F
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
    g_timestamp += 100;   	/* 100us */
     da2:	80 91 fe 01 	lds	r24, 0x01FE
     da6:	90 91 ff 01 	lds	r25, 0x01FF
     daa:	a0 91 00 02 	lds	r26, 0x0200
     dae:	b0 91 01 02 	lds	r27, 0x0201
     db2:	8c 59       	subi	r24, 0x9C	; 156
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	af 4f       	sbci	r26, 0xFF	; 255
     db8:	bf 4f       	sbci	r27, 0xFF	; 255
     dba:	80 93 fe 01 	sts	0x01FE, r24
     dbe:	90 93 ff 01 	sts	0x01FF, r25
     dc2:	a0 93 00 02 	sts	0x0200, r26
     dc6:	b0 93 01 02 	sts	0x0201, r27
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	bf 91       	pop	r27
     dd0:	af 91       	pop	r26
     dd2:	9f 91       	pop	r25
     dd4:	8f 91       	pop	r24
     dd6:	0f 90       	pop	r0
     dd8:	00 92 5f 00 	sts	0x005F, r0
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <uart_init>:
#define    RXEN    RXEN0
#define    TXEN    TXEN0
#define    UCSZ1    UCSZ01
#define    UCSZ0    UCSZ00

void uart_init(void) {
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62

    /* Enable UART power */
    power_usart0_enable();
     dea:	84 e6       	ldi	r24, 0x64	; 100
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	24 e6       	ldi	r18, 0x64	; 100
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	f9 01       	movw	r30, r18
     df4:	20 81       	ld	r18, Z
     df6:	2d 7f       	andi	r18, 0xFD	; 253
     df8:	fc 01       	movw	r30, r24
     dfa:	20 83       	st	Z, r18

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
     dfc:	80 ec       	ldi	r24, 0xC0	; 192
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	20 ec       	ldi	r18, 0xC0	; 192
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	f9 01       	movw	r30, r18
     e06:	20 81       	ld	r18, Z
     e08:	22 60       	ori	r18, 0x02	; 2
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
    #else
        UCSRA &= ~(_BV(U2X0));
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     e0e:	85 ec       	ldi	r24, 0xC5	; 197
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
     e16:	84 ec       	ldi	r24, 0xC4	; 196
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     e20:	82 ec       	ldi	r24, 0xC2	; 194
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	26 e0       	ldi	r18, 0x06	; 6
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18


    // rx/tx enable
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     e2a:	81 ec       	ldi	r24, 0xC1	; 193
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	28 e1       	ldi	r18, 0x18	; 24
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
//    UBRRL = UBRRL_VALUE;




}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <uart_putchar+0x6>
     e40:	1f 92       	push	r1
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	7b 83       	std	Y+3, r23	; 0x03
     e4a:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	8a 30       	cpi	r24, 0x0A	; 10
     e50:	31 f4       	brne	.+12     	; 0xe5e <uart_putchar+0x24>
        uart_putchar('\r', stream);
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	9b 81       	ldd	r25, Y+3	; 0x03
     e56:	bc 01       	movw	r22, r24
     e58:	8d e0       	ldi	r24, 0x0D	; 13
     e5a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <uart_putchar>
    }
    loop_until_bit_is_set(UCSRA, UDRE);
     e5e:	80 ec       	ldi	r24, 0xC0	; 192
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	fc 01       	movw	r30, r24
     e64:	80 81       	ld	r24, Z
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	80 72       	andi	r24, 0x20	; 32
     e6c:	99 27       	eor	r25, r25
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	b1 f3       	breq	.-20     	; 0xe5e <uart_putchar+0x24>
    UDR = c;
     e72:	86 ec       	ldi	r24, 0xC6	; 198
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	29 81       	ldd	r18, Y+1	; 0x01
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <uart_getchar>:

char uart_getchar(FILE *stream) {
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <uart_getchar+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSRA, RXC);
     e96:	80 ec       	ldi	r24, 0xC0	; 192
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	88 23       	and	r24, r24
     ea0:	d4 f7       	brge	.-12     	; 0xe96 <uart_getchar+0xe>
    return UDR;
     ea2:	86 ec       	ldi	r24, 0xC6	; 198
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	fc 01       	movw	r30, r24
     ea8:	80 81       	ld	r24, Z
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <__divmodhi4>:
     eb4:	97 fb       	bst	r25, 7
     eb6:	07 2e       	mov	r0, r23
     eb8:	16 f4       	brtc	.+4      	; 0xebe <__divmodhi4+0xa>
     eba:	00 94       	com	r0
     ebc:	07 d0       	rcall	.+14     	; 0xecc <__divmodhi4_neg1>
     ebe:	77 fd       	sbrc	r23, 7
     ec0:	09 d0       	rcall	.+18     	; 0xed4 <__divmodhi4_neg2>
     ec2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodhi4>
     ec6:	07 fc       	sbrc	r0, 7
     ec8:	05 d0       	rcall	.+10     	; 0xed4 <__divmodhi4_neg2>
     eca:	3e f4       	brtc	.+14     	; 0xeda <__divmodhi4_exit>

00000ecc <__divmodhi4_neg1>:
     ecc:	90 95       	com	r25
     ece:	81 95       	neg	r24
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	08 95       	ret

00000ed4 <__divmodhi4_neg2>:
     ed4:	70 95       	com	r23
     ed6:	61 95       	neg	r22
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255

00000eda <__divmodhi4_exit>:
     eda:	08 95       	ret

00000edc <__divmodsi4>:
     edc:	05 2e       	mov	r0, r21
     ede:	97 fb       	bst	r25, 7
     ee0:	1e f4       	brtc	.+6      	; 0xee8 <__divmodsi4+0xc>
     ee2:	00 94       	com	r0
     ee4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__negsi2>
     ee8:	57 fd       	sbrc	r21, 7
     eea:	07 d0       	rcall	.+14     	; 0xefa <__divmodsi4_neg2>
     eec:	0e 94 a1 07 	call	0xf42	; 0xf42 <__udivmodsi4>
     ef0:	07 fc       	sbrc	r0, 7
     ef2:	03 d0       	rcall	.+6      	; 0xefa <__divmodsi4_neg2>
     ef4:	4e f4       	brtc	.+18     	; 0xf08 <__divmodsi4_exit>
     ef6:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__negsi2>

00000efa <__divmodsi4_neg2>:
     efa:	50 95       	com	r21
     efc:	40 95       	com	r20
     efe:	30 95       	com	r19
     f00:	21 95       	neg	r18
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	4f 4f       	sbci	r20, 0xFF	; 255
     f06:	5f 4f       	sbci	r21, 0xFF	; 255

00000f08 <__divmodsi4_exit>:
     f08:	08 95       	ret

00000f0a <__negsi2>:
     f0a:	90 95       	com	r25
     f0c:	80 95       	com	r24
     f0e:	70 95       	com	r23
     f10:	61 95       	neg	r22
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	08 95       	ret

00000f1a <__udivmodhi4>:
     f1a:	aa 1b       	sub	r26, r26
     f1c:	bb 1b       	sub	r27, r27
     f1e:	51 e1       	ldi	r21, 0x11	; 17
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <__udivmodhi4_ep>

00000f22 <__udivmodhi4_loop>:
     f22:	aa 1f       	adc	r26, r26
     f24:	bb 1f       	adc	r27, r27
     f26:	a6 17       	cp	r26, r22
     f28:	b7 07       	cpc	r27, r23
     f2a:	10 f0       	brcs	.+4      	; 0xf30 <__udivmodhi4_ep>
     f2c:	a6 1b       	sub	r26, r22
     f2e:	b7 0b       	sbc	r27, r23

00000f30 <__udivmodhi4_ep>:
     f30:	88 1f       	adc	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	5a 95       	dec	r21
     f36:	a9 f7       	brne	.-22     	; 0xf22 <__udivmodhi4_loop>
     f38:	80 95       	com	r24
     f3a:	90 95       	com	r25
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	08 95       	ret

00000f42 <__udivmodsi4>:
     f42:	a1 e2       	ldi	r26, 0x21	; 33
     f44:	1a 2e       	mov	r1, r26
     f46:	aa 1b       	sub	r26, r26
     f48:	bb 1b       	sub	r27, r27
     f4a:	fd 01       	movw	r30, r26
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <__udivmodsi4_ep>

00000f4e <__udivmodsi4_loop>:
     f4e:	aa 1f       	adc	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	ee 1f       	adc	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	a2 17       	cp	r26, r18
     f58:	b3 07       	cpc	r27, r19
     f5a:	e4 07       	cpc	r30, r20
     f5c:	f5 07       	cpc	r31, r21
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <__udivmodsi4_ep>
     f60:	a2 1b       	sub	r26, r18
     f62:	b3 0b       	sbc	r27, r19
     f64:	e4 0b       	sbc	r30, r20
     f66:	f5 0b       	sbc	r31, r21

00000f68 <__udivmodsi4_ep>:
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	1a 94       	dec	r1
     f72:	69 f7       	brne	.-38     	; 0xf4e <__udivmodsi4_loop>
     f74:	60 95       	com	r22
     f76:	70 95       	com	r23
     f78:	80 95       	com	r24
     f7a:	90 95       	com	r25
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	bd 01       	movw	r22, r26
     f82:	cf 01       	movw	r24, r30
     f84:	08 95       	ret

00000f86 <__subsf3>:
     f86:	50 58       	subi	r21, 0x80	; 128

00000f88 <__addsf3>:
     f88:	bb 27       	eor	r27, r27
     f8a:	aa 27       	eor	r26, r26
     f8c:	0e d0       	rcall	.+28     	; 0xfaa <__addsf3x>
     f8e:	70 c1       	rjmp	.+736    	; 0x1270 <__fp_round>
     f90:	61 d1       	rcall	.+706    	; 0x1254 <__fp_pscA>
     f92:	30 f0       	brcs	.+12     	; 0xfa0 <__addsf3+0x18>
     f94:	66 d1       	rcall	.+716    	; 0x1262 <__fp_pscB>
     f96:	20 f0       	brcs	.+8      	; 0xfa0 <__addsf3+0x18>
     f98:	31 f4       	brne	.+12     	; 0xfa6 <__addsf3+0x1e>
     f9a:	9f 3f       	cpi	r25, 0xFF	; 255
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <__addsf3+0x1a>
     f9e:	1e f4       	brtc	.+6      	; 0xfa6 <__addsf3+0x1e>
     fa0:	56 c1       	rjmp	.+684    	; 0x124e <__fp_nan>
     fa2:	0e f4       	brtc	.+2      	; 0xfa6 <__addsf3+0x1e>
     fa4:	e0 95       	com	r30
     fa6:	e7 fb       	bst	r30, 7
     fa8:	4c c1       	rjmp	.+664    	; 0x1242 <__fp_inf>

00000faa <__addsf3x>:
     faa:	e9 2f       	mov	r30, r25
     fac:	72 d1       	rcall	.+740    	; 0x1292 <__fp_split3>
     fae:	80 f3       	brcs	.-32     	; 0xf90 <__addsf3+0x8>
     fb0:	ba 17       	cp	r27, r26
     fb2:	62 07       	cpc	r22, r18
     fb4:	73 07       	cpc	r23, r19
     fb6:	84 07       	cpc	r24, r20
     fb8:	95 07       	cpc	r25, r21
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <__addsf3x+0x18>
     fbc:	71 f4       	brne	.+28     	; 0xfda <__addsf3x+0x30>
     fbe:	9e f5       	brtc	.+102    	; 0x1026 <__addsf3x+0x7c>
     fc0:	8a c1       	rjmp	.+788    	; 0x12d6 <__fp_zero>
     fc2:	0e f4       	brtc	.+2      	; 0xfc6 <__addsf3x+0x1c>
     fc4:	e0 95       	com	r30
     fc6:	0b 2e       	mov	r0, r27
     fc8:	ba 2f       	mov	r27, r26
     fca:	a0 2d       	mov	r26, r0
     fcc:	0b 01       	movw	r0, r22
     fce:	b9 01       	movw	r22, r18
     fd0:	90 01       	movw	r18, r0
     fd2:	0c 01       	movw	r0, r24
     fd4:	ca 01       	movw	r24, r20
     fd6:	a0 01       	movw	r20, r0
     fd8:	11 24       	eor	r1, r1
     fda:	ff 27       	eor	r31, r31
     fdc:	59 1b       	sub	r21, r25
     fde:	99 f0       	breq	.+38     	; 0x1006 <__addsf3x+0x5c>
     fe0:	59 3f       	cpi	r21, 0xF9	; 249
     fe2:	50 f4       	brcc	.+20     	; 0xff8 <__addsf3x+0x4e>
     fe4:	50 3e       	cpi	r21, 0xE0	; 224
     fe6:	68 f1       	brcs	.+90     	; 0x1042 <__addsf3x+0x98>
     fe8:	1a 16       	cp	r1, r26
     fea:	f0 40       	sbci	r31, 0x00	; 0
     fec:	a2 2f       	mov	r26, r18
     fee:	23 2f       	mov	r18, r19
     ff0:	34 2f       	mov	r19, r20
     ff2:	44 27       	eor	r20, r20
     ff4:	58 5f       	subi	r21, 0xF8	; 248
     ff6:	f3 cf       	rjmp	.-26     	; 0xfde <__addsf3x+0x34>
     ff8:	46 95       	lsr	r20
     ffa:	37 95       	ror	r19
     ffc:	27 95       	ror	r18
     ffe:	a7 95       	ror	r26
    1000:	f0 40       	sbci	r31, 0x00	; 0
    1002:	53 95       	inc	r21
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__addsf3x+0x4e>
    1006:	7e f4       	brtc	.+30     	; 0x1026 <__addsf3x+0x7c>
    1008:	1f 16       	cp	r1, r31
    100a:	ba 0b       	sbc	r27, r26
    100c:	62 0b       	sbc	r22, r18
    100e:	73 0b       	sbc	r23, r19
    1010:	84 0b       	sbc	r24, r20
    1012:	ba f0       	brmi	.+46     	; 0x1042 <__addsf3x+0x98>
    1014:	91 50       	subi	r25, 0x01	; 1
    1016:	a1 f0       	breq	.+40     	; 0x1040 <__addsf3x+0x96>
    1018:	ff 0f       	add	r31, r31
    101a:	bb 1f       	adc	r27, r27
    101c:	66 1f       	adc	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	88 1f       	adc	r24, r24
    1022:	c2 f7       	brpl	.-16     	; 0x1014 <__addsf3x+0x6a>
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <__addsf3x+0x98>
    1026:	ba 0f       	add	r27, r26
    1028:	62 1f       	adc	r22, r18
    102a:	73 1f       	adc	r23, r19
    102c:	84 1f       	adc	r24, r20
    102e:	48 f4       	brcc	.+18     	; 0x1042 <__addsf3x+0x98>
    1030:	87 95       	ror	r24
    1032:	77 95       	ror	r23
    1034:	67 95       	ror	r22
    1036:	b7 95       	ror	r27
    1038:	f7 95       	ror	r31
    103a:	9e 3f       	cpi	r25, 0xFE	; 254
    103c:	08 f0       	brcs	.+2      	; 0x1040 <__addsf3x+0x96>
    103e:	b3 cf       	rjmp	.-154    	; 0xfa6 <__addsf3+0x1e>
    1040:	93 95       	inc	r25
    1042:	88 0f       	add	r24, r24
    1044:	08 f0       	brcs	.+2      	; 0x1048 <__addsf3x+0x9e>
    1046:	99 27       	eor	r25, r25
    1048:	ee 0f       	add	r30, r30
    104a:	97 95       	ror	r25
    104c:	87 95       	ror	r24
    104e:	08 95       	ret

00001050 <__cmpsf2>:
    1050:	d4 d0       	rcall	.+424    	; 0x11fa <__fp_cmp>
    1052:	08 f4       	brcc	.+2      	; 0x1056 <__cmpsf2+0x6>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	08 95       	ret

00001058 <__divsf3>:
    1058:	0c d0       	rcall	.+24     	; 0x1072 <__divsf3x>
    105a:	0a c1       	rjmp	.+532    	; 0x1270 <__fp_round>
    105c:	02 d1       	rcall	.+516    	; 0x1262 <__fp_pscB>
    105e:	40 f0       	brcs	.+16     	; 0x1070 <__divsf3+0x18>
    1060:	f9 d0       	rcall	.+498    	; 0x1254 <__fp_pscA>
    1062:	30 f0       	brcs	.+12     	; 0x1070 <__divsf3+0x18>
    1064:	21 f4       	brne	.+8      	; 0x106e <__divsf3+0x16>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	19 f0       	breq	.+6      	; 0x1070 <__divsf3+0x18>
    106a:	eb c0       	rjmp	.+470    	; 0x1242 <__fp_inf>
    106c:	51 11       	cpse	r21, r1
    106e:	34 c1       	rjmp	.+616    	; 0x12d8 <__fp_szero>
    1070:	ee c0       	rjmp	.+476    	; 0x124e <__fp_nan>

00001072 <__divsf3x>:
    1072:	0f d1       	rcall	.+542    	; 0x1292 <__fp_split3>
    1074:	98 f3       	brcs	.-26     	; 0x105c <__divsf3+0x4>

00001076 <__divsf3_pse>:
    1076:	99 23       	and	r25, r25
    1078:	c9 f3       	breq	.-14     	; 0x106c <__divsf3+0x14>
    107a:	55 23       	and	r21, r21
    107c:	b1 f3       	breq	.-20     	; 0x106a <__divsf3+0x12>
    107e:	95 1b       	sub	r25, r21
    1080:	55 0b       	sbc	r21, r21
    1082:	bb 27       	eor	r27, r27
    1084:	aa 27       	eor	r26, r26
    1086:	62 17       	cp	r22, r18
    1088:	73 07       	cpc	r23, r19
    108a:	84 07       	cpc	r24, r20
    108c:	38 f0       	brcs	.+14     	; 0x109c <__divsf3_pse+0x26>
    108e:	9f 5f       	subi	r25, 0xFF	; 255
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	44 1f       	adc	r20, r20
    1098:	aa 1f       	adc	r26, r26
    109a:	a9 f3       	breq	.-22     	; 0x1086 <__divsf3_pse+0x10>
    109c:	33 d0       	rcall	.+102    	; 0x1104 <__divsf3_pse+0x8e>
    109e:	0e 2e       	mov	r0, r30
    10a0:	3a f0       	brmi	.+14     	; 0x10b0 <__divsf3_pse+0x3a>
    10a2:	e0 e8       	ldi	r30, 0x80	; 128
    10a4:	30 d0       	rcall	.+96     	; 0x1106 <__divsf3_pse+0x90>
    10a6:	91 50       	subi	r25, 0x01	; 1
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	e6 95       	lsr	r30
    10ac:	00 1c       	adc	r0, r0
    10ae:	ca f7       	brpl	.-14     	; 0x10a2 <__divsf3_pse+0x2c>
    10b0:	29 d0       	rcall	.+82     	; 0x1104 <__divsf3_pse+0x8e>
    10b2:	fe 2f       	mov	r31, r30
    10b4:	27 d0       	rcall	.+78     	; 0x1104 <__divsf3_pse+0x8e>
    10b6:	66 0f       	add	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	bb 1f       	adc	r27, r27
    10be:	26 17       	cp	r18, r22
    10c0:	37 07       	cpc	r19, r23
    10c2:	48 07       	cpc	r20, r24
    10c4:	ab 07       	cpc	r26, r27
    10c6:	b0 e8       	ldi	r27, 0x80	; 128
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__divsf3_pse+0x56>
    10ca:	bb 0b       	sbc	r27, r27
    10cc:	80 2d       	mov	r24, r0
    10ce:	bf 01       	movw	r22, r30
    10d0:	ff 27       	eor	r31, r31
    10d2:	93 58       	subi	r25, 0x83	; 131
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	2a f0       	brmi	.+10     	; 0x10e2 <__divsf3_pse+0x6c>
    10d8:	9e 3f       	cpi	r25, 0xFE	; 254
    10da:	51 05       	cpc	r21, r1
    10dc:	68 f0       	brcs	.+26     	; 0x10f8 <__divsf3_pse+0x82>
    10de:	b1 c0       	rjmp	.+354    	; 0x1242 <__fp_inf>
    10e0:	fb c0       	rjmp	.+502    	; 0x12d8 <__fp_szero>
    10e2:	5f 3f       	cpi	r21, 0xFF	; 255
    10e4:	ec f3       	brlt	.-6      	; 0x10e0 <__divsf3_pse+0x6a>
    10e6:	98 3e       	cpi	r25, 0xE8	; 232
    10e8:	dc f3       	brlt	.-10     	; 0x10e0 <__divsf3_pse+0x6a>
    10ea:	86 95       	lsr	r24
    10ec:	77 95       	ror	r23
    10ee:	67 95       	ror	r22
    10f0:	b7 95       	ror	r27
    10f2:	f7 95       	ror	r31
    10f4:	9f 5f       	subi	r25, 0xFF	; 255
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__divsf3_pse+0x74>
    10f8:	88 0f       	add	r24, r24
    10fa:	91 1d       	adc	r25, r1
    10fc:	96 95       	lsr	r25
    10fe:	87 95       	ror	r24
    1100:	97 f9       	bld	r25, 7
    1102:	08 95       	ret
    1104:	e1 e0       	ldi	r30, 0x01	; 1
    1106:	66 0f       	add	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	bb 1f       	adc	r27, r27
    110e:	62 17       	cp	r22, r18
    1110:	73 07       	cpc	r23, r19
    1112:	84 07       	cpc	r24, r20
    1114:	ba 07       	cpc	r27, r26
    1116:	20 f0       	brcs	.+8      	; 0x1120 <__divsf3_pse+0xaa>
    1118:	62 1b       	sub	r22, r18
    111a:	73 0b       	sbc	r23, r19
    111c:	84 0b       	sbc	r24, r20
    111e:	ba 0b       	sbc	r27, r26
    1120:	ee 1f       	adc	r30, r30
    1122:	88 f7       	brcc	.-30     	; 0x1106 <__divsf3_pse+0x90>
    1124:	e0 95       	com	r30
    1126:	08 95       	ret

00001128 <__fixunssfsi>:
    1128:	bc d0       	rcall	.+376    	; 0x12a2 <__fp_splitA>
    112a:	88 f0       	brcs	.+34     	; 0x114e <__fixunssfsi+0x26>
    112c:	9f 57       	subi	r25, 0x7F	; 127
    112e:	90 f0       	brcs	.+36     	; 0x1154 <__fixunssfsi+0x2c>
    1130:	b9 2f       	mov	r27, r25
    1132:	99 27       	eor	r25, r25
    1134:	b7 51       	subi	r27, 0x17	; 23
    1136:	a0 f0       	brcs	.+40     	; 0x1160 <__fixunssfsi+0x38>
    1138:	d1 f0       	breq	.+52     	; 0x116e <__fixunssfsi+0x46>
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	1a f0       	brmi	.+6      	; 0x114a <__fixunssfsi+0x22>
    1144:	ba 95       	dec	r27
    1146:	c9 f7       	brne	.-14     	; 0x113a <__fixunssfsi+0x12>
    1148:	12 c0       	rjmp	.+36     	; 0x116e <__fixunssfsi+0x46>
    114a:	b1 30       	cpi	r27, 0x01	; 1
    114c:	81 f0       	breq	.+32     	; 0x116e <__fixunssfsi+0x46>
    114e:	c3 d0       	rcall	.+390    	; 0x12d6 <__fp_zero>
    1150:	b1 e0       	ldi	r27, 0x01	; 1
    1152:	08 95       	ret
    1154:	c0 c0       	rjmp	.+384    	; 0x12d6 <__fp_zero>
    1156:	67 2f       	mov	r22, r23
    1158:	78 2f       	mov	r23, r24
    115a:	88 27       	eor	r24, r24
    115c:	b8 5f       	subi	r27, 0xF8	; 248
    115e:	39 f0       	breq	.+14     	; 0x116e <__fixunssfsi+0x46>
    1160:	b9 3f       	cpi	r27, 0xF9	; 249
    1162:	cc f3       	brlt	.-14     	; 0x1156 <__fixunssfsi+0x2e>
    1164:	86 95       	lsr	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b3 95       	inc	r27
    116c:	d9 f7       	brne	.-10     	; 0x1164 <__fixunssfsi+0x3c>
    116e:	3e f4       	brtc	.+14     	; 0x117e <__fixunssfsi+0x56>
    1170:	90 95       	com	r25
    1172:	80 95       	com	r24
    1174:	70 95       	com	r23
    1176:	61 95       	neg	r22
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	8f 4f       	sbci	r24, 0xFF	; 255
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	08 95       	ret

00001180 <__floatunsisf>:
    1180:	e8 94       	clt
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <__floatsisf+0x12>

00001184 <__floatsisf>:
    1184:	97 fb       	bst	r25, 7
    1186:	3e f4       	brtc	.+14     	; 0x1196 <__floatsisf+0x12>
    1188:	90 95       	com	r25
    118a:	80 95       	com	r24
    118c:	70 95       	com	r23
    118e:	61 95       	neg	r22
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	8f 4f       	sbci	r24, 0xFF	; 255
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	99 23       	and	r25, r25
    1198:	a9 f0       	breq	.+42     	; 0x11c4 <__floatsisf+0x40>
    119a:	f9 2f       	mov	r31, r25
    119c:	96 e9       	ldi	r25, 0x96	; 150
    119e:	bb 27       	eor	r27, r27
    11a0:	93 95       	inc	r25
    11a2:	f6 95       	lsr	r31
    11a4:	87 95       	ror	r24
    11a6:	77 95       	ror	r23
    11a8:	67 95       	ror	r22
    11aa:	b7 95       	ror	r27
    11ac:	f1 11       	cpse	r31, r1
    11ae:	f8 cf       	rjmp	.-16     	; 0x11a0 <__floatsisf+0x1c>
    11b0:	fa f4       	brpl	.+62     	; 0x11f0 <__floatsisf+0x6c>
    11b2:	bb 0f       	add	r27, r27
    11b4:	11 f4       	brne	.+4      	; 0x11ba <__floatsisf+0x36>
    11b6:	60 ff       	sbrs	r22, 0
    11b8:	1b c0       	rjmp	.+54     	; 0x11f0 <__floatsisf+0x6c>
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	8f 4f       	sbci	r24, 0xFF	; 255
    11c0:	9f 4f       	sbci	r25, 0xFF	; 255
    11c2:	16 c0       	rjmp	.+44     	; 0x11f0 <__floatsisf+0x6c>
    11c4:	88 23       	and	r24, r24
    11c6:	11 f0       	breq	.+4      	; 0x11cc <__floatsisf+0x48>
    11c8:	96 e9       	ldi	r25, 0x96	; 150
    11ca:	11 c0       	rjmp	.+34     	; 0x11ee <__floatsisf+0x6a>
    11cc:	77 23       	and	r23, r23
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <__floatsisf+0x54>
    11d0:	9e e8       	ldi	r25, 0x8E	; 142
    11d2:	87 2f       	mov	r24, r23
    11d4:	76 2f       	mov	r23, r22
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <__floatsisf+0x5e>
    11d8:	66 23       	and	r22, r22
    11da:	71 f0       	breq	.+28     	; 0x11f8 <__floatsisf+0x74>
    11dc:	96 e8       	ldi	r25, 0x86	; 134
    11de:	86 2f       	mov	r24, r22
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	2a f0       	brmi	.+10     	; 0x11f0 <__floatsisf+0x6c>
    11e6:	9a 95       	dec	r25
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	da f7       	brpl	.-10     	; 0x11e6 <__floatsisf+0x62>
    11f0:	88 0f       	add	r24, r24
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <__fp_cmp>:
    11fa:	99 0f       	add	r25, r25
    11fc:	00 08       	sbc	r0, r0
    11fe:	55 0f       	add	r21, r21
    1200:	aa 0b       	sbc	r26, r26
    1202:	e0 e8       	ldi	r30, 0x80	; 128
    1204:	fe ef       	ldi	r31, 0xFE	; 254
    1206:	16 16       	cp	r1, r22
    1208:	17 06       	cpc	r1, r23
    120a:	e8 07       	cpc	r30, r24
    120c:	f9 07       	cpc	r31, r25
    120e:	c0 f0       	brcs	.+48     	; 0x1240 <__fp_cmp+0x46>
    1210:	12 16       	cp	r1, r18
    1212:	13 06       	cpc	r1, r19
    1214:	e4 07       	cpc	r30, r20
    1216:	f5 07       	cpc	r31, r21
    1218:	98 f0       	brcs	.+38     	; 0x1240 <__fp_cmp+0x46>
    121a:	62 1b       	sub	r22, r18
    121c:	73 0b       	sbc	r23, r19
    121e:	84 0b       	sbc	r24, r20
    1220:	95 0b       	sbc	r25, r21
    1222:	39 f4       	brne	.+14     	; 0x1232 <__fp_cmp+0x38>
    1224:	0a 26       	eor	r0, r26
    1226:	61 f0       	breq	.+24     	; 0x1240 <__fp_cmp+0x46>
    1228:	23 2b       	or	r18, r19
    122a:	24 2b       	or	r18, r20
    122c:	25 2b       	or	r18, r21
    122e:	21 f4       	brne	.+8      	; 0x1238 <__fp_cmp+0x3e>
    1230:	08 95       	ret
    1232:	0a 26       	eor	r0, r26
    1234:	09 f4       	brne	.+2      	; 0x1238 <__fp_cmp+0x3e>
    1236:	a1 40       	sbci	r26, 0x01	; 1
    1238:	a6 95       	lsr	r26
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	81 1d       	adc	r24, r1
    123e:	81 1d       	adc	r24, r1
    1240:	08 95       	ret

00001242 <__fp_inf>:
    1242:	97 f9       	bld	r25, 7
    1244:	9f 67       	ori	r25, 0x7F	; 127
    1246:	80 e8       	ldi	r24, 0x80	; 128
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	08 95       	ret

0000124e <__fp_nan>:
    124e:	9f ef       	ldi	r25, 0xFF	; 255
    1250:	80 ec       	ldi	r24, 0xC0	; 192
    1252:	08 95       	ret

00001254 <__fp_pscA>:
    1254:	00 24       	eor	r0, r0
    1256:	0a 94       	dec	r0
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	18 06       	cpc	r1, r24
    125e:	09 06       	cpc	r0, r25
    1260:	08 95       	ret

00001262 <__fp_pscB>:
    1262:	00 24       	eor	r0, r0
    1264:	0a 94       	dec	r0
    1266:	12 16       	cp	r1, r18
    1268:	13 06       	cpc	r1, r19
    126a:	14 06       	cpc	r1, r20
    126c:	05 06       	cpc	r0, r21
    126e:	08 95       	ret

00001270 <__fp_round>:
    1270:	09 2e       	mov	r0, r25
    1272:	03 94       	inc	r0
    1274:	00 0c       	add	r0, r0
    1276:	11 f4       	brne	.+4      	; 0x127c <__fp_round+0xc>
    1278:	88 23       	and	r24, r24
    127a:	52 f0       	brmi	.+20     	; 0x1290 <__fp_round+0x20>
    127c:	bb 0f       	add	r27, r27
    127e:	40 f4       	brcc	.+16     	; 0x1290 <__fp_round+0x20>
    1280:	bf 2b       	or	r27, r31
    1282:	11 f4       	brne	.+4      	; 0x1288 <__fp_round+0x18>
    1284:	60 ff       	sbrs	r22, 0
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <__fp_round+0x20>
    1288:	6f 5f       	subi	r22, 0xFF	; 255
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	08 95       	ret

00001292 <__fp_split3>:
    1292:	57 fd       	sbrc	r21, 7
    1294:	90 58       	subi	r25, 0x80	; 128
    1296:	44 0f       	add	r20, r20
    1298:	55 1f       	adc	r21, r21
    129a:	59 f0       	breq	.+22     	; 0x12b2 <__fp_splitA+0x10>
    129c:	5f 3f       	cpi	r21, 0xFF	; 255
    129e:	71 f0       	breq	.+28     	; 0x12bc <__fp_splitA+0x1a>
    12a0:	47 95       	ror	r20

000012a2 <__fp_splitA>:
    12a2:	88 0f       	add	r24, r24
    12a4:	97 fb       	bst	r25, 7
    12a6:	99 1f       	adc	r25, r25
    12a8:	61 f0       	breq	.+24     	; 0x12c2 <__fp_splitA+0x20>
    12aa:	9f 3f       	cpi	r25, 0xFF	; 255
    12ac:	79 f0       	breq	.+30     	; 0x12cc <__fp_splitA+0x2a>
    12ae:	87 95       	ror	r24
    12b0:	08 95       	ret
    12b2:	12 16       	cp	r1, r18
    12b4:	13 06       	cpc	r1, r19
    12b6:	14 06       	cpc	r1, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	f2 cf       	rjmp	.-28     	; 0x12a0 <__fp_split3+0xe>
    12bc:	46 95       	lsr	r20
    12be:	f1 df       	rcall	.-30     	; 0x12a2 <__fp_splitA>
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <__fp_splitA+0x30>
    12c2:	16 16       	cp	r1, r22
    12c4:	17 06       	cpc	r1, r23
    12c6:	18 06       	cpc	r1, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	f1 cf       	rjmp	.-30     	; 0x12ae <__fp_splitA+0xc>
    12cc:	86 95       	lsr	r24
    12ce:	71 05       	cpc	r23, r1
    12d0:	61 05       	cpc	r22, r1
    12d2:	08 94       	sec
    12d4:	08 95       	ret

000012d6 <__fp_zero>:
    12d6:	e8 94       	clt

000012d8 <__fp_szero>:
    12d8:	bb 27       	eor	r27, r27
    12da:	66 27       	eor	r22, r22
    12dc:	77 27       	eor	r23, r23
    12de:	cb 01       	movw	r24, r22
    12e0:	97 f9       	bld	r25, 7
    12e2:	08 95       	ret

000012e4 <__gesf2>:
    12e4:	8a df       	rcall	.-236    	; 0x11fa <__fp_cmp>
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <__gesf2+0x6>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	08 95       	ret

000012ec <__mulsf3>:
    12ec:	0b d0       	rcall	.+22     	; 0x1304 <__mulsf3x>
    12ee:	c0 cf       	rjmp	.-128    	; 0x1270 <__fp_round>
    12f0:	b1 df       	rcall	.-158    	; 0x1254 <__fp_pscA>
    12f2:	28 f0       	brcs	.+10     	; 0x12fe <__mulsf3+0x12>
    12f4:	b6 df       	rcall	.-148    	; 0x1262 <__fp_pscB>
    12f6:	18 f0       	brcs	.+6      	; 0x12fe <__mulsf3+0x12>
    12f8:	95 23       	and	r25, r21
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__mulsf3+0x12>
    12fc:	a2 cf       	rjmp	.-188    	; 0x1242 <__fp_inf>
    12fe:	a7 cf       	rjmp	.-178    	; 0x124e <__fp_nan>
    1300:	11 24       	eor	r1, r1
    1302:	ea cf       	rjmp	.-44     	; 0x12d8 <__fp_szero>

00001304 <__mulsf3x>:
    1304:	c6 df       	rcall	.-116    	; 0x1292 <__fp_split3>
    1306:	a0 f3       	brcs	.-24     	; 0x12f0 <__mulsf3+0x4>

00001308 <__mulsf3_pse>:
    1308:	95 9f       	mul	r25, r21
    130a:	d1 f3       	breq	.-12     	; 0x1300 <__mulsf3+0x14>
    130c:	95 0f       	add	r25, r21
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	55 1f       	adc	r21, r21
    1312:	62 9f       	mul	r22, r18
    1314:	f0 01       	movw	r30, r0
    1316:	72 9f       	mul	r23, r18
    1318:	bb 27       	eor	r27, r27
    131a:	f0 0d       	add	r31, r0
    131c:	b1 1d       	adc	r27, r1
    131e:	63 9f       	mul	r22, r19
    1320:	aa 27       	eor	r26, r26
    1322:	f0 0d       	add	r31, r0
    1324:	b1 1d       	adc	r27, r1
    1326:	aa 1f       	adc	r26, r26
    1328:	64 9f       	mul	r22, r20
    132a:	66 27       	eor	r22, r22
    132c:	b0 0d       	add	r27, r0
    132e:	a1 1d       	adc	r26, r1
    1330:	66 1f       	adc	r22, r22
    1332:	82 9f       	mul	r24, r18
    1334:	22 27       	eor	r18, r18
    1336:	b0 0d       	add	r27, r0
    1338:	a1 1d       	adc	r26, r1
    133a:	62 1f       	adc	r22, r18
    133c:	73 9f       	mul	r23, r19
    133e:	b0 0d       	add	r27, r0
    1340:	a1 1d       	adc	r26, r1
    1342:	62 1f       	adc	r22, r18
    1344:	83 9f       	mul	r24, r19
    1346:	a0 0d       	add	r26, r0
    1348:	61 1d       	adc	r22, r1
    134a:	22 1f       	adc	r18, r18
    134c:	74 9f       	mul	r23, r20
    134e:	33 27       	eor	r19, r19
    1350:	a0 0d       	add	r26, r0
    1352:	61 1d       	adc	r22, r1
    1354:	23 1f       	adc	r18, r19
    1356:	84 9f       	mul	r24, r20
    1358:	60 0d       	add	r22, r0
    135a:	21 1d       	adc	r18, r1
    135c:	82 2f       	mov	r24, r18
    135e:	76 2f       	mov	r23, r22
    1360:	6a 2f       	mov	r22, r26
    1362:	11 24       	eor	r1, r1
    1364:	9f 57       	subi	r25, 0x7F	; 127
    1366:	50 40       	sbci	r21, 0x00	; 0
    1368:	8a f0       	brmi	.+34     	; 0x138c <__mulsf3_pse+0x84>
    136a:	e1 f0       	breq	.+56     	; 0x13a4 <__mulsf3_pse+0x9c>
    136c:	88 23       	and	r24, r24
    136e:	4a f0       	brmi	.+18     	; 0x1382 <__mulsf3_pse+0x7a>
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	bb 1f       	adc	r27, r27
    1376:	66 1f       	adc	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	a9 f7       	brne	.-22     	; 0x136c <__mulsf3_pse+0x64>
    1382:	9e 3f       	cpi	r25, 0xFE	; 254
    1384:	51 05       	cpc	r21, r1
    1386:	70 f0       	brcs	.+28     	; 0x13a4 <__mulsf3_pse+0x9c>
    1388:	5c cf       	rjmp	.-328    	; 0x1242 <__fp_inf>
    138a:	a6 cf       	rjmp	.-180    	; 0x12d8 <__fp_szero>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	ec f3       	brlt	.-6      	; 0x138a <__mulsf3_pse+0x82>
    1390:	98 3e       	cpi	r25, 0xE8	; 232
    1392:	dc f3       	brlt	.-10     	; 0x138a <__mulsf3_pse+0x82>
    1394:	86 95       	lsr	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	b7 95       	ror	r27
    139c:	f7 95       	ror	r31
    139e:	e7 95       	ror	r30
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	c1 f7       	brne	.-16     	; 0x1394 <__mulsf3_pse+0x8c>
    13a4:	fe 2b       	or	r31, r30
    13a6:	88 0f       	add	r24, r24
    13a8:	91 1d       	adc	r25, r1
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret

000013b2 <printf>:
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ef ed       	ldi	r30, 0xDF	; 223
    13b8:	f9 e0       	ldi	r31, 0x09	; 9
    13ba:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__prologue_saves__+0x20>
    13be:	fe 01       	movw	r30, r28
    13c0:	35 96       	adiw	r30, 0x05	; 5
    13c2:	61 91       	ld	r22, Z+
    13c4:	71 91       	ld	r23, Z+
    13c6:	af 01       	movw	r20, r30
    13c8:	80 91 04 02 	lds	r24, 0x0204
    13cc:	90 91 05 02 	lds	r25, 0x0205
    13d0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <vfprintf>
    13d4:	e2 e0       	ldi	r30, 0x02	; 2
    13d6:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__epilogue_restores__+0x20>

000013da <puts>:
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	e0 91 04 02 	lds	r30, 0x0204
    13e6:	f0 91 05 02 	lds	r31, 0x0205
    13ea:	23 81       	ldd	r18, Z+3	; 0x03
    13ec:	21 ff       	sbrs	r18, 1
    13ee:	1b c0       	rjmp	.+54     	; 0x1426 <puts+0x4c>
    13f0:	ec 01       	movw	r28, r24
    13f2:	00 e0       	ldi	r16, 0x00	; 0
    13f4:	10 e0       	ldi	r17, 0x00	; 0
    13f6:	89 91       	ld	r24, Y+
    13f8:	60 91 04 02 	lds	r22, 0x0204
    13fc:	70 91 05 02 	lds	r23, 0x0205
    1400:	db 01       	movw	r26, r22
    1402:	18 96       	adiw	r26, 0x08	; 8
    1404:	ed 91       	ld	r30, X+
    1406:	fc 91       	ld	r31, X
    1408:	19 97       	sbiw	r26, 0x09	; 9
    140a:	88 23       	and	r24, r24
    140c:	31 f0       	breq	.+12     	; 0x141a <puts+0x40>
    140e:	09 95       	icall
    1410:	89 2b       	or	r24, r25
    1412:	89 f3       	breq	.-30     	; 0x13f6 <puts+0x1c>
    1414:	0f ef       	ldi	r16, 0xFF	; 255
    1416:	1f ef       	ldi	r17, 0xFF	; 255
    1418:	ee cf       	rjmp	.-36     	; 0x13f6 <puts+0x1c>
    141a:	8a e0       	ldi	r24, 0x0A	; 10
    141c:	09 95       	icall
    141e:	89 2b       	or	r24, r25
    1420:	11 f4       	brne	.+4      	; 0x1426 <puts+0x4c>
    1422:	c8 01       	movw	r24, r16
    1424:	02 c0       	rjmp	.+4      	; 0x142a <puts+0x50>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <vfprintf>:
    1434:	ac e0       	ldi	r26, 0x0C	; 12
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e2       	ldi	r30, 0x20	; 32
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__prologue_saves__>
    1440:	7c 01       	movw	r14, r24
    1442:	6b 01       	movw	r12, r22
    1444:	8a 01       	movw	r16, r20
    1446:	fc 01       	movw	r30, r24
    1448:	17 82       	std	Z+7, r1	; 0x07
    144a:	16 82       	std	Z+6, r1	; 0x06
    144c:	83 81       	ldd	r24, Z+3	; 0x03
    144e:	81 ff       	sbrs	r24, 1
    1450:	bd c1       	rjmp	.+890    	; 0x17cc <vfprintf+0x398>
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	4c 01       	movw	r8, r24
    1458:	f7 01       	movw	r30, r14
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	f6 01       	movw	r30, r12
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	6f 01       	movw	r12, r30
    1468:	88 23       	and	r24, r24
    146a:	09 f4       	brne	.+2      	; 0x146e <vfprintf+0x3a>
    146c:	ab c1       	rjmp	.+854    	; 0x17c4 <vfprintf+0x390>
    146e:	85 32       	cpi	r24, 0x25	; 37
    1470:	39 f4       	brne	.+14     	; 0x1480 <vfprintf+0x4c>
    1472:	93 fd       	sbrc	r25, 3
    1474:	85 91       	lpm	r24, Z+
    1476:	93 ff       	sbrs	r25, 3
    1478:	81 91       	ld	r24, Z+
    147a:	6f 01       	movw	r12, r30
    147c:	85 32       	cpi	r24, 0x25	; 37
    147e:	29 f4       	brne	.+10     	; 0x148a <vfprintf+0x56>
    1480:	b7 01       	movw	r22, r14
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1488:	e7 cf       	rjmp	.-50     	; 0x1458 <vfprintf+0x24>
    148a:	51 2c       	mov	r5, r1
    148c:	31 2c       	mov	r3, r1
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	20 32       	cpi	r18, 0x20	; 32
    1492:	a0 f4       	brcc	.+40     	; 0x14bc <vfprintf+0x88>
    1494:	8b 32       	cpi	r24, 0x2B	; 43
    1496:	69 f0       	breq	.+26     	; 0x14b2 <vfprintf+0x7e>
    1498:	30 f4       	brcc	.+12     	; 0x14a6 <vfprintf+0x72>
    149a:	80 32       	cpi	r24, 0x20	; 32
    149c:	59 f0       	breq	.+22     	; 0x14b4 <vfprintf+0x80>
    149e:	83 32       	cpi	r24, 0x23	; 35
    14a0:	69 f4       	brne	.+26     	; 0x14bc <vfprintf+0x88>
    14a2:	20 61       	ori	r18, 0x10	; 16
    14a4:	2c c0       	rjmp	.+88     	; 0x14fe <vfprintf+0xca>
    14a6:	8d 32       	cpi	r24, 0x2D	; 45
    14a8:	39 f0       	breq	.+14     	; 0x14b8 <vfprintf+0x84>
    14aa:	80 33       	cpi	r24, 0x30	; 48
    14ac:	39 f4       	brne	.+14     	; 0x14bc <vfprintf+0x88>
    14ae:	21 60       	ori	r18, 0x01	; 1
    14b0:	26 c0       	rjmp	.+76     	; 0x14fe <vfprintf+0xca>
    14b2:	22 60       	ori	r18, 0x02	; 2
    14b4:	24 60       	ori	r18, 0x04	; 4
    14b6:	23 c0       	rjmp	.+70     	; 0x14fe <vfprintf+0xca>
    14b8:	28 60       	ori	r18, 0x08	; 8
    14ba:	21 c0       	rjmp	.+66     	; 0x14fe <vfprintf+0xca>
    14bc:	27 fd       	sbrc	r18, 7
    14be:	27 c0       	rjmp	.+78     	; 0x150e <vfprintf+0xda>
    14c0:	30 ed       	ldi	r19, 0xD0	; 208
    14c2:	38 0f       	add	r19, r24
    14c4:	3a 30       	cpi	r19, 0x0A	; 10
    14c6:	78 f4       	brcc	.+30     	; 0x14e6 <vfprintf+0xb2>
    14c8:	26 ff       	sbrs	r18, 6
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0xa4>
    14cc:	fa e0       	ldi	r31, 0x0A	; 10
    14ce:	5f 9e       	mul	r5, r31
    14d0:	30 0d       	add	r19, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	53 2e       	mov	r5, r19
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <vfprintf+0xca>
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	38 9e       	mul	r3, r24
    14dc:	30 0d       	add	r19, r0
    14de:	11 24       	eor	r1, r1
    14e0:	33 2e       	mov	r3, r19
    14e2:	20 62       	ori	r18, 0x20	; 32
    14e4:	0c c0       	rjmp	.+24     	; 0x14fe <vfprintf+0xca>
    14e6:	8e 32       	cpi	r24, 0x2E	; 46
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <vfprintf+0xbe>
    14ea:	26 fd       	sbrc	r18, 6
    14ec:	6b c1       	rjmp	.+726    	; 0x17c4 <vfprintf+0x390>
    14ee:	20 64       	ori	r18, 0x40	; 64
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <vfprintf+0xca>
    14f2:	8c 36       	cpi	r24, 0x6C	; 108
    14f4:	11 f4       	brne	.+4      	; 0x14fa <vfprintf+0xc6>
    14f6:	20 68       	ori	r18, 0x80	; 128
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0xca>
    14fa:	88 36       	cpi	r24, 0x68	; 104
    14fc:	41 f4       	brne	.+16     	; 0x150e <vfprintf+0xda>
    14fe:	f6 01       	movw	r30, r12
    1500:	93 fd       	sbrc	r25, 3
    1502:	85 91       	lpm	r24, Z+
    1504:	93 ff       	sbrs	r25, 3
    1506:	81 91       	ld	r24, Z+
    1508:	6f 01       	movw	r12, r30
    150a:	81 11       	cpse	r24, r1
    150c:	c1 cf       	rjmp	.-126    	; 0x1490 <vfprintf+0x5c>
    150e:	98 2f       	mov	r25, r24
    1510:	9f 7d       	andi	r25, 0xDF	; 223
    1512:	95 54       	subi	r25, 0x45	; 69
    1514:	93 30       	cpi	r25, 0x03	; 3
    1516:	28 f4       	brcc	.+10     	; 0x1522 <vfprintf+0xee>
    1518:	0c 5f       	subi	r16, 0xFC	; 252
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	ff e3       	ldi	r31, 0x3F	; 63
    151e:	f9 83       	std	Y+1, r31	; 0x01
    1520:	0d c0       	rjmp	.+26     	; 0x153c <vfprintf+0x108>
    1522:	83 36       	cpi	r24, 0x63	; 99
    1524:	31 f0       	breq	.+12     	; 0x1532 <vfprintf+0xfe>
    1526:	83 37       	cpi	r24, 0x73	; 115
    1528:	71 f0       	breq	.+28     	; 0x1546 <vfprintf+0x112>
    152a:	83 35       	cpi	r24, 0x53	; 83
    152c:	09 f0       	breq	.+2      	; 0x1530 <vfprintf+0xfc>
    152e:	5b c0       	rjmp	.+182    	; 0x15e6 <vfprintf+0x1b2>
    1530:	22 c0       	rjmp	.+68     	; 0x1576 <vfprintf+0x142>
    1532:	f8 01       	movw	r30, r16
    1534:	80 81       	ld	r24, Z
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	0e 5f       	subi	r16, 0xFE	; 254
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	44 24       	eor	r4, r4
    153e:	43 94       	inc	r4
    1540:	51 2c       	mov	r5, r1
    1542:	54 01       	movw	r10, r8
    1544:	15 c0       	rjmp	.+42     	; 0x1570 <vfprintf+0x13c>
    1546:	38 01       	movw	r6, r16
    1548:	f2 e0       	ldi	r31, 0x02	; 2
    154a:	6f 0e       	add	r6, r31
    154c:	71 1c       	adc	r7, r1
    154e:	f8 01       	movw	r30, r16
    1550:	a0 80       	ld	r10, Z
    1552:	b1 80       	ldd	r11, Z+1	; 0x01
    1554:	26 ff       	sbrs	r18, 6
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x12a>
    1558:	65 2d       	mov	r22, r5
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x12e>
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	7f ef       	ldi	r23, 0xFF	; 255
    1562:	c5 01       	movw	r24, r10
    1564:	2c 87       	std	Y+12, r18	; 0x0c
    1566:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <strnlen>
    156a:	2c 01       	movw	r4, r24
    156c:	83 01       	movw	r16, r6
    156e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1570:	2f 77       	andi	r18, 0x7F	; 127
    1572:	22 2e       	mov	r2, r18
    1574:	17 c0       	rjmp	.+46     	; 0x15a4 <vfprintf+0x170>
    1576:	38 01       	movw	r6, r16
    1578:	f2 e0       	ldi	r31, 0x02	; 2
    157a:	6f 0e       	add	r6, r31
    157c:	71 1c       	adc	r7, r1
    157e:	f8 01       	movw	r30, r16
    1580:	a0 80       	ld	r10, Z
    1582:	b1 80       	ldd	r11, Z+1	; 0x01
    1584:	26 ff       	sbrs	r18, 6
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x15a>
    1588:	65 2d       	mov	r22, r5
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x15e>
    158e:	6f ef       	ldi	r22, 0xFF	; 255
    1590:	7f ef       	ldi	r23, 0xFF	; 255
    1592:	c5 01       	movw	r24, r10
    1594:	2c 87       	std	Y+12, r18	; 0x0c
    1596:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <strnlen_P>
    159a:	2c 01       	movw	r4, r24
    159c:	2c 85       	ldd	r18, Y+12	; 0x0c
    159e:	20 68       	ori	r18, 0x80	; 128
    15a0:	22 2e       	mov	r2, r18
    15a2:	83 01       	movw	r16, r6
    15a4:	23 fc       	sbrc	r2, 3
    15a6:	1b c0       	rjmp	.+54     	; 0x15de <vfprintf+0x1aa>
    15a8:	83 2d       	mov	r24, r3
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	48 16       	cp	r4, r24
    15ae:	59 06       	cpc	r5, r25
    15b0:	b0 f4       	brcc	.+44     	; 0x15de <vfprintf+0x1aa>
    15b2:	b7 01       	movw	r22, r14
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    15bc:	3a 94       	dec	r3
    15be:	f4 cf       	rjmp	.-24     	; 0x15a8 <vfprintf+0x174>
    15c0:	f5 01       	movw	r30, r10
    15c2:	27 fc       	sbrc	r2, 7
    15c4:	85 91       	lpm	r24, Z+
    15c6:	27 fe       	sbrs	r2, 7
    15c8:	81 91       	ld	r24, Z+
    15ca:	5f 01       	movw	r10, r30
    15cc:	b7 01       	movw	r22, r14
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    15d4:	31 10       	cpse	r3, r1
    15d6:	3a 94       	dec	r3
    15d8:	f1 e0       	ldi	r31, 0x01	; 1
    15da:	4f 1a       	sub	r4, r31
    15dc:	51 08       	sbc	r5, r1
    15de:	41 14       	cp	r4, r1
    15e0:	51 04       	cpc	r5, r1
    15e2:	71 f7       	brne	.-36     	; 0x15c0 <vfprintf+0x18c>
    15e4:	e5 c0       	rjmp	.+458    	; 0x17b0 <vfprintf+0x37c>
    15e6:	84 36       	cpi	r24, 0x64	; 100
    15e8:	11 f0       	breq	.+4      	; 0x15ee <vfprintf+0x1ba>
    15ea:	89 36       	cpi	r24, 0x69	; 105
    15ec:	39 f5       	brne	.+78     	; 0x163c <vfprintf+0x208>
    15ee:	f8 01       	movw	r30, r16
    15f0:	27 ff       	sbrs	r18, 7
    15f2:	07 c0       	rjmp	.+14     	; 0x1602 <vfprintf+0x1ce>
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	0c 5f       	subi	r16, 0xFC	; 252
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <vfprintf+0x1de>
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	88 27       	eor	r24, r24
    1608:	77 fd       	sbrc	r23, 7
    160a:	80 95       	com	r24
    160c:	98 2f       	mov	r25, r24
    160e:	0e 5f       	subi	r16, 0xFE	; 254
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	2f 76       	andi	r18, 0x6F	; 111
    1614:	b2 2e       	mov	r11, r18
    1616:	97 ff       	sbrs	r25, 7
    1618:	09 c0       	rjmp	.+18     	; 0x162c <vfprintf+0x1f8>
    161a:	90 95       	com	r25
    161c:	80 95       	com	r24
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	20 68       	ori	r18, 0x80	; 128
    162a:	b2 2e       	mov	r11, r18
    162c:	2a e0       	ldi	r18, 0x0A	; 10
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	a4 01       	movw	r20, r8
    1632:	0e 94 34 0c 	call	0x1868	; 0x1868 <__ultoa_invert>
    1636:	a8 2e       	mov	r10, r24
    1638:	a8 18       	sub	r10, r8
    163a:	44 c0       	rjmp	.+136    	; 0x16c4 <vfprintf+0x290>
    163c:	85 37       	cpi	r24, 0x75	; 117
    163e:	29 f4       	brne	.+10     	; 0x164a <vfprintf+0x216>
    1640:	2f 7e       	andi	r18, 0xEF	; 239
    1642:	b2 2e       	mov	r11, r18
    1644:	2a e0       	ldi	r18, 0x0A	; 10
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	25 c0       	rjmp	.+74     	; 0x1694 <vfprintf+0x260>
    164a:	f2 2f       	mov	r31, r18
    164c:	f9 7f       	andi	r31, 0xF9	; 249
    164e:	bf 2e       	mov	r11, r31
    1650:	8f 36       	cpi	r24, 0x6F	; 111
    1652:	c1 f0       	breq	.+48     	; 0x1684 <vfprintf+0x250>
    1654:	18 f4       	brcc	.+6      	; 0x165c <vfprintf+0x228>
    1656:	88 35       	cpi	r24, 0x58	; 88
    1658:	79 f0       	breq	.+30     	; 0x1678 <vfprintf+0x244>
    165a:	b4 c0       	rjmp	.+360    	; 0x17c4 <vfprintf+0x390>
    165c:	80 37       	cpi	r24, 0x70	; 112
    165e:	19 f0       	breq	.+6      	; 0x1666 <vfprintf+0x232>
    1660:	88 37       	cpi	r24, 0x78	; 120
    1662:	21 f0       	breq	.+8      	; 0x166c <vfprintf+0x238>
    1664:	af c0       	rjmp	.+350    	; 0x17c4 <vfprintf+0x390>
    1666:	2f 2f       	mov	r18, r31
    1668:	20 61       	ori	r18, 0x10	; 16
    166a:	b2 2e       	mov	r11, r18
    166c:	b4 fe       	sbrs	r11, 4
    166e:	0d c0       	rjmp	.+26     	; 0x168a <vfprintf+0x256>
    1670:	8b 2d       	mov	r24, r11
    1672:	84 60       	ori	r24, 0x04	; 4
    1674:	b8 2e       	mov	r11, r24
    1676:	09 c0       	rjmp	.+18     	; 0x168a <vfprintf+0x256>
    1678:	24 ff       	sbrs	r18, 4
    167a:	0a c0       	rjmp	.+20     	; 0x1690 <vfprintf+0x25c>
    167c:	9f 2f       	mov	r25, r31
    167e:	96 60       	ori	r25, 0x06	; 6
    1680:	b9 2e       	mov	r11, r25
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x25c>
    1684:	28 e0       	ldi	r18, 0x08	; 8
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <vfprintf+0x260>
    168a:	20 e1       	ldi	r18, 0x10	; 16
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x260>
    1690:	20 e1       	ldi	r18, 0x10	; 16
    1692:	32 e0       	ldi	r19, 0x02	; 2
    1694:	f8 01       	movw	r30, r16
    1696:	b7 fe       	sbrs	r11, 7
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <vfprintf+0x274>
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	0c 5f       	subi	r16, 0xFC	; 252
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x280>
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 5f       	subi	r16, 0xFE	; 254
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	a4 01       	movw	r20, r8
    16b6:	0e 94 34 0c 	call	0x1868	; 0x1868 <__ultoa_invert>
    16ba:	a8 2e       	mov	r10, r24
    16bc:	a8 18       	sub	r10, r8
    16be:	fb 2d       	mov	r31, r11
    16c0:	ff 77       	andi	r31, 0x7F	; 127
    16c2:	bf 2e       	mov	r11, r31
    16c4:	b6 fe       	sbrs	r11, 6
    16c6:	0b c0       	rjmp	.+22     	; 0x16de <vfprintf+0x2aa>
    16c8:	2b 2d       	mov	r18, r11
    16ca:	2e 7f       	andi	r18, 0xFE	; 254
    16cc:	a5 14       	cp	r10, r5
    16ce:	50 f4       	brcc	.+20     	; 0x16e4 <vfprintf+0x2b0>
    16d0:	b4 fe       	sbrs	r11, 4
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <vfprintf+0x2b4>
    16d4:	b2 fc       	sbrc	r11, 2
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <vfprintf+0x2b4>
    16d8:	2b 2d       	mov	r18, r11
    16da:	2e 7e       	andi	r18, 0xEE	; 238
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <vfprintf+0x2b4>
    16de:	7a 2c       	mov	r7, r10
    16e0:	2b 2d       	mov	r18, r11
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <vfprintf+0x2b6>
    16e4:	7a 2c       	mov	r7, r10
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <vfprintf+0x2b6>
    16e8:	75 2c       	mov	r7, r5
    16ea:	24 ff       	sbrs	r18, 4
    16ec:	0d c0       	rjmp	.+26     	; 0x1708 <vfprintf+0x2d4>
    16ee:	fe 01       	movw	r30, r28
    16f0:	ea 0d       	add	r30, r10
    16f2:	f1 1d       	adc	r31, r1
    16f4:	80 81       	ld	r24, Z
    16f6:	80 33       	cpi	r24, 0x30	; 48
    16f8:	11 f4       	brne	.+4      	; 0x16fe <vfprintf+0x2ca>
    16fa:	29 7e       	andi	r18, 0xE9	; 233
    16fc:	09 c0       	rjmp	.+18     	; 0x1710 <vfprintf+0x2dc>
    16fe:	22 ff       	sbrs	r18, 2
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0x2da>
    1702:	73 94       	inc	r7
    1704:	73 94       	inc	r7
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <vfprintf+0x2dc>
    1708:	82 2f       	mov	r24, r18
    170a:	86 78       	andi	r24, 0x86	; 134
    170c:	09 f0       	breq	.+2      	; 0x1710 <vfprintf+0x2dc>
    170e:	73 94       	inc	r7
    1710:	23 fd       	sbrc	r18, 3
    1712:	13 c0       	rjmp	.+38     	; 0x173a <vfprintf+0x306>
    1714:	20 ff       	sbrs	r18, 0
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <vfprintf+0x2f0>
    1718:	5a 2c       	mov	r5, r10
    171a:	73 14       	cp	r7, r3
    171c:	18 f4       	brcc	.+6      	; 0x1724 <vfprintf+0x2f0>
    171e:	53 0c       	add	r5, r3
    1720:	57 18       	sub	r5, r7
    1722:	73 2c       	mov	r7, r3
    1724:	73 14       	cp	r7, r3
    1726:	68 f4       	brcc	.+26     	; 0x1742 <vfprintf+0x30e>
    1728:	b7 01       	movw	r22, r14
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	2c 87       	std	Y+12, r18	; 0x0c
    1730:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1734:	73 94       	inc	r7
    1736:	2c 85       	ldd	r18, Y+12	; 0x0c
    1738:	f5 cf       	rjmp	.-22     	; 0x1724 <vfprintf+0x2f0>
    173a:	73 14       	cp	r7, r3
    173c:	10 f4       	brcc	.+4      	; 0x1742 <vfprintf+0x30e>
    173e:	37 18       	sub	r3, r7
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <vfprintf+0x310>
    1742:	31 2c       	mov	r3, r1
    1744:	24 ff       	sbrs	r18, 4
    1746:	12 c0       	rjmp	.+36     	; 0x176c <vfprintf+0x338>
    1748:	b7 01       	movw	r22, r14
    174a:	80 e3       	ldi	r24, 0x30	; 48
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	2c 87       	std	Y+12, r18	; 0x0c
    1750:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1754:	2c 85       	ldd	r18, Y+12	; 0x0c
    1756:	22 ff       	sbrs	r18, 2
    1758:	17 c0       	rjmp	.+46     	; 0x1788 <vfprintf+0x354>
    175a:	21 ff       	sbrs	r18, 1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <vfprintf+0x330>
    175e:	88 e5       	ldi	r24, 0x58	; 88
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x334>
    1764:	88 e7       	ldi	r24, 0x78	; 120
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	b7 01       	movw	r22, r14
    176a:	0c c0       	rjmp	.+24     	; 0x1784 <vfprintf+0x350>
    176c:	82 2f       	mov	r24, r18
    176e:	86 78       	andi	r24, 0x86	; 134
    1770:	59 f0       	breq	.+22     	; 0x1788 <vfprintf+0x354>
    1772:	21 fd       	sbrc	r18, 1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x346>
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	01 c0       	rjmp	.+2      	; 0x177c <vfprintf+0x348>
    177a:	8b e2       	ldi	r24, 0x2B	; 43
    177c:	27 fd       	sbrc	r18, 7
    177e:	8d e2       	ldi	r24, 0x2D	; 45
    1780:	b7 01       	movw	r22, r14
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1788:	a5 14       	cp	r10, r5
    178a:	38 f4       	brcc	.+14     	; 0x179a <vfprintf+0x366>
    178c:	b7 01       	movw	r22, r14
    178e:	80 e3       	ldi	r24, 0x30	; 48
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    1796:	5a 94       	dec	r5
    1798:	f7 cf       	rjmp	.-18     	; 0x1788 <vfprintf+0x354>
    179a:	aa 94       	dec	r10
    179c:	f4 01       	movw	r30, r8
    179e:	ea 0d       	add	r30, r10
    17a0:	f1 1d       	adc	r31, r1
    17a2:	80 81       	ld	r24, Z
    17a4:	b7 01       	movw	r22, r14
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    17ac:	a1 10       	cpse	r10, r1
    17ae:	f5 cf       	rjmp	.-22     	; 0x179a <vfprintf+0x366>
    17b0:	33 20       	and	r3, r3
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <vfprintf+0x382>
    17b4:	51 ce       	rjmp	.-862    	; 0x1458 <vfprintf+0x24>
    17b6:	b7 01       	movw	r22, r14
    17b8:	80 e2       	ldi	r24, 0x20	; 32
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 02 0c 	call	0x1804	; 0x1804 <fputc>
    17c0:	3a 94       	dec	r3
    17c2:	f6 cf       	rjmp	.-20     	; 0x17b0 <vfprintf+0x37c>
    17c4:	f7 01       	movw	r30, r14
    17c6:	86 81       	ldd	r24, Z+6	; 0x06
    17c8:	97 81       	ldd	r25, Z+7	; 0x07
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <vfprintf+0x39c>
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
    17ce:	9f ef       	ldi	r25, 0xFF	; 255
    17d0:	2c 96       	adiw	r28, 0x0c	; 12
    17d2:	e2 e1       	ldi	r30, 0x12	; 18
    17d4:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__epilogue_restores__>

000017d8 <strnlen_P>:
    17d8:	fc 01       	movw	r30, r24
    17da:	05 90       	lpm	r0, Z+
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	70 40       	sbci	r23, 0x00	; 0
    17e0:	01 10       	cpse	r0, r1
    17e2:	d8 f7       	brcc	.-10     	; 0x17da <strnlen_P+0x2>
    17e4:	80 95       	com	r24
    17e6:	90 95       	com	r25
    17e8:	8e 0f       	add	r24, r30
    17ea:	9f 1f       	adc	r25, r31
    17ec:	08 95       	ret

000017ee <strnlen>:
    17ee:	fc 01       	movw	r30, r24
    17f0:	61 50       	subi	r22, 0x01	; 1
    17f2:	70 40       	sbci	r23, 0x00	; 0
    17f4:	01 90       	ld	r0, Z+
    17f6:	01 10       	cpse	r0, r1
    17f8:	d8 f7       	brcc	.-10     	; 0x17f0 <strnlen+0x2>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	8e 0f       	add	r24, r30
    1800:	9f 1f       	adc	r25, r31
    1802:	08 95       	ret

00001804 <fputc>:
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	18 2f       	mov	r17, r24
    180e:	09 2f       	mov	r16, r25
    1810:	eb 01       	movw	r28, r22
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	81 fd       	sbrc	r24, 1
    1816:	03 c0       	rjmp	.+6      	; 0x181e <fputc+0x1a>
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	20 c0       	rjmp	.+64     	; 0x185e <fputc+0x5a>
    181e:	82 ff       	sbrs	r24, 2
    1820:	10 c0       	rjmp	.+32     	; 0x1842 <fputc+0x3e>
    1822:	4e 81       	ldd	r20, Y+6	; 0x06
    1824:	5f 81       	ldd	r21, Y+7	; 0x07
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	42 17       	cp	r20, r18
    182c:	53 07       	cpc	r21, r19
    182e:	7c f4       	brge	.+30     	; 0x184e <fputc+0x4a>
    1830:	e8 81       	ld	r30, Y
    1832:	f9 81       	ldd	r31, Y+1	; 0x01
    1834:	9f 01       	movw	r18, r30
    1836:	2f 5f       	subi	r18, 0xFF	; 255
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	39 83       	std	Y+1, r19	; 0x01
    183c:	28 83       	st	Y, r18
    183e:	10 83       	st	Z, r17
    1840:	06 c0       	rjmp	.+12     	; 0x184e <fputc+0x4a>
    1842:	e8 85       	ldd	r30, Y+8	; 0x08
    1844:	f9 85       	ldd	r31, Y+9	; 0x09
    1846:	81 2f       	mov	r24, r17
    1848:	09 95       	icall
    184a:	89 2b       	or	r24, r25
    184c:	29 f7       	brne	.-54     	; 0x1818 <fputc+0x14>
    184e:	2e 81       	ldd	r18, Y+6	; 0x06
    1850:	3f 81       	ldd	r19, Y+7	; 0x07
    1852:	2f 5f       	subi	r18, 0xFF	; 255
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	3f 83       	std	Y+7, r19	; 0x07
    1858:	2e 83       	std	Y+6, r18	; 0x06
    185a:	81 2f       	mov	r24, r17
    185c:	90 2f       	mov	r25, r16
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	08 95       	ret

00001868 <__ultoa_invert>:
    1868:	fa 01       	movw	r30, r20
    186a:	aa 27       	eor	r26, r26
    186c:	28 30       	cpi	r18, 0x08	; 8
    186e:	51 f1       	breq	.+84     	; 0x18c4 <__ultoa_invert+0x5c>
    1870:	20 31       	cpi	r18, 0x10	; 16
    1872:	81 f1       	breq	.+96     	; 0x18d4 <__ultoa_invert+0x6c>
    1874:	e8 94       	clt
    1876:	6f 93       	push	r22
    1878:	6e 7f       	andi	r22, 0xFE	; 254
    187a:	6e 5f       	subi	r22, 0xFE	; 254
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	af 4f       	sbci	r26, 0xFF	; 255
    1884:	b1 e0       	ldi	r27, 0x01	; 1
    1886:	3e d0       	rcall	.+124    	; 0x1904 <__ultoa_invert+0x9c>
    1888:	b4 e0       	ldi	r27, 0x04	; 4
    188a:	3c d0       	rcall	.+120    	; 0x1904 <__ultoa_invert+0x9c>
    188c:	67 0f       	add	r22, r23
    188e:	78 1f       	adc	r23, r24
    1890:	89 1f       	adc	r24, r25
    1892:	9a 1f       	adc	r25, r26
    1894:	a1 1d       	adc	r26, r1
    1896:	68 0f       	add	r22, r24
    1898:	79 1f       	adc	r23, r25
    189a:	8a 1f       	adc	r24, r26
    189c:	91 1d       	adc	r25, r1
    189e:	a1 1d       	adc	r26, r1
    18a0:	6a 0f       	add	r22, r26
    18a2:	71 1d       	adc	r23, r1
    18a4:	81 1d       	adc	r24, r1
    18a6:	91 1d       	adc	r25, r1
    18a8:	a1 1d       	adc	r26, r1
    18aa:	20 d0       	rcall	.+64     	; 0x18ec <__ultoa_invert+0x84>
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <__ultoa_invert+0x48>
    18ae:	68 94       	set
    18b0:	3f 91       	pop	r19
    18b2:	2a e0       	ldi	r18, 0x0A	; 10
    18b4:	26 9f       	mul	r18, r22
    18b6:	11 24       	eor	r1, r1
    18b8:	30 19       	sub	r19, r0
    18ba:	30 5d       	subi	r19, 0xD0	; 208
    18bc:	31 93       	st	Z+, r19
    18be:	de f6       	brtc	.-74     	; 0x1876 <__ultoa_invert+0xe>
    18c0:	cf 01       	movw	r24, r30
    18c2:	08 95       	ret
    18c4:	46 2f       	mov	r20, r22
    18c6:	47 70       	andi	r20, 0x07	; 7
    18c8:	40 5d       	subi	r20, 0xD0	; 208
    18ca:	41 93       	st	Z+, r20
    18cc:	b3 e0       	ldi	r27, 0x03	; 3
    18ce:	0f d0       	rcall	.+30     	; 0x18ee <__ultoa_invert+0x86>
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__ultoa_invert+0x5c>
    18d2:	f6 cf       	rjmp	.-20     	; 0x18c0 <__ultoa_invert+0x58>
    18d4:	46 2f       	mov	r20, r22
    18d6:	4f 70       	andi	r20, 0x0F	; 15
    18d8:	40 5d       	subi	r20, 0xD0	; 208
    18da:	4a 33       	cpi	r20, 0x3A	; 58
    18dc:	18 f0       	brcs	.+6      	; 0x18e4 <__ultoa_invert+0x7c>
    18de:	49 5d       	subi	r20, 0xD9	; 217
    18e0:	31 fd       	sbrc	r19, 1
    18e2:	40 52       	subi	r20, 0x20	; 32
    18e4:	41 93       	st	Z+, r20
    18e6:	02 d0       	rcall	.+4      	; 0x18ec <__ultoa_invert+0x84>
    18e8:	a9 f7       	brne	.-22     	; 0x18d4 <__ultoa_invert+0x6c>
    18ea:	ea cf       	rjmp	.-44     	; 0x18c0 <__ultoa_invert+0x58>
    18ec:	b4 e0       	ldi	r27, 0x04	; 4
    18ee:	a6 95       	lsr	r26
    18f0:	97 95       	ror	r25
    18f2:	87 95       	ror	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	ba 95       	dec	r27
    18fa:	c9 f7       	brne	.-14     	; 0x18ee <__ultoa_invert+0x86>
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	61 05       	cpc	r22, r1
    1900:	71 05       	cpc	r23, r1
    1902:	08 95       	ret
    1904:	9b 01       	movw	r18, r22
    1906:	ac 01       	movw	r20, r24
    1908:	0a 2e       	mov	r0, r26
    190a:	06 94       	lsr	r0
    190c:	57 95       	ror	r21
    190e:	47 95       	ror	r20
    1910:	37 95       	ror	r19
    1912:	27 95       	ror	r18
    1914:	ba 95       	dec	r27
    1916:	c9 f7       	brne	.-14     	; 0x190a <__ultoa_invert+0xa2>
    1918:	62 0f       	add	r22, r18
    191a:	73 1f       	adc	r23, r19
    191c:	84 1f       	adc	r24, r20
    191e:	95 1f       	adc	r25, r21
    1920:	a0 1d       	adc	r26, r0
    1922:	08 95       	ret

00001924 <__prologue_saves__>:
    1924:	2f 92       	push	r2
    1926:	3f 92       	push	r3
    1928:	4f 92       	push	r4
    192a:	5f 92       	push	r5
    192c:	6f 92       	push	r6
    192e:	7f 92       	push	r7
    1930:	8f 92       	push	r8
    1932:	9f 92       	push	r9
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	ca 1b       	sub	r28, r26
    194e:	db 0b       	sbc	r29, r27
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	09 94       	ijmp

0000195c <__epilogue_restores__>:
    195c:	2a 88       	ldd	r2, Y+18	; 0x12
    195e:	39 88       	ldd	r3, Y+17	; 0x11
    1960:	48 88       	ldd	r4, Y+16	; 0x10
    1962:	5f 84       	ldd	r5, Y+15	; 0x0f
    1964:	6e 84       	ldd	r6, Y+14	; 0x0e
    1966:	7d 84       	ldd	r7, Y+13	; 0x0d
    1968:	8c 84       	ldd	r8, Y+12	; 0x0c
    196a:	9b 84       	ldd	r9, Y+11	; 0x0b
    196c:	aa 84       	ldd	r10, Y+10	; 0x0a
    196e:	b9 84       	ldd	r11, Y+9	; 0x09
    1970:	c8 84       	ldd	r12, Y+8	; 0x08
    1972:	df 80       	ldd	r13, Y+7	; 0x07
    1974:	ee 80       	ldd	r14, Y+6	; 0x06
    1976:	fd 80       	ldd	r15, Y+5	; 0x05
    1978:	0c 81       	ldd	r16, Y+4	; 0x04
    197a:	1b 81       	ldd	r17, Y+3	; 0x03
    197c:	aa 81       	ldd	r26, Y+2	; 0x02
    197e:	b9 81       	ldd	r27, Y+1	; 0x01
    1980:	ce 0f       	add	r28, r30
    1982:	d1 1d       	adc	r29, r1
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	ed 01       	movw	r28, r26
    1990:	08 95       	ret

00001992 <_exit>:
    1992:	f8 94       	cli

00001994 <__stop_program>:
    1994:	ff cf       	rjmp	.-2      	; 0x1994 <__stop_program>
