
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000013e2  00001476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080014e  0080014e  000014c4  2**0
                  ALLOC
  3 .stab         00005e98  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002373  00000000  00000000  0000735c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000096cf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 34       	cpi	r26, 0x4E	; 78
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e4       	ldi	r26, 0x4E	; 78
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3e       	cpi	r26, 0xE0	; 224
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
      9e:	0c 94 ef 09 	jmp	0x13de	; 0x13de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_default>

000000a6 <__vector_21>:
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	00 90 5f 00 	lds	r0, 0x005F
      ae:	0f 92       	push	r0
      b0:	11 24       	eor	r1, r1
      b2:	2f 93       	push	r18
      b4:	3f 93       	push	r19
      b6:	4f 93       	push	r20
      b8:	5f 93       	push	r21
      ba:	6f 93       	push	r22
      bc:	7f 93       	push	r23
      be:	8f 93       	push	r24
      c0:	9f 93       	push	r25
      c2:	af 93       	push	r26
      c4:	bf 93       	push	r27
      c6:	ef 93       	push	r30
      c8:	ff 93       	push	r31
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <__vector_21+0x2a>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	90 91 4f 01 	lds	r25, 0x014F
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	89 27       	eor	r24, r25
      dc:	88 23       	and	r24, r24
      de:	09 f4       	brne	.+2      	; 0xe2 <__vector_21+0x3c>
      e0:	3f c0       	rjmp	.+126    	; 0x160 <__vector_21+0xba>
      e2:	80 91 4e 01 	lds	r24, 0x014E
      e6:	88 2f       	mov	r24, r24
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	28 e7       	ldi	r18, 0x78	; 120
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	f9 01       	movw	r30, r18
      f0:	20 81       	ld	r18, Z
      f2:	42 2f       	mov	r20, r18
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	29 e7       	ldi	r18, 0x79	; 121
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	22 2f       	mov	r18, r18
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	32 2f       	mov	r19, r18
     104:	22 27       	eor	r18, r18
     106:	24 2b       	or	r18, r20
     108:	35 2b       	or	r19, r21
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	80 5b       	subi	r24, 0xB0	; 176
     110:	9e 4f       	sbci	r25, 0xFE	; 254
     112:	fc 01       	movw	r30, r24
     114:	31 83       	std	Z+1, r19	; 0x01
     116:	20 83       	st	Z, r18
     118:	80 91 4e 01 	lds	r24, 0x014E
     11c:	88 2f       	mov	r24, r24
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	26 e0       	ldi	r18, 0x06	; 6
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	b9 01       	movw	r22, r18
     128:	0e 94 ed 04 	call	0x9da	; 0x9da <__divmodhi4>
     12c:	80 93 4e 01 	sts	0x014E, r24
     130:	8c e7       	ldi	r24, 0x7C	; 124
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2c e7       	ldi	r18, 0x7C	; 124
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 7f       	andi	r18, 0xF0	; 240
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	2c e7       	ldi	r18, 0x7C	; 124
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	30 81       	ld	r19, Z
     14e:	20 91 4e 01 	lds	r18, 0x014E
     152:	23 2b       	or	r18, r19
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 4f 01 	sts	0x014F, r24
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__vector_21+0xbe>
     160:	10 92 4f 01 	sts	0x014F, r1
     164:	8a e7       	ldi	r24, 0x7A	; 122
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2a e7       	ldi	r18, 0x7A	; 122
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	20 64       	ori	r18, 0x40	; 64
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	bf 91       	pop	r27
     184:	af 91       	pop	r26
     186:	9f 91       	pop	r25
     188:	8f 91       	pop	r24
     18a:	7f 91       	pop	r23
     18c:	6f 91       	pop	r22
     18e:	5f 91       	pop	r21
     190:	4f 91       	pop	r20
     192:	3f 91       	pop	r19
     194:	2f 91       	pop	r18
     196:	0f 90       	pop	r0
     198:	00 92 5f 00 	sts	0x005F, r0
     19c:	0f 90       	pop	r0
     19e:	1f 90       	pop	r1
     1a0:	18 95       	reti

000001a2 <adc_init>:
 *
 * @brief ADC initialization, assuming the interrupts are disabled.
 *
 */
void adc_init(void)
{
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     1aa:	8c e7       	ldi	r24, 0x7C	; 124
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2c e7       	ldi	r18, 0x7C	; 124
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	f9 01       	movw	r30, r18
     1b4:	20 81       	ld	r18, Z
     1b6:	20 71       	andi	r18, 0x10	; 16
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     1bc:	8c e7       	ldi	r24, 0x7C	; 124
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	2c e7       	ldi	r18, 0x7C	; 124
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	f9 01       	movw	r30, r18
     1c6:	20 81       	ld	r18, Z
     1c8:	20 64       	ori	r18, 0x40	; 64
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     1ce:	8a e7       	ldi	r24, 0x7A	; 122
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	2a e7       	ldi	r18, 0x7A	; 122
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	20 68       	ori	r18, 0x80	; 128
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     1e0:	8a e7       	ldi	r24, 0x7A	; 122
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	2a e7       	ldi	r18, 0x7A	; 122
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	2f 64       	ori	r18, 0x4F	; 79
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18

#ifdef ADC_SCOPE_DEBUG
    DBG_CONFIG;
#endif

}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <adc_periodic>:

void adc_periodic(void)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	1f 92       	push	r1
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    /* STUB */
    static uint32_t ts = 0;
    uint8_t i = 0;
     202:	19 82       	std	Y+1, r1	; 0x01
    if (g_timestamp > (ts + 1000000))
     204:	80 91 5c 01 	lds	r24, 0x015C
     208:	90 91 5d 01 	lds	r25, 0x015D
     20c:	a0 91 5e 01 	lds	r26, 0x015E
     210:	b0 91 5f 01 	lds	r27, 0x015F
     214:	9c 01       	movw	r18, r24
     216:	ad 01       	movw	r20, r26
     218:	20 5c       	subi	r18, 0xC0	; 192
     21a:	3d 4b       	sbci	r19, 0xBD	; 189
     21c:	40 4f       	sbci	r20, 0xF0	; 240
     21e:	5f 4f       	sbci	r21, 0xFF	; 255
     220:	80 91 d6 01 	lds	r24, 0x01D6
     224:	90 91 d7 01 	lds	r25, 0x01D7
     228:	a0 91 d8 01 	lds	r26, 0x01D8
     22c:	b0 91 d9 01 	lds	r27, 0x01D9
     230:	28 17       	cp	r18, r24
     232:	39 07       	cpc	r19, r25
     234:	4a 07       	cpc	r20, r26
     236:	5b 07       	cpc	r21, r27
     238:	d0 f5       	brcc	.+116    	; 0x2ae <adc_periodic+0xb6>
    {
        ts = g_timestamp;
     23a:	80 91 d6 01 	lds	r24, 0x01D6
     23e:	90 91 d7 01 	lds	r25, 0x01D7
     242:	a0 91 d8 01 	lds	r26, 0x01D8
     246:	b0 91 d9 01 	lds	r27, 0x01D9
     24a:	80 93 5c 01 	sts	0x015C, r24
     24e:	90 93 5d 01 	sts	0x015D, r25
     252:	a0 93 5e 01 	sts	0x015E, r26
     256:	b0 93 5f 01 	sts	0x015F, r27
        for (i = 0; i < ADC_NUM; i++)
     25a:	19 82       	std	Y+1, r1	; 0x01
     25c:	25 c0       	rjmp	.+74     	; 0x2a8 <adc_periodic+0xb0>
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	80 5b       	subi	r24, 0xB0	; 176
     26a:	9e 4f       	sbci	r25, 0xFE	; 254
     26c:	fc 01       	movw	r30, r24
     26e:	20 81       	ld	r18, Z
     270:	31 81       	ldd	r19, Z+1	; 0x01
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	43 2f       	mov	r20, r19
     27a:	4f 93       	push	r20
     27c:	2f 93       	push	r18
     27e:	29 2f       	mov	r18, r25
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	80 e2       	ldi	r24, 0x20	; 32
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	89 2f       	mov	r24, r25
     28a:	8f 93       	push	r24
     28c:	80 e2       	ldi	r24, 0x20	; 32
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	8f 93       	push	r24
     292:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
    static uint32_t ts = 0;
    uint8_t i = 0;
    if (g_timestamp > (ts + 1000000))
    {
        ts = g_timestamp;
        for (i = 0; i < ADC_NUM; i++)
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	8f 5f       	subi	r24, 0xFF	; 255
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	86 30       	cpi	r24, 0x06	; 6
     2ac:	c0 f2       	brcs	.-80     	; 0x25e <adc_periodic+0x66>
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
        }
    }
}
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <adc_get>:

uint16_t adc_get(e_adc_channel channel)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	1f 92       	push	r1
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	89 83       	std	Y+1, r24	; 0x01
    return adc_samples[channel];
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	80 5b       	subi	r24, 0xB0	; 176
     2ce:	9e 4f       	sbci	r25, 0xFE	; 254
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
}
     2d6:	0f 90       	pop	r0
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <adc_last_capture+0x6>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <adc_last_capture+0x8>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <adc_last_capture+0xa>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	9a 83       	std	Y+2, r25	; 0x02
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	7c 83       	std	Y+4, r23	; 0x04
     2f2:	6b 83       	std	Y+3, r22	; 0x03
     2f4:	5e 83       	std	Y+6, r21	; 0x06
     2f6:	4d 83       	std	Y+5, r20	; 0x05
#ifdef ADC_NOISE_DEBUG
    *last_capture = last_captureS;
    *adc_min = adc_minS;
    *adc_max = adc_maxS;
#endif
}
     2f8:	26 96       	adiw	r28, 0x06	; 6
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <adc_last_reset>:

void adc_last_reset(void)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
#ifdef ADC_NOISE_DEBUG
    last_captureS = 0;
    adc_minS = 0xFFFF;
    adc_maxS = 0;
#endif
}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <lib_limit>:

/* GLOBALS */
static t_channel channels[PSU_CHANNEL_NUM];

void lib_limit(t_value *value, t_value_scale *scale)
{
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	00 d0       	rcall	.+0      	; 0x31e <lib_limit+0x6>
     31e:	00 d0       	rcall	.+0      	; 0x320 <lib_limit+0x8>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
     328:	7c 83       	std	Y+4, r23	; 0x04
     32a:	6b 83       	std	Y+3, r22	; 0x03
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	9a 81       	ldd	r25, Y+2	; 0x02
     330:	fc 01       	movw	r30, r24
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	fc 01       	movw	r30, r24
     33c:	82 81       	ldd	r24, Z+2	; 0x02
     33e:	93 81       	ldd	r25, Z+3	; 0x03
     340:	28 17       	cp	r18, r24
     342:	39 07       	cpc	r19, r25
     344:	50 f4       	brcc	.+20     	; 0x35a <lib_limit+0x42>
     346:	8b 81       	ldd	r24, Y+3	; 0x03
     348:	9c 81       	ldd	r25, Y+4	; 0x04
     34a:	fc 01       	movw	r30, r24
     34c:	22 81       	ldd	r18, Z+2	; 0x02
     34e:	33 81       	ldd	r19, Z+3	; 0x03
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	fc 01       	movw	r30, r24
     356:	33 83       	std	Z+3, r19	; 0x03
     358:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	fc 01       	movw	r30, r24
     360:	20 81       	ld	r18, Z
     362:	31 81       	ldd	r19, Z+1	; 0x01
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	9c 81       	ldd	r25, Y+4	; 0x04
     368:	fc 01       	movw	r30, r24
     36a:	84 81       	ldd	r24, Z+4	; 0x04
     36c:	95 81       	ldd	r25, Z+5	; 0x05
     36e:	82 17       	cp	r24, r18
     370:	93 07       	cpc	r25, r19
     372:	50 f4       	brcc	.+20     	; 0x388 <lib_limit+0x70>
     374:	8b 81       	ldd	r24, Y+3	; 0x03
     376:	9c 81       	ldd	r25, Y+4	; 0x04
     378:	fc 01       	movw	r30, r24
     37a:	24 81       	ldd	r18, Z+4	; 0x04
     37c:	35 81       	ldd	r19, Z+5	; 0x05
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	fc 01       	movw	r30, r24
     384:	33 83       	std	Z+3, r19	; 0x03
     386:	22 83       	std	Z+2, r18	; 0x02
}
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <lib_scale>:

void lib_scale(t_value *value, t_value_scale *scale)
{
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	2a 97       	sbiw	r28, 0x0a	; 10
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	98 87       	std	Y+8, r25	; 0x08
     3bc:	8f 83       	std	Y+7, r24	; 0x07
     3be:	7a 87       	std	Y+10, r23	; 0x0a
     3c0:	69 87       	std	Y+9, r22	; 0x09
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     3c2:	89 85       	ldd	r24, Y+9	; 0x09
     3c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 85       	ldd	r24, Z+8	; 0x08
     3ca:	91 85       	ldd	r25, Z+9	; 0x09
     3cc:	cc 01       	movw	r24, r24
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
     3de:	89 85       	ldd	r24, Y+9	; 0x09
     3e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e2:	fc 01       	movw	r30, r24
     3e4:	86 81       	ldd	r24, Z+6	; 0x06
     3e6:	97 81       	ldd	r25, Z+7	; 0x07
     3e8:	cc 01       	movw	r24, r24
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	bc 01       	movw	r22, r24
     3f0:	cd 01       	movw	r24, r26
     3f2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	9c 01       	movw	r18, r24
     3fc:	ad 01       	movw	r20, r26
     3fe:	c7 01       	movw	r24, r14
     400:	b6 01       	movw	r22, r12
     402:	0e 94 15 05 	call	0xa2a	; 0xa2a <__subsf3>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	6c 01       	movw	r12, r24
     40c:	7d 01       	movw	r14, r26
     40e:	89 85       	ldd	r24, Y+9	; 0x09
     410:	9a 85       	ldd	r25, Y+10	; 0x0a
     412:	fc 01       	movw	r30, r24
     414:	84 81       	ldd	r24, Z+4	; 0x04
     416:	95 81       	ldd	r25, Z+5	; 0x05
     418:	cc 01       	movw	r24, r24
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	bc 01       	movw	r22, r24
     420:	cd 01       	movw	r24, r26
     422:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
     426:	4b 01       	movw	r8, r22
     428:	5c 01       	movw	r10, r24
     42a:	89 85       	ldd	r24, Y+9	; 0x09
     42c:	9a 85       	ldd	r25, Y+10	; 0x0a
     42e:	fc 01       	movw	r30, r24
     430:	82 81       	ldd	r24, Z+2	; 0x02
     432:	93 81       	ldd	r25, Z+3	; 0x03
     434:	cc 01       	movw	r24, r24
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	bc 01       	movw	r22, r24
     43c:	cd 01       	movw	r24, r26
     43e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	9c 01       	movw	r18, r24
     448:	ad 01       	movw	r20, r26
     44a:	c5 01       	movw	r24, r10
     44c:	b4 01       	movw	r22, r8
     44e:	0e 94 15 05 	call	0xa2a	; 0xa2a <__subsf3>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	9c 01       	movw	r18, r24
     458:	ad 01       	movw	r20, r26
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__divsf3>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	ab 83       	std	Y+3, r26	; 0x03
     46c:	bc 83       	std	Y+4, r27	; 0x04

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     46e:	8f 81       	ldd	r24, Y+7	; 0x07
     470:	98 85       	ldd	r25, Y+8	; 0x08
     472:	fc 01       	movw	r30, r24
     474:	20 81       	ld	r18, Z
     476:	31 81       	ldd	r19, Z+1	; 0x01
     478:	89 85       	ldd	r24, Y+9	; 0x09
     47a:	9a 85       	ldd	r25, Y+10	; 0x0a
     47c:	fc 01       	movw	r30, r24
     47e:	82 81       	ldd	r24, Z+2	; 0x02
     480:	93 81       	ldd	r25, Z+3	; 0x03
     482:	a9 01       	movw	r20, r18
     484:	48 1b       	sub	r20, r24
     486:	59 0b       	sbc	r21, r25
     488:	ca 01       	movw	r24, r20
     48a:	9e 83       	std	Y+6, r25	; 0x06
     48c:	8d 83       	std	Y+5, r24	; 0x05
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     48e:	8d 81       	ldd	r24, Y+5	; 0x05
     490:	9e 81       	ldd	r25, Y+6	; 0x06
     492:	cc 01       	movw	r24, r24
     494:	a0 e0       	ldi	r26, 0x00	; 0
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	29 81       	ldd	r18, Y+1	; 0x01
     4a6:	3a 81       	ldd	r19, Y+2	; 0x02
     4a8:	4b 81       	ldd	r20, Y+3	; 0x03
     4aa:	5c 81       	ldd	r21, Y+4	; 0x04
     4ac:	bc 01       	movw	r22, r24
     4ae:	cd 01       	movw	r24, r26
     4b0:	0e 94 9c 06 	call	0xd38	; 0xd38 <__mulsf3>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fixunssfsi>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	9e 83       	std	Y+6, r25	; 0x06
     4c6:	8d 83       	std	Y+5, r24	; 0x05
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     4c8:	89 85       	ldd	r24, Y+9	; 0x09
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	fc 01       	movw	r30, r24
     4ce:	86 81       	ldd	r24, Z+6	; 0x06
     4d0:	97 81       	ldd	r25, Z+7	; 0x07
     4d2:	2d 81       	ldd	r18, Y+5	; 0x05
     4d4:	3e 81       	ldd	r19, Y+6	; 0x06
     4d6:	82 0f       	add	r24, r18
     4d8:	93 1f       	adc	r25, r19
     4da:	9e 83       	std	Y+6, r25	; 0x06
     4dc:	8d 83       	std	Y+5, r24	; 0x05
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     4de:	8f 81       	ldd	r24, Y+7	; 0x07
     4e0:	98 85       	ldd	r25, Y+8	; 0x08
     4e2:	2d 81       	ldd	r18, Y+5	; 0x05
     4e4:	3e 81       	ldd	r19, Y+6	; 0x06
     4e6:	fc 01       	movw	r30, r24
     4e8:	33 83       	std	Z+3, r19	; 0x03
     4ea:	22 83       	std	Z+2, r18	; 0x02
}
     4ec:	2a 96       	adiw	r28, 0x0a	; 10
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	8f 90       	pop	r8
     50c:	08 95       	ret

0000050e <init_channel>:

static void init_channel(t_channel *channel, e_psu_channel psu_ch)
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <init_channel+0x6>
     514:	1f 92       	push	r1
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	9a 83       	std	Y+2, r25	; 0x02
     51c:	89 83       	std	Y+1, r24	; 0x01
     51e:	6b 83       	std	Y+3, r22	; 0x03

    channel->voltage_readout.scale.min = 0;
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	fc 01       	movw	r30, r24
     526:	11 8a       	std	Z+17, r1	; 0x11
     528:	10 8a       	std	Z+16, r1	; 0x10
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	2f ef       	ldi	r18, 0xFF	; 255
     530:	33 e0       	ldi	r19, 0x03	; 3
     532:	fc 01       	movw	r30, r24
     534:	33 8b       	std	Z+19, r19	; 0x13
     536:	22 8b       	std	Z+18, r18	; 0x12
    channel->voltage_readout.scale.min_scaled = 0;
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	15 8a       	std	Z+21, r1	; 0x15
     540:	14 8a       	std	Z+20, r1	; 0x14
    channel->voltage_readout.scale.max_scaled = 5000;//25575;  /* Voltage */
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	28 e8       	ldi	r18, 0x88	; 136
     548:	33 e1       	ldi	r19, 0x13	; 19
     54a:	fc 01       	movw	r30, r24
     54c:	37 8b       	std	Z+23, r19	; 0x17
     54e:	26 8b       	std	Z+22, r18	; 0x16

    channel->current_readout.scale.min = 0;
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	fc 01       	movw	r30, r24
     556:	16 a6       	std	Z+46, r1	; 0x2e
     558:	15 a6       	std	Z+45, r1	; 0x2d
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	33 e0       	ldi	r19, 0x03	; 3
     562:	fc 01       	movw	r30, r24
     564:	30 ab       	std	Z+48, r19	; 0x30
     566:	27 a7       	std	Z+47, r18	; 0x2f
    channel->current_readout.scale.min_scaled = 0;
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	fc 01       	movw	r30, r24
     56e:	12 aa       	std	Z+50, r1	; 0x32
     570:	11 aa       	std	Z+49, r1	; 0x31
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	38 e0       	ldi	r19, 0x08	; 8
     57a:	fc 01       	movw	r30, r24
     57c:	34 ab       	std	Z+52, r19	; 0x34
     57e:	23 ab       	std	Z+51, r18	; 0x33

    switch(psu_ch)
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	21 f0       	breq	.+8      	; 0x592 <init_channel+0x84>
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	91 05       	cpc	r25, r1
     58e:	59 f0       	breq	.+22     	; 0x5a6 <init_channel+0x98>
            channel->voltage_channel = ADC_2;
            channel->current_channel = ADC_3;
            break;
        default:
            /* No channel selected */
            break;
     590:	15 c0       	rjmp	.+42     	; 0x5bc <init_channel+0xae>
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->voltage_channel = ADC_0;
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	fc 01       	movw	r30, r24
     598:	14 8e       	std	Z+28, r1	; 0x1c
            channel->current_channel = ADC_1;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	9a 81       	ldd	r25, Y+2	; 0x02
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	fc 01       	movw	r30, r24
     5a2:	21 af       	std	Z+57, r18	; 0x39
            break;
     5a4:	0b c0       	rjmp	.+22     	; 0x5bc <init_channel+0xae>
        case PSU_CHANNEL_1:
            channel->voltage_channel = ADC_2;
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	fc 01       	movw	r30, r24
     5ae:	24 8f       	std	Z+28, r18	; 0x1c
            channel->current_channel = ADC_3;
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	23 e0       	ldi	r18, 0x03	; 3
     5b6:	fc 01       	movw	r30, r24
     5b8:	21 af       	std	Z+57, r18	; 0x39
            break;
     5ba:	00 00       	nop
        default:
            /* No channel selected */
            break;
    }

}
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <init_psu>:

static void init_psu(t_channel *channel)
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <init_psu+0x6>
     5ce:	1f 92       	push	r1
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	9b 83       	std	Y+3, r25	; 0x03
     5d6:	8a 83       	std	Y+2, r24	; 0x02

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     5d8:	19 82       	std	Y+1, r1	; 0x01
     5da:	13 c0       	rjmp	.+38     	; 0x602 <init_psu+0x3a>
    {
        init_channel(&channel[i], (e_psu_channel)i);
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	28 2f       	mov	r18, r24
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4a e3       	ldi	r20, 0x3A	; 58
     5e4:	42 9f       	mul	r20, r18
     5e6:	c0 01       	movw	r24, r0
     5e8:	43 9f       	mul	r20, r19
     5ea:	90 0d       	add	r25, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	2a 81       	ldd	r18, Y+2	; 0x02
     5f0:	3b 81       	ldd	r19, Y+3	; 0x03
     5f2:	82 0f       	add	r24, r18
     5f4:	93 1f       	adc	r25, r19
     5f6:	69 81       	ldd	r22, Y+1	; 0x01
     5f8:	0e 94 87 02 	call	0x50e	; 0x50e <init_channel>
static void init_psu(t_channel *channel)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	50 f3       	brcs	.-44     	; 0x5dc <init_psu+0x14>
    {
        init_channel(&channel[i], (e_psu_channel)i);
    }

}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <init_io>:

static void init_io(void)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62

    cli();
     61c:	f8 94       	cli

    /* UART */
    uart_init();
     61e:	0e 94 84 04 	call	0x908	; 0x908 <uart_init>
    stdout = &uart_output;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	90 93 dd 01 	sts	0x01DD, r25
     62a:	80 93 dc 01 	sts	0x01DC, r24
    stdin  = &uart_input;
     62e:	8e e0       	ldi	r24, 0x0E	; 14
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	90 93 db 01 	sts	0x01DB, r25
     636:	80 93 da 01 	sts	0x01DA, r24

    /* ADC */
    adc_init();
     63a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <adc_init>

    /* System timer */
    timer_init();
     63e:	0e 94 30 04 	call	0x860	; 0x860 <timer_init>

    sei();
     642:	78 94       	sei

}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <adc_processing>:

static void adc_processing(t_channel *channel)
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <adc_processing+0x6>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_channel);
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	fc 01       	movw	r30, r24
     65e:	84 8d       	ldd	r24, Z+28	; 0x1c
     660:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_get>
     664:	9c 01       	movw	r18, r24
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	9a 81       	ldd	r25, Y+2	; 0x02
     66a:	fc 01       	movw	r30, r24
     66c:	31 8f       	std	Z+25, r19	; 0x19
     66e:	20 8f       	std	Z+24, r18	; 0x18
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	9c 01       	movw	r18, r24
     676:	22 5f       	subi	r18, 0xF2	; 242
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	48 96       	adiw	r24, 0x18	; 24
     680:	b9 01       	movw	r22, r18
     682:	0e 94 cb 01 	call	0x396	; 0x396 <lib_scale>

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_channel);
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	fc 01       	movw	r30, r24
     68c:	81 ad       	ldd	r24, Z+57	; 0x39
     68e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_get>
     692:	9c 01       	movw	r18, r24
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	fc 01       	movw	r30, r24
     69a:	36 ab       	std	Z+54, r19	; 0x36
     69c:	25 ab       	std	Z+53, r18	; 0x35
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	9c 01       	movw	r18, r24
     6a4:	25 5d       	subi	r18, 0xD5	; 213
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	c5 96       	adiw	r24, 0x35	; 53
     6ae:	b9 01       	movw	r22, r18
     6b0:	0e 94 cb 01 	call	0x396	; 0x396 <lib_scale>

}
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <input_processing>:

static void input_processing(void)
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     6c8:	19 82       	std	Y+1, r1	; 0x01
     6ca:	10 c0       	rjmp	.+32     	; 0x6ec <input_processing+0x2e>
    {
        adc_processing(&channels[i]);
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	28 2f       	mov	r18, r24
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4a e3       	ldi	r20, 0x3A	; 58
     6d4:	42 9f       	mul	r20, r18
     6d6:	c0 01       	movw	r24, r0
     6d8:	43 9f       	mul	r20, r19
     6da:	90 0d       	add	r25, r0
     6dc:	11 24       	eor	r1, r1
     6de:	80 5a       	subi	r24, 0xA0	; 160
     6e0:	9e 4f       	sbci	r25, 0xFE	; 254
     6e2:	0e 94 25 03 	call	0x64a	; 0x64a <adc_processing>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	68 f3       	brcs	.-38     	; 0x6cc <input_processing+0xe>
    {
        adc_processing(&channels[i]);
    }

}
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <main>:

int main(void)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62

    /* System init */
    system_init();
     702:	0e 94 1d 04 	call	0x83a	; 0x83a <system_init>

    /* Initialize I/Os */
    init_io();
     706:	0e 94 0a 03 	call	0x614	; 0x614 <init_io>

    /* Init ranges and precisions */
    init_psu(channels);
     70a:	80 e6       	ldi	r24, 0x60	; 96
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <init_psu>
    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/

    printf("Starting the main loop\r\n");
     712:	89 e2       	ldi	r24, 0x29	; 41
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 13 07 	call	0xe26	; 0xe26 <puts>
    while (1)
    {
        //DBG_LOW;
        /* Periodic functions */
        //adc_periodic();
        input_processing();
     71a:	0e 94 5f 03 	call	0x6be	; 0x6be <input_processing>
//printf("%d (%d)\r\n", channels[PSU_CHANNEL_0].voltage_readout.value.scaled, channels[PSU_CHANNEL_0].voltage_readout.value.raw);
//_delay_ms(500);
        /** DEBUG PERIODIC FUNCS **/

        /* Debug the timer */
        timer_debug();
     71e:	0e 94 4f 04 	call	0x89e	; 0x89e <timer_debug>
    }
     722:	fb cf       	rjmp	.-10     	; 0x71a <main+0x20>

00000724 <pwm_init>:
#define PWM_FREQ 0x03FF // pwm frequency - see table
#define PWM_MODE 0 // Fast (1) or Phase Correct (0)
#define PWM_QTY 1 // number of pwms, either 1 or 2

void pwm_init(void)
{
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62

  // setup PWM
  TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1)); //
     72c:	80 e8       	ldi	r24, 0x80	; 128
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	20 e8       	ldi	r18, 0x80	; 128
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
  TCCR1B = ((PWM_MODE << 3) | 0x11); // ck/1
     736:	81 e8       	ldi	r24, 0x81	; 129
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	21 e1       	ldi	r18, 0x11	; 17
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
  TIMSK1 = 0x20; // interrupt on capture interrupt
     740:	8f e6       	ldi	r24, 0x6F	; 111
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	20 e2       	ldi	r18, 0x20	; 32
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
  ICR1H = (PWM_FREQ >> 8);
     74a:	87 e8       	ldi	r24, 0x87	; 135
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	23 e0       	ldi	r18, 0x03	; 3
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
  ICR1L = (PWM_FREQ & 0xff);
     754:	86 e8       	ldi	r24, 0x86	; 134
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	2f ef       	ldi	r18, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
  DDRB |= ((PWM_QTY << 1) | 0x02); // turn on outputs
     75e:	84 e2       	ldi	r24, 0x24	; 36
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	24 e2       	ldi	r18, 0x24	; 36
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	f9 01       	movw	r30, r18
     768:	20 81       	ld	r18, Z
     76a:	22 60       	ori	r18, 0x02	; 2
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18

}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <ISR>:
  unsigned int temp1 = 0xFF;//ADCL; // you need to fetch the low byte first
  uint16_t temp2 = 0x7F;//ADCH;
  unsigned int a= 0;

ISR(TIMER1_CAPT_vect) {
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	00 d0       	rcall	.+0      	; 0x77c <ISR+0x6>
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	9a 83       	std	Y+2, r25	; 0x02
     782:	89 83       	std	Y+1, r24	; 0x01
  // unsigned int temp4 = temp3 + 0x8000;
  // OCR1AH = temp4 >> 8;
  // OCR1AL = temp4;

  // output high byte on OC1A
  OCR1AH = temp2 >> 8; // takes top 8 bits
     784:	89 e8       	ldi	r24, 0x89	; 137
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	20 91 1e 01 	lds	r18, 0x011E
     78c:	30 91 1f 01 	lds	r19, 0x011F
     790:	23 2f       	mov	r18, r19
     792:	33 27       	eor	r19, r19
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
  OCR1AL = temp2; // takes bottom 8 bits
     798:	88 e8       	ldi	r24, 0x88	; 136
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	20 91 1e 01 	lds	r18, 0x011E
     7a0:	30 91 1f 01 	lds	r19, 0x011F
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
  // output low byte on OC1B
  //OCR1BH = temp1 >> 8;
  //OCR1BL = temp1;


}
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	00 90 5f 00 	lds	r0, 0x005F
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
    printf("no ISR!\r\n");
     7de:	81 e4       	ldi	r24, 0x41	; 65
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 13 07 	call	0xe26	; 0xe26 <puts>
    for(;;);
     7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <__vector_default+0x34>

000007e8 <system_fatal>:
}

void system_fatal(char *str)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <system_fatal+0x6>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
    printf("%s", str);
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	8f 93       	push	r24
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	8f 93       	push	r24
     7fe:	8a e4       	ldi	r24, 0x4A	; 74
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	89 2f       	mov	r24, r25
     804:	8f 93       	push	r24
     806:	8a e4       	ldi	r24, 0x4A	; 74
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	8f 93       	push	r24
     80c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
    for(;;);
     818:	ff cf       	rjmp	.-2      	; 0x818 <system_fatal+0x30>

0000081a <system_reset>:
}

void system_reset(void)
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <system_reset+0x6>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
    /* start at zero! */
    void (*start)(void) = 0;
     824:	1a 82       	std	Y+2, r1	; 0x02
     826:	19 82       	std	Y+1, r1	; 0x01
    start();
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	fc 01       	movw	r30, r24
     82e:	09 95       	icall
}
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <system_init>:
 *
 * @brief System init
 *
 */
uint8_t system_init(void)
{
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	1f 92       	push	r1
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     844:	84 e5       	ldi	r24, 0x54	; 84
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	89 83       	std	Y+1, r24	; 0x01

    /* Reset state for the next proper detection */
    MCUSR = 0;
     84e:	84 e5       	ldi	r24, 0x54	; 84
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	10 82       	st	Z, r1

    return t;
     856:	89 81       	ldd	r24, Y+1	; 0x01
}
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <timer_init>:
 * @brief Initialize timer, interrupt and variable.
 *        Assumes that interrupts are disabled while intializing
 *
 */
void timer_init(void)
{
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     868:	84 e4       	ldi	r24, 0x44	; 68
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	22 e0       	ldi	r18, 0x02	; 2
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     872:	85 e4       	ldi	r24, 0x45	; 69
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	22 e0       	ldi	r18, 0x02	; 2
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18

    /* initialize counter */
    OCR0A = 200;
     87c:	87 e4       	ldi	r24, 0x47	; 71
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	28 ec       	ldi	r18, 0xC8	; 200
     882:	fc 01       	movw	r30, r24
     884:	20 83       	st	Z, r18

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     886:	8e e6       	ldi	r24, 0x6E	; 110
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2e e6       	ldi	r18, 0x6E	; 110
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	22 60       	ori	r18, 0x02	; 2
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18

}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <timer_debug>:

void timer_debug(void)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
    {
        ts = g_timestamp;
        printf("1 second trigger\r\n");
    }
#endif
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	00 90 5f 00 	lds	r0, 0x005F
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
    g_timestamp += 100;   	/* 100us */
     8c8:	80 91 d6 01 	lds	r24, 0x01D6
     8cc:	90 91 d7 01 	lds	r25, 0x01D7
     8d0:	a0 91 d8 01 	lds	r26, 0x01D8
     8d4:	b0 91 d9 01 	lds	r27, 0x01D9
     8d8:	8c 59       	subi	r24, 0x9C	; 156
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	af 4f       	sbci	r26, 0xFF	; 255
     8de:	bf 4f       	sbci	r27, 0xFF	; 255
     8e0:	80 93 d6 01 	sts	0x01D6, r24
     8e4:	90 93 d7 01 	sts	0x01D7, r25
     8e8:	a0 93 d8 01 	sts	0x01D8, r26
     8ec:	b0 93 d9 01 	sts	0x01D9, r27
    //TCNT0 = 0;
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	0f 90       	pop	r0
     8fe:	00 92 5f 00 	sts	0x005F, r0
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <uart_init>:
#define    RXEN    RXEN0
#define    TXEN    TXEN0
#define    UCSZ1    UCSZ01
#define    UCSZ0    UCSZ00

void uart_init(void) {
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62

    /* Enable UART power */
    power_usart0_enable();
     910:	84 e6       	ldi	r24, 0x64	; 100
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	24 e6       	ldi	r18, 0x64	; 100
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	2d 7f       	andi	r18, 0xFD	; 253
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	20 ec       	ldi	r18, 0xC0	; 192
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	22 60       	ori	r18, 0x02	; 2
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
    #else
        UCSRA &= ~(_BV(U2X0));
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     934:	85 ec       	ldi	r24, 0xC5	; 197
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
     93c:	84 ec       	ldi	r24, 0xC4	; 196
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	20 e1       	ldi	r18, 0x10	; 16
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     946:	82 ec       	ldi	r24, 0xC2	; 194
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	26 e0       	ldi	r18, 0x06	; 6
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18


    // rx/tx enable
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     950:	81 ec       	ldi	r24, 0xC1	; 193
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	28 e1       	ldi	r18, 0x18	; 24
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
//    UBRRL = UBRRL_VALUE;




}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <uart_putchar+0x6>
     966:	1f 92       	push	r1
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	7b 83       	std	Y+3, r23	; 0x03
     970:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	8a 30       	cpi	r24, 0x0A	; 10
     976:	31 f4       	brne	.+12     	; 0x984 <uart_putchar+0x24>
        uart_putchar('\r', stream);
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	9b 81       	ldd	r25, Y+3	; 0x03
     97c:	bc 01       	movw	r22, r24
     97e:	8d e0       	ldi	r24, 0x0D	; 13
     980:	0e 94 b0 04 	call	0x960	; 0x960 <uart_putchar>
    }
    loop_until_bit_is_set(UCSRA, UDRE);
     984:	80 ec       	ldi	r24, 0xC0	; 192
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	80 72       	andi	r24, 0x20	; 32
     992:	99 27       	eor	r25, r25
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	b1 f3       	breq	.-20     	; 0x984 <uart_putchar+0x24>
    UDR = c;
     998:	86 ec       	ldi	r24, 0xC6	; 198
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	29 81       	ldd	r18, Y+1	; 0x01
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
}
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <uart_getchar>:

char uart_getchar(FILE *stream) {
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <uart_getchar+0x6>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSRA, RXC);
     9bc:	80 ec       	ldi	r24, 0xC0	; 192
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	88 23       	and	r24, r24
     9c6:	d4 f7       	brge	.-12     	; 0x9bc <uart_getchar+0xe>
    return UDR;
     9c8:	86 ec       	ldi	r24, 0xC6	; 198
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	fc 01       	movw	r30, r24
     9ce:	80 81       	ld	r24, Z
}
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <__divmodhi4>:
     9da:	97 fb       	bst	r25, 7
     9dc:	07 2e       	mov	r0, r23
     9de:	16 f4       	brtc	.+4      	; 0x9e4 <__divmodhi4+0xa>
     9e0:	00 94       	com	r0
     9e2:	07 d0       	rcall	.+14     	; 0x9f2 <__divmodhi4_neg1>
     9e4:	77 fd       	sbrc	r23, 7
     9e6:	09 d0       	rcall	.+18     	; 0x9fa <__divmodhi4_neg2>
     9e8:	0e 94 01 05 	call	0xa02	; 0xa02 <__udivmodhi4>
     9ec:	07 fc       	sbrc	r0, 7
     9ee:	05 d0       	rcall	.+10     	; 0x9fa <__divmodhi4_neg2>
     9f0:	3e f4       	brtc	.+14     	; 0xa00 <__divmodhi4_exit>

000009f2 <__divmodhi4_neg1>:
     9f2:	90 95       	com	r25
     9f4:	81 95       	neg	r24
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	08 95       	ret

000009fa <__divmodhi4_neg2>:
     9fa:	70 95       	com	r23
     9fc:	61 95       	neg	r22
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000a00 <__divmodhi4_exit>:
     a00:	08 95       	ret

00000a02 <__udivmodhi4>:
     a02:	aa 1b       	sub	r26, r26
     a04:	bb 1b       	sub	r27, r27
     a06:	51 e1       	ldi	r21, 0x11	; 17
     a08:	07 c0       	rjmp	.+14     	; 0xa18 <__udivmodhi4_ep>

00000a0a <__udivmodhi4_loop>:
     a0a:	aa 1f       	adc	r26, r26
     a0c:	bb 1f       	adc	r27, r27
     a0e:	a6 17       	cp	r26, r22
     a10:	b7 07       	cpc	r27, r23
     a12:	10 f0       	brcs	.+4      	; 0xa18 <__udivmodhi4_ep>
     a14:	a6 1b       	sub	r26, r22
     a16:	b7 0b       	sbc	r27, r23

00000a18 <__udivmodhi4_ep>:
     a18:	88 1f       	adc	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	5a 95       	dec	r21
     a1e:	a9 f7       	brne	.-22     	; 0xa0a <__udivmodhi4_loop>
     a20:	80 95       	com	r24
     a22:	90 95       	com	r25
     a24:	bc 01       	movw	r22, r24
     a26:	cd 01       	movw	r24, r26
     a28:	08 95       	ret

00000a2a <__subsf3>:
     a2a:	50 58       	subi	r21, 0x80	; 128

00000a2c <__addsf3>:
     a2c:	bb 27       	eor	r27, r27
     a2e:	aa 27       	eor	r26, r26
     a30:	0e d0       	rcall	.+28     	; 0xa4e <__addsf3x>
     a32:	48 c1       	rjmp	.+656    	; 0xcc4 <__fp_round>
     a34:	39 d1       	rcall	.+626    	; 0xca8 <__fp_pscA>
     a36:	30 f0       	brcs	.+12     	; 0xa44 <__addsf3+0x18>
     a38:	3e d1       	rcall	.+636    	; 0xcb6 <__fp_pscB>
     a3a:	20 f0       	brcs	.+8      	; 0xa44 <__addsf3+0x18>
     a3c:	31 f4       	brne	.+12     	; 0xa4a <__addsf3+0x1e>
     a3e:	9f 3f       	cpi	r25, 0xFF	; 255
     a40:	11 f4       	brne	.+4      	; 0xa46 <__addsf3+0x1a>
     a42:	1e f4       	brtc	.+6      	; 0xa4a <__addsf3+0x1e>
     a44:	2e c1       	rjmp	.+604    	; 0xca2 <__fp_nan>
     a46:	0e f4       	brtc	.+2      	; 0xa4a <__addsf3+0x1e>
     a48:	e0 95       	com	r30
     a4a:	e7 fb       	bst	r30, 7
     a4c:	24 c1       	rjmp	.+584    	; 0xc96 <__fp_inf>

00000a4e <__addsf3x>:
     a4e:	e9 2f       	mov	r30, r25
     a50:	4a d1       	rcall	.+660    	; 0xce6 <__fp_split3>
     a52:	80 f3       	brcs	.-32     	; 0xa34 <__addsf3+0x8>
     a54:	ba 17       	cp	r27, r26
     a56:	62 07       	cpc	r22, r18
     a58:	73 07       	cpc	r23, r19
     a5a:	84 07       	cpc	r24, r20
     a5c:	95 07       	cpc	r25, r21
     a5e:	18 f0       	brcs	.+6      	; 0xa66 <__addsf3x+0x18>
     a60:	71 f4       	brne	.+28     	; 0xa7e <__addsf3x+0x30>
     a62:	9e f5       	brtc	.+102    	; 0xaca <__addsf3x+0x7c>
     a64:	62 c1       	rjmp	.+708    	; 0xd2a <__fp_zero>
     a66:	0e f4       	brtc	.+2      	; 0xa6a <__addsf3x+0x1c>
     a68:	e0 95       	com	r30
     a6a:	0b 2e       	mov	r0, r27
     a6c:	ba 2f       	mov	r27, r26
     a6e:	a0 2d       	mov	r26, r0
     a70:	0b 01       	movw	r0, r22
     a72:	b9 01       	movw	r22, r18
     a74:	90 01       	movw	r18, r0
     a76:	0c 01       	movw	r0, r24
     a78:	ca 01       	movw	r24, r20
     a7a:	a0 01       	movw	r20, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	ff 27       	eor	r31, r31
     a80:	59 1b       	sub	r21, r25
     a82:	99 f0       	breq	.+38     	; 0xaaa <__addsf3x+0x5c>
     a84:	59 3f       	cpi	r21, 0xF9	; 249
     a86:	50 f4       	brcc	.+20     	; 0xa9c <__addsf3x+0x4e>
     a88:	50 3e       	cpi	r21, 0xE0	; 224
     a8a:	68 f1       	brcs	.+90     	; 0xae6 <__addsf3x+0x98>
     a8c:	1a 16       	cp	r1, r26
     a8e:	f0 40       	sbci	r31, 0x00	; 0
     a90:	a2 2f       	mov	r26, r18
     a92:	23 2f       	mov	r18, r19
     a94:	34 2f       	mov	r19, r20
     a96:	44 27       	eor	r20, r20
     a98:	58 5f       	subi	r21, 0xF8	; 248
     a9a:	f3 cf       	rjmp	.-26     	; 0xa82 <__addsf3x+0x34>
     a9c:	46 95       	lsr	r20
     a9e:	37 95       	ror	r19
     aa0:	27 95       	ror	r18
     aa2:	a7 95       	ror	r26
     aa4:	f0 40       	sbci	r31, 0x00	; 0
     aa6:	53 95       	inc	r21
     aa8:	c9 f7       	brne	.-14     	; 0xa9c <__addsf3x+0x4e>
     aaa:	7e f4       	brtc	.+30     	; 0xaca <__addsf3x+0x7c>
     aac:	1f 16       	cp	r1, r31
     aae:	ba 0b       	sbc	r27, r26
     ab0:	62 0b       	sbc	r22, r18
     ab2:	73 0b       	sbc	r23, r19
     ab4:	84 0b       	sbc	r24, r20
     ab6:	ba f0       	brmi	.+46     	; 0xae6 <__addsf3x+0x98>
     ab8:	91 50       	subi	r25, 0x01	; 1
     aba:	a1 f0       	breq	.+40     	; 0xae4 <__addsf3x+0x96>
     abc:	ff 0f       	add	r31, r31
     abe:	bb 1f       	adc	r27, r27
     ac0:	66 1f       	adc	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	88 1f       	adc	r24, r24
     ac6:	c2 f7       	brpl	.-16     	; 0xab8 <__addsf3x+0x6a>
     ac8:	0e c0       	rjmp	.+28     	; 0xae6 <__addsf3x+0x98>
     aca:	ba 0f       	add	r27, r26
     acc:	62 1f       	adc	r22, r18
     ace:	73 1f       	adc	r23, r19
     ad0:	84 1f       	adc	r24, r20
     ad2:	48 f4       	brcc	.+18     	; 0xae6 <__addsf3x+0x98>
     ad4:	87 95       	ror	r24
     ad6:	77 95       	ror	r23
     ad8:	67 95       	ror	r22
     ada:	b7 95       	ror	r27
     adc:	f7 95       	ror	r31
     ade:	9e 3f       	cpi	r25, 0xFE	; 254
     ae0:	08 f0       	brcs	.+2      	; 0xae4 <__addsf3x+0x96>
     ae2:	b3 cf       	rjmp	.-154    	; 0xa4a <__addsf3+0x1e>
     ae4:	93 95       	inc	r25
     ae6:	88 0f       	add	r24, r24
     ae8:	08 f0       	brcs	.+2      	; 0xaec <__addsf3x+0x9e>
     aea:	99 27       	eor	r25, r25
     aec:	ee 0f       	add	r30, r30
     aee:	97 95       	ror	r25
     af0:	87 95       	ror	r24
     af2:	08 95       	ret

00000af4 <__divsf3>:
     af4:	0c d0       	rcall	.+24     	; 0xb0e <__divsf3x>
     af6:	e6 c0       	rjmp	.+460    	; 0xcc4 <__fp_round>
     af8:	de d0       	rcall	.+444    	; 0xcb6 <__fp_pscB>
     afa:	40 f0       	brcs	.+16     	; 0xb0c <__divsf3+0x18>
     afc:	d5 d0       	rcall	.+426    	; 0xca8 <__fp_pscA>
     afe:	30 f0       	brcs	.+12     	; 0xb0c <__divsf3+0x18>
     b00:	21 f4       	brne	.+8      	; 0xb0a <__divsf3+0x16>
     b02:	5f 3f       	cpi	r21, 0xFF	; 255
     b04:	19 f0       	breq	.+6      	; 0xb0c <__divsf3+0x18>
     b06:	c7 c0       	rjmp	.+398    	; 0xc96 <__fp_inf>
     b08:	51 11       	cpse	r21, r1
     b0a:	10 c1       	rjmp	.+544    	; 0xd2c <__fp_szero>
     b0c:	ca c0       	rjmp	.+404    	; 0xca2 <__fp_nan>

00000b0e <__divsf3x>:
     b0e:	eb d0       	rcall	.+470    	; 0xce6 <__fp_split3>
     b10:	98 f3       	brcs	.-26     	; 0xaf8 <__divsf3+0x4>

00000b12 <__divsf3_pse>:
     b12:	99 23       	and	r25, r25
     b14:	c9 f3       	breq	.-14     	; 0xb08 <__divsf3+0x14>
     b16:	55 23       	and	r21, r21
     b18:	b1 f3       	breq	.-20     	; 0xb06 <__divsf3+0x12>
     b1a:	95 1b       	sub	r25, r21
     b1c:	55 0b       	sbc	r21, r21
     b1e:	bb 27       	eor	r27, r27
     b20:	aa 27       	eor	r26, r26
     b22:	62 17       	cp	r22, r18
     b24:	73 07       	cpc	r23, r19
     b26:	84 07       	cpc	r24, r20
     b28:	38 f0       	brcs	.+14     	; 0xb38 <__divsf3_pse+0x26>
     b2a:	9f 5f       	subi	r25, 0xFF	; 255
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	22 0f       	add	r18, r18
     b30:	33 1f       	adc	r19, r19
     b32:	44 1f       	adc	r20, r20
     b34:	aa 1f       	adc	r26, r26
     b36:	a9 f3       	breq	.-22     	; 0xb22 <__divsf3_pse+0x10>
     b38:	33 d0       	rcall	.+102    	; 0xba0 <__divsf3_pse+0x8e>
     b3a:	0e 2e       	mov	r0, r30
     b3c:	3a f0       	brmi	.+14     	; 0xb4c <__divsf3_pse+0x3a>
     b3e:	e0 e8       	ldi	r30, 0x80	; 128
     b40:	30 d0       	rcall	.+96     	; 0xba2 <__divsf3_pse+0x90>
     b42:	91 50       	subi	r25, 0x01	; 1
     b44:	50 40       	sbci	r21, 0x00	; 0
     b46:	e6 95       	lsr	r30
     b48:	00 1c       	adc	r0, r0
     b4a:	ca f7       	brpl	.-14     	; 0xb3e <__divsf3_pse+0x2c>
     b4c:	29 d0       	rcall	.+82     	; 0xba0 <__divsf3_pse+0x8e>
     b4e:	fe 2f       	mov	r31, r30
     b50:	27 d0       	rcall	.+78     	; 0xba0 <__divsf3_pse+0x8e>
     b52:	66 0f       	add	r22, r22
     b54:	77 1f       	adc	r23, r23
     b56:	88 1f       	adc	r24, r24
     b58:	bb 1f       	adc	r27, r27
     b5a:	26 17       	cp	r18, r22
     b5c:	37 07       	cpc	r19, r23
     b5e:	48 07       	cpc	r20, r24
     b60:	ab 07       	cpc	r26, r27
     b62:	b0 e8       	ldi	r27, 0x80	; 128
     b64:	09 f0       	breq	.+2      	; 0xb68 <__divsf3_pse+0x56>
     b66:	bb 0b       	sbc	r27, r27
     b68:	80 2d       	mov	r24, r0
     b6a:	bf 01       	movw	r22, r30
     b6c:	ff 27       	eor	r31, r31
     b6e:	93 58       	subi	r25, 0x83	; 131
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
     b72:	2a f0       	brmi	.+10     	; 0xb7e <__divsf3_pse+0x6c>
     b74:	9e 3f       	cpi	r25, 0xFE	; 254
     b76:	51 05       	cpc	r21, r1
     b78:	68 f0       	brcs	.+26     	; 0xb94 <__divsf3_pse+0x82>
     b7a:	8d c0       	rjmp	.+282    	; 0xc96 <__fp_inf>
     b7c:	d7 c0       	rjmp	.+430    	; 0xd2c <__fp_szero>
     b7e:	5f 3f       	cpi	r21, 0xFF	; 255
     b80:	ec f3       	brlt	.-6      	; 0xb7c <__divsf3_pse+0x6a>
     b82:	98 3e       	cpi	r25, 0xE8	; 232
     b84:	dc f3       	brlt	.-10     	; 0xb7c <__divsf3_pse+0x6a>
     b86:	86 95       	lsr	r24
     b88:	77 95       	ror	r23
     b8a:	67 95       	ror	r22
     b8c:	b7 95       	ror	r27
     b8e:	f7 95       	ror	r31
     b90:	9f 5f       	subi	r25, 0xFF	; 255
     b92:	c9 f7       	brne	.-14     	; 0xb86 <__divsf3_pse+0x74>
     b94:	88 0f       	add	r24, r24
     b96:	91 1d       	adc	r25, r1
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	97 f9       	bld	r25, 7
     b9e:	08 95       	ret
     ba0:	e1 e0       	ldi	r30, 0x01	; 1
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	bb 1f       	adc	r27, r27
     baa:	62 17       	cp	r22, r18
     bac:	73 07       	cpc	r23, r19
     bae:	84 07       	cpc	r24, r20
     bb0:	ba 07       	cpc	r27, r26
     bb2:	20 f0       	brcs	.+8      	; 0xbbc <__divsf3_pse+0xaa>
     bb4:	62 1b       	sub	r22, r18
     bb6:	73 0b       	sbc	r23, r19
     bb8:	84 0b       	sbc	r24, r20
     bba:	ba 0b       	sbc	r27, r26
     bbc:	ee 1f       	adc	r30, r30
     bbe:	88 f7       	brcc	.-30     	; 0xba2 <__divsf3_pse+0x90>
     bc0:	e0 95       	com	r30
     bc2:	08 95       	ret

00000bc4 <__fixunssfsi>:
     bc4:	98 d0       	rcall	.+304    	; 0xcf6 <__fp_splitA>
     bc6:	88 f0       	brcs	.+34     	; 0xbea <__fixunssfsi+0x26>
     bc8:	9f 57       	subi	r25, 0x7F	; 127
     bca:	90 f0       	brcs	.+36     	; 0xbf0 <__fixunssfsi+0x2c>
     bcc:	b9 2f       	mov	r27, r25
     bce:	99 27       	eor	r25, r25
     bd0:	b7 51       	subi	r27, 0x17	; 23
     bd2:	a0 f0       	brcs	.+40     	; 0xbfc <__fixunssfsi+0x38>
     bd4:	d1 f0       	breq	.+52     	; 0xc0a <__fixunssfsi+0x46>
     bd6:	66 0f       	add	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	1a f0       	brmi	.+6      	; 0xbe6 <__fixunssfsi+0x22>
     be0:	ba 95       	dec	r27
     be2:	c9 f7       	brne	.-14     	; 0xbd6 <__fixunssfsi+0x12>
     be4:	12 c0       	rjmp	.+36     	; 0xc0a <__fixunssfsi+0x46>
     be6:	b1 30       	cpi	r27, 0x01	; 1
     be8:	81 f0       	breq	.+32     	; 0xc0a <__fixunssfsi+0x46>
     bea:	9f d0       	rcall	.+318    	; 0xd2a <__fp_zero>
     bec:	b1 e0       	ldi	r27, 0x01	; 1
     bee:	08 95       	ret
     bf0:	9c c0       	rjmp	.+312    	; 0xd2a <__fp_zero>
     bf2:	67 2f       	mov	r22, r23
     bf4:	78 2f       	mov	r23, r24
     bf6:	88 27       	eor	r24, r24
     bf8:	b8 5f       	subi	r27, 0xF8	; 248
     bfa:	39 f0       	breq	.+14     	; 0xc0a <__fixunssfsi+0x46>
     bfc:	b9 3f       	cpi	r27, 0xF9	; 249
     bfe:	cc f3       	brlt	.-14     	; 0xbf2 <__fixunssfsi+0x2e>
     c00:	86 95       	lsr	r24
     c02:	77 95       	ror	r23
     c04:	67 95       	ror	r22
     c06:	b3 95       	inc	r27
     c08:	d9 f7       	brne	.-10     	; 0xc00 <__fixunssfsi+0x3c>
     c0a:	3e f4       	brtc	.+14     	; 0xc1a <__fixunssfsi+0x56>
     c0c:	90 95       	com	r25
     c0e:	80 95       	com	r24
     c10:	70 95       	com	r23
     c12:	61 95       	neg	r22
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	8f 4f       	sbci	r24, 0xFF	; 255
     c18:	9f 4f       	sbci	r25, 0xFF	; 255
     c1a:	08 95       	ret

00000c1c <__floatunsisf>:
     c1c:	e8 94       	clt
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <__floatsisf+0x12>

00000c20 <__floatsisf>:
     c20:	97 fb       	bst	r25, 7
     c22:	3e f4       	brtc	.+14     	; 0xc32 <__floatsisf+0x12>
     c24:	90 95       	com	r25
     c26:	80 95       	com	r24
     c28:	70 95       	com	r23
     c2a:	61 95       	neg	r22
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	8f 4f       	sbci	r24, 0xFF	; 255
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	99 23       	and	r25, r25
     c34:	a9 f0       	breq	.+42     	; 0xc60 <__floatsisf+0x40>
     c36:	f9 2f       	mov	r31, r25
     c38:	96 e9       	ldi	r25, 0x96	; 150
     c3a:	bb 27       	eor	r27, r27
     c3c:	93 95       	inc	r25
     c3e:	f6 95       	lsr	r31
     c40:	87 95       	ror	r24
     c42:	77 95       	ror	r23
     c44:	67 95       	ror	r22
     c46:	b7 95       	ror	r27
     c48:	f1 11       	cpse	r31, r1
     c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <__floatsisf+0x1c>
     c4c:	fa f4       	brpl	.+62     	; 0xc8c <__floatsisf+0x6c>
     c4e:	bb 0f       	add	r27, r27
     c50:	11 f4       	brne	.+4      	; 0xc56 <__floatsisf+0x36>
     c52:	60 ff       	sbrs	r22, 0
     c54:	1b c0       	rjmp	.+54     	; 0xc8c <__floatsisf+0x6c>
     c56:	6f 5f       	subi	r22, 0xFF	; 255
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	8f 4f       	sbci	r24, 0xFF	; 255
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	16 c0       	rjmp	.+44     	; 0xc8c <__floatsisf+0x6c>
     c60:	88 23       	and	r24, r24
     c62:	11 f0       	breq	.+4      	; 0xc68 <__floatsisf+0x48>
     c64:	96 e9       	ldi	r25, 0x96	; 150
     c66:	11 c0       	rjmp	.+34     	; 0xc8a <__floatsisf+0x6a>
     c68:	77 23       	and	r23, r23
     c6a:	21 f0       	breq	.+8      	; 0xc74 <__floatsisf+0x54>
     c6c:	9e e8       	ldi	r25, 0x8E	; 142
     c6e:	87 2f       	mov	r24, r23
     c70:	76 2f       	mov	r23, r22
     c72:	05 c0       	rjmp	.+10     	; 0xc7e <__floatsisf+0x5e>
     c74:	66 23       	and	r22, r22
     c76:	71 f0       	breq	.+28     	; 0xc94 <__floatsisf+0x74>
     c78:	96 e8       	ldi	r25, 0x86	; 134
     c7a:	86 2f       	mov	r24, r22
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	2a f0       	brmi	.+10     	; 0xc8c <__floatsisf+0x6c>
     c82:	9a 95       	dec	r25
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	da f7       	brpl	.-10     	; 0xc82 <__floatsisf+0x62>
     c8c:	88 0f       	add	r24, r24
     c8e:	96 95       	lsr	r25
     c90:	87 95       	ror	r24
     c92:	97 f9       	bld	r25, 7
     c94:	08 95       	ret

00000c96 <__fp_inf>:
     c96:	97 f9       	bld	r25, 7
     c98:	9f 67       	ori	r25, 0x7F	; 127
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	08 95       	ret

00000ca2 <__fp_nan>:
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	80 ec       	ldi	r24, 0xC0	; 192
     ca6:	08 95       	ret

00000ca8 <__fp_pscA>:
     ca8:	00 24       	eor	r0, r0
     caa:	0a 94       	dec	r0
     cac:	16 16       	cp	r1, r22
     cae:	17 06       	cpc	r1, r23
     cb0:	18 06       	cpc	r1, r24
     cb2:	09 06       	cpc	r0, r25
     cb4:	08 95       	ret

00000cb6 <__fp_pscB>:
     cb6:	00 24       	eor	r0, r0
     cb8:	0a 94       	dec	r0
     cba:	12 16       	cp	r1, r18
     cbc:	13 06       	cpc	r1, r19
     cbe:	14 06       	cpc	r1, r20
     cc0:	05 06       	cpc	r0, r21
     cc2:	08 95       	ret

00000cc4 <__fp_round>:
     cc4:	09 2e       	mov	r0, r25
     cc6:	03 94       	inc	r0
     cc8:	00 0c       	add	r0, r0
     cca:	11 f4       	brne	.+4      	; 0xcd0 <__fp_round+0xc>
     ccc:	88 23       	and	r24, r24
     cce:	52 f0       	brmi	.+20     	; 0xce4 <__fp_round+0x20>
     cd0:	bb 0f       	add	r27, r27
     cd2:	40 f4       	brcc	.+16     	; 0xce4 <__fp_round+0x20>
     cd4:	bf 2b       	or	r27, r31
     cd6:	11 f4       	brne	.+4      	; 0xcdc <__fp_round+0x18>
     cd8:	60 ff       	sbrs	r22, 0
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__fp_round+0x20>
     cdc:	6f 5f       	subi	r22, 0xFF	; 255
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	8f 4f       	sbci	r24, 0xFF	; 255
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	08 95       	ret

00000ce6 <__fp_split3>:
     ce6:	57 fd       	sbrc	r21, 7
     ce8:	90 58       	subi	r25, 0x80	; 128
     cea:	44 0f       	add	r20, r20
     cec:	55 1f       	adc	r21, r21
     cee:	59 f0       	breq	.+22     	; 0xd06 <__fp_splitA+0x10>
     cf0:	5f 3f       	cpi	r21, 0xFF	; 255
     cf2:	71 f0       	breq	.+28     	; 0xd10 <__fp_splitA+0x1a>
     cf4:	47 95       	ror	r20

00000cf6 <__fp_splitA>:
     cf6:	88 0f       	add	r24, r24
     cf8:	97 fb       	bst	r25, 7
     cfa:	99 1f       	adc	r25, r25
     cfc:	61 f0       	breq	.+24     	; 0xd16 <__fp_splitA+0x20>
     cfe:	9f 3f       	cpi	r25, 0xFF	; 255
     d00:	79 f0       	breq	.+30     	; 0xd20 <__fp_splitA+0x2a>
     d02:	87 95       	ror	r24
     d04:	08 95       	ret
     d06:	12 16       	cp	r1, r18
     d08:	13 06       	cpc	r1, r19
     d0a:	14 06       	cpc	r1, r20
     d0c:	55 1f       	adc	r21, r21
     d0e:	f2 cf       	rjmp	.-28     	; 0xcf4 <__fp_split3+0xe>
     d10:	46 95       	lsr	r20
     d12:	f1 df       	rcall	.-30     	; 0xcf6 <__fp_splitA>
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <__fp_splitA+0x30>
     d16:	16 16       	cp	r1, r22
     d18:	17 06       	cpc	r1, r23
     d1a:	18 06       	cpc	r1, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	f1 cf       	rjmp	.-30     	; 0xd02 <__fp_splitA+0xc>
     d20:	86 95       	lsr	r24
     d22:	71 05       	cpc	r23, r1
     d24:	61 05       	cpc	r22, r1
     d26:	08 94       	sec
     d28:	08 95       	ret

00000d2a <__fp_zero>:
     d2a:	e8 94       	clt

00000d2c <__fp_szero>:
     d2c:	bb 27       	eor	r27, r27
     d2e:	66 27       	eor	r22, r22
     d30:	77 27       	eor	r23, r23
     d32:	cb 01       	movw	r24, r22
     d34:	97 f9       	bld	r25, 7
     d36:	08 95       	ret

00000d38 <__mulsf3>:
     d38:	0b d0       	rcall	.+22     	; 0xd50 <__mulsf3x>
     d3a:	c4 cf       	rjmp	.-120    	; 0xcc4 <__fp_round>
     d3c:	b5 df       	rcall	.-150    	; 0xca8 <__fp_pscA>
     d3e:	28 f0       	brcs	.+10     	; 0xd4a <__mulsf3+0x12>
     d40:	ba df       	rcall	.-140    	; 0xcb6 <__fp_pscB>
     d42:	18 f0       	brcs	.+6      	; 0xd4a <__mulsf3+0x12>
     d44:	95 23       	and	r25, r21
     d46:	09 f0       	breq	.+2      	; 0xd4a <__mulsf3+0x12>
     d48:	a6 cf       	rjmp	.-180    	; 0xc96 <__fp_inf>
     d4a:	ab cf       	rjmp	.-170    	; 0xca2 <__fp_nan>
     d4c:	11 24       	eor	r1, r1
     d4e:	ee cf       	rjmp	.-36     	; 0xd2c <__fp_szero>

00000d50 <__mulsf3x>:
     d50:	ca df       	rcall	.-108    	; 0xce6 <__fp_split3>
     d52:	a0 f3       	brcs	.-24     	; 0xd3c <__mulsf3+0x4>

00000d54 <__mulsf3_pse>:
     d54:	95 9f       	mul	r25, r21
     d56:	d1 f3       	breq	.-12     	; 0xd4c <__mulsf3+0x14>
     d58:	95 0f       	add	r25, r21
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	55 1f       	adc	r21, r21
     d5e:	62 9f       	mul	r22, r18
     d60:	f0 01       	movw	r30, r0
     d62:	72 9f       	mul	r23, r18
     d64:	bb 27       	eor	r27, r27
     d66:	f0 0d       	add	r31, r0
     d68:	b1 1d       	adc	r27, r1
     d6a:	63 9f       	mul	r22, r19
     d6c:	aa 27       	eor	r26, r26
     d6e:	f0 0d       	add	r31, r0
     d70:	b1 1d       	adc	r27, r1
     d72:	aa 1f       	adc	r26, r26
     d74:	64 9f       	mul	r22, r20
     d76:	66 27       	eor	r22, r22
     d78:	b0 0d       	add	r27, r0
     d7a:	a1 1d       	adc	r26, r1
     d7c:	66 1f       	adc	r22, r22
     d7e:	82 9f       	mul	r24, r18
     d80:	22 27       	eor	r18, r18
     d82:	b0 0d       	add	r27, r0
     d84:	a1 1d       	adc	r26, r1
     d86:	62 1f       	adc	r22, r18
     d88:	73 9f       	mul	r23, r19
     d8a:	b0 0d       	add	r27, r0
     d8c:	a1 1d       	adc	r26, r1
     d8e:	62 1f       	adc	r22, r18
     d90:	83 9f       	mul	r24, r19
     d92:	a0 0d       	add	r26, r0
     d94:	61 1d       	adc	r22, r1
     d96:	22 1f       	adc	r18, r18
     d98:	74 9f       	mul	r23, r20
     d9a:	33 27       	eor	r19, r19
     d9c:	a0 0d       	add	r26, r0
     d9e:	61 1d       	adc	r22, r1
     da0:	23 1f       	adc	r18, r19
     da2:	84 9f       	mul	r24, r20
     da4:	60 0d       	add	r22, r0
     da6:	21 1d       	adc	r18, r1
     da8:	82 2f       	mov	r24, r18
     daa:	76 2f       	mov	r23, r22
     dac:	6a 2f       	mov	r22, r26
     dae:	11 24       	eor	r1, r1
     db0:	9f 57       	subi	r25, 0x7F	; 127
     db2:	50 40       	sbci	r21, 0x00	; 0
     db4:	8a f0       	brmi	.+34     	; 0xdd8 <__mulsf3_pse+0x84>
     db6:	e1 f0       	breq	.+56     	; 0xdf0 <__mulsf3_pse+0x9c>
     db8:	88 23       	and	r24, r24
     dba:	4a f0       	brmi	.+18     	; 0xdce <__mulsf3_pse+0x7a>
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	bb 1f       	adc	r27, r27
     dc2:	66 1f       	adc	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	91 50       	subi	r25, 0x01	; 1
     dca:	50 40       	sbci	r21, 0x00	; 0
     dcc:	a9 f7       	brne	.-22     	; 0xdb8 <__mulsf3_pse+0x64>
     dce:	9e 3f       	cpi	r25, 0xFE	; 254
     dd0:	51 05       	cpc	r21, r1
     dd2:	70 f0       	brcs	.+28     	; 0xdf0 <__mulsf3_pse+0x9c>
     dd4:	60 cf       	rjmp	.-320    	; 0xc96 <__fp_inf>
     dd6:	aa cf       	rjmp	.-172    	; 0xd2c <__fp_szero>
     dd8:	5f 3f       	cpi	r21, 0xFF	; 255
     dda:	ec f3       	brlt	.-6      	; 0xdd6 <__mulsf3_pse+0x82>
     ddc:	98 3e       	cpi	r25, 0xE8	; 232
     dde:	dc f3       	brlt	.-10     	; 0xdd6 <__mulsf3_pse+0x82>
     de0:	86 95       	lsr	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	b7 95       	ror	r27
     de8:	f7 95       	ror	r31
     dea:	e7 95       	ror	r30
     dec:	9f 5f       	subi	r25, 0xFF	; 255
     dee:	c1 f7       	brne	.-16     	; 0xde0 <__mulsf3_pse+0x8c>
     df0:	fe 2b       	or	r31, r30
     df2:	88 0f       	add	r24, r24
     df4:	91 1d       	adc	r25, r1
     df6:	96 95       	lsr	r25
     df8:	87 95       	ror	r24
     dfa:	97 f9       	bld	r25, 7
     dfc:	08 95       	ret

00000dfe <printf>:
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e5 e0       	ldi	r30, 0x05	; 5
     e04:	f7 e0       	ldi	r31, 0x07	; 7
     e06:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__prologue_saves__+0x20>
     e0a:	fe 01       	movw	r30, r28
     e0c:	35 96       	adiw	r30, 0x05	; 5
     e0e:	61 91       	ld	r22, Z+
     e10:	71 91       	ld	r23, Z+
     e12:	af 01       	movw	r20, r30
     e14:	80 91 dc 01 	lds	r24, 0x01DC
     e18:	90 91 dd 01 	lds	r25, 0x01DD
     e1c:	0e 94 40 07 	call	0xe80	; 0xe80 <vfprintf>
     e20:	e2 e0       	ldi	r30, 0x02	; 2
     e22:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__epilogue_restores__+0x20>

00000e26 <puts>:
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	e0 91 dc 01 	lds	r30, 0x01DC
     e32:	f0 91 dd 01 	lds	r31, 0x01DD
     e36:	23 81       	ldd	r18, Z+3	; 0x03
     e38:	21 ff       	sbrs	r18, 1
     e3a:	1b c0       	rjmp	.+54     	; 0xe72 <puts+0x4c>
     e3c:	ec 01       	movw	r28, r24
     e3e:	00 e0       	ldi	r16, 0x00	; 0
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	89 91       	ld	r24, Y+
     e44:	60 91 dc 01 	lds	r22, 0x01DC
     e48:	70 91 dd 01 	lds	r23, 0x01DD
     e4c:	db 01       	movw	r26, r22
     e4e:	18 96       	adiw	r26, 0x08	; 8
     e50:	ed 91       	ld	r30, X+
     e52:	fc 91       	ld	r31, X
     e54:	19 97       	sbiw	r26, 0x09	; 9
     e56:	88 23       	and	r24, r24
     e58:	31 f0       	breq	.+12     	; 0xe66 <puts+0x40>
     e5a:	09 95       	icall
     e5c:	89 2b       	or	r24, r25
     e5e:	89 f3       	breq	.-30     	; 0xe42 <puts+0x1c>
     e60:	0f ef       	ldi	r16, 0xFF	; 255
     e62:	1f ef       	ldi	r17, 0xFF	; 255
     e64:	ee cf       	rjmp	.-36     	; 0xe42 <puts+0x1c>
     e66:	8a e0       	ldi	r24, 0x0A	; 10
     e68:	09 95       	icall
     e6a:	89 2b       	or	r24, r25
     e6c:	11 f4       	brne	.+4      	; 0xe72 <puts+0x4c>
     e6e:	c8 01       	movw	r24, r16
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <puts+0x50>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	9f ef       	ldi	r25, 0xFF	; 255
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <vfprintf>:
     e80:	ac e0       	ldi	r26, 0x0C	; 12
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e4       	ldi	r30, 0x46	; 70
     e86:	f7 e0       	ldi	r31, 0x07	; 7
     e88:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__prologue_saves__>
     e8c:	7c 01       	movw	r14, r24
     e8e:	6b 01       	movw	r12, r22
     e90:	8a 01       	movw	r16, r20
     e92:	fc 01       	movw	r30, r24
     e94:	17 82       	std	Z+7, r1	; 0x07
     e96:	16 82       	std	Z+6, r1	; 0x06
     e98:	83 81       	ldd	r24, Z+3	; 0x03
     e9a:	81 ff       	sbrs	r24, 1
     e9c:	bd c1       	rjmp	.+890    	; 0x1218 <vfprintf+0x398>
     e9e:	ce 01       	movw	r24, r28
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	4c 01       	movw	r8, r24
     ea4:	f7 01       	movw	r30, r14
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	f6 01       	movw	r30, r12
     eaa:	93 fd       	sbrc	r25, 3
     eac:	85 91       	lpm	r24, Z+
     eae:	93 ff       	sbrs	r25, 3
     eb0:	81 91       	ld	r24, Z+
     eb2:	6f 01       	movw	r12, r30
     eb4:	88 23       	and	r24, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <vfprintf+0x3a>
     eb8:	ab c1       	rjmp	.+854    	; 0x1210 <vfprintf+0x390>
     eba:	85 32       	cpi	r24, 0x25	; 37
     ebc:	39 f4       	brne	.+14     	; 0xecc <vfprintf+0x4c>
     ebe:	93 fd       	sbrc	r25, 3
     ec0:	85 91       	lpm	r24, Z+
     ec2:	93 ff       	sbrs	r25, 3
     ec4:	81 91       	ld	r24, Z+
     ec6:	6f 01       	movw	r12, r30
     ec8:	85 32       	cpi	r24, 0x25	; 37
     eca:	29 f4       	brne	.+10     	; 0xed6 <vfprintf+0x56>
     ecc:	b7 01       	movw	r22, r14
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
     ed4:	e7 cf       	rjmp	.-50     	; 0xea4 <vfprintf+0x24>
     ed6:	51 2c       	mov	r5, r1
     ed8:	31 2c       	mov	r3, r1
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	20 32       	cpi	r18, 0x20	; 32
     ede:	a0 f4       	brcc	.+40     	; 0xf08 <vfprintf+0x88>
     ee0:	8b 32       	cpi	r24, 0x2B	; 43
     ee2:	69 f0       	breq	.+26     	; 0xefe <vfprintf+0x7e>
     ee4:	30 f4       	brcc	.+12     	; 0xef2 <vfprintf+0x72>
     ee6:	80 32       	cpi	r24, 0x20	; 32
     ee8:	59 f0       	breq	.+22     	; 0xf00 <vfprintf+0x80>
     eea:	83 32       	cpi	r24, 0x23	; 35
     eec:	69 f4       	brne	.+26     	; 0xf08 <vfprintf+0x88>
     eee:	20 61       	ori	r18, 0x10	; 16
     ef0:	2c c0       	rjmp	.+88     	; 0xf4a <vfprintf+0xca>
     ef2:	8d 32       	cpi	r24, 0x2D	; 45
     ef4:	39 f0       	breq	.+14     	; 0xf04 <vfprintf+0x84>
     ef6:	80 33       	cpi	r24, 0x30	; 48
     ef8:	39 f4       	brne	.+14     	; 0xf08 <vfprintf+0x88>
     efa:	21 60       	ori	r18, 0x01	; 1
     efc:	26 c0       	rjmp	.+76     	; 0xf4a <vfprintf+0xca>
     efe:	22 60       	ori	r18, 0x02	; 2
     f00:	24 60       	ori	r18, 0x04	; 4
     f02:	23 c0       	rjmp	.+70     	; 0xf4a <vfprintf+0xca>
     f04:	28 60       	ori	r18, 0x08	; 8
     f06:	21 c0       	rjmp	.+66     	; 0xf4a <vfprintf+0xca>
     f08:	27 fd       	sbrc	r18, 7
     f0a:	27 c0       	rjmp	.+78     	; 0xf5a <vfprintf+0xda>
     f0c:	30 ed       	ldi	r19, 0xD0	; 208
     f0e:	38 0f       	add	r19, r24
     f10:	3a 30       	cpi	r19, 0x0A	; 10
     f12:	78 f4       	brcc	.+30     	; 0xf32 <vfprintf+0xb2>
     f14:	26 ff       	sbrs	r18, 6
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <vfprintf+0xa4>
     f18:	fa e0       	ldi	r31, 0x0A	; 10
     f1a:	5f 9e       	mul	r5, r31
     f1c:	30 0d       	add	r19, r0
     f1e:	11 24       	eor	r1, r1
     f20:	53 2e       	mov	r5, r19
     f22:	13 c0       	rjmp	.+38     	; 0xf4a <vfprintf+0xca>
     f24:	8a e0       	ldi	r24, 0x0A	; 10
     f26:	38 9e       	mul	r3, r24
     f28:	30 0d       	add	r19, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	33 2e       	mov	r3, r19
     f2e:	20 62       	ori	r18, 0x20	; 32
     f30:	0c c0       	rjmp	.+24     	; 0xf4a <vfprintf+0xca>
     f32:	8e 32       	cpi	r24, 0x2E	; 46
     f34:	21 f4       	brne	.+8      	; 0xf3e <vfprintf+0xbe>
     f36:	26 fd       	sbrc	r18, 6
     f38:	6b c1       	rjmp	.+726    	; 0x1210 <vfprintf+0x390>
     f3a:	20 64       	ori	r18, 0x40	; 64
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <vfprintf+0xca>
     f3e:	8c 36       	cpi	r24, 0x6C	; 108
     f40:	11 f4       	brne	.+4      	; 0xf46 <vfprintf+0xc6>
     f42:	20 68       	ori	r18, 0x80	; 128
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0xca>
     f46:	88 36       	cpi	r24, 0x68	; 104
     f48:	41 f4       	brne	.+16     	; 0xf5a <vfprintf+0xda>
     f4a:	f6 01       	movw	r30, r12
     f4c:	93 fd       	sbrc	r25, 3
     f4e:	85 91       	lpm	r24, Z+
     f50:	93 ff       	sbrs	r25, 3
     f52:	81 91       	ld	r24, Z+
     f54:	6f 01       	movw	r12, r30
     f56:	81 11       	cpse	r24, r1
     f58:	c1 cf       	rjmp	.-126    	; 0xedc <vfprintf+0x5c>
     f5a:	98 2f       	mov	r25, r24
     f5c:	9f 7d       	andi	r25, 0xDF	; 223
     f5e:	95 54       	subi	r25, 0x45	; 69
     f60:	93 30       	cpi	r25, 0x03	; 3
     f62:	28 f4       	brcc	.+10     	; 0xf6e <vfprintf+0xee>
     f64:	0c 5f       	subi	r16, 0xFC	; 252
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	ff e3       	ldi	r31, 0x3F	; 63
     f6a:	f9 83       	std	Y+1, r31	; 0x01
     f6c:	0d c0       	rjmp	.+26     	; 0xf88 <vfprintf+0x108>
     f6e:	83 36       	cpi	r24, 0x63	; 99
     f70:	31 f0       	breq	.+12     	; 0xf7e <vfprintf+0xfe>
     f72:	83 37       	cpi	r24, 0x73	; 115
     f74:	71 f0       	breq	.+28     	; 0xf92 <vfprintf+0x112>
     f76:	83 35       	cpi	r24, 0x53	; 83
     f78:	09 f0       	breq	.+2      	; 0xf7c <vfprintf+0xfc>
     f7a:	5b c0       	rjmp	.+182    	; 0x1032 <vfprintf+0x1b2>
     f7c:	22 c0       	rjmp	.+68     	; 0xfc2 <vfprintf+0x142>
     f7e:	f8 01       	movw	r30, r16
     f80:	80 81       	ld	r24, Z
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	0e 5f       	subi	r16, 0xFE	; 254
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	44 24       	eor	r4, r4
     f8a:	43 94       	inc	r4
     f8c:	51 2c       	mov	r5, r1
     f8e:	54 01       	movw	r10, r8
     f90:	15 c0       	rjmp	.+42     	; 0xfbc <vfprintf+0x13c>
     f92:	38 01       	movw	r6, r16
     f94:	f2 e0       	ldi	r31, 0x02	; 2
     f96:	6f 0e       	add	r6, r31
     f98:	71 1c       	adc	r7, r1
     f9a:	f8 01       	movw	r30, r16
     f9c:	a0 80       	ld	r10, Z
     f9e:	b1 80       	ldd	r11, Z+1	; 0x01
     fa0:	26 ff       	sbrs	r18, 6
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <vfprintf+0x12a>
     fa4:	65 2d       	mov	r22, r5
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x12e>
     faa:	6f ef       	ldi	r22, 0xFF	; 255
     fac:	7f ef       	ldi	r23, 0xFF	; 255
     fae:	c5 01       	movw	r24, r10
     fb0:	2c 87       	std	Y+12, r18	; 0x0c
     fb2:	0e 94 1d 09 	call	0x123a	; 0x123a <strnlen>
     fb6:	2c 01       	movw	r4, r24
     fb8:	83 01       	movw	r16, r6
     fba:	2c 85       	ldd	r18, Y+12	; 0x0c
     fbc:	2f 77       	andi	r18, 0x7F	; 127
     fbe:	22 2e       	mov	r2, r18
     fc0:	17 c0       	rjmp	.+46     	; 0xff0 <vfprintf+0x170>
     fc2:	38 01       	movw	r6, r16
     fc4:	f2 e0       	ldi	r31, 0x02	; 2
     fc6:	6f 0e       	add	r6, r31
     fc8:	71 1c       	adc	r7, r1
     fca:	f8 01       	movw	r30, r16
     fcc:	a0 80       	ld	r10, Z
     fce:	b1 80       	ldd	r11, Z+1	; 0x01
     fd0:	26 ff       	sbrs	r18, 6
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <vfprintf+0x15a>
     fd4:	65 2d       	mov	r22, r5
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x15e>
     fda:	6f ef       	ldi	r22, 0xFF	; 255
     fdc:	7f ef       	ldi	r23, 0xFF	; 255
     fde:	c5 01       	movw	r24, r10
     fe0:	2c 87       	std	Y+12, r18	; 0x0c
     fe2:	0e 94 12 09 	call	0x1224	; 0x1224 <strnlen_P>
     fe6:	2c 01       	movw	r4, r24
     fe8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fea:	20 68       	ori	r18, 0x80	; 128
     fec:	22 2e       	mov	r2, r18
     fee:	83 01       	movw	r16, r6
     ff0:	23 fc       	sbrc	r2, 3
     ff2:	1b c0       	rjmp	.+54     	; 0x102a <vfprintf+0x1aa>
     ff4:	83 2d       	mov	r24, r3
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	48 16       	cp	r4, r24
     ffa:	59 06       	cpc	r5, r25
     ffc:	b0 f4       	brcc	.+44     	; 0x102a <vfprintf+0x1aa>
     ffe:	b7 01       	movw	r22, r14
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    1008:	3a 94       	dec	r3
    100a:	f4 cf       	rjmp	.-24     	; 0xff4 <vfprintf+0x174>
    100c:	f5 01       	movw	r30, r10
    100e:	27 fc       	sbrc	r2, 7
    1010:	85 91       	lpm	r24, Z+
    1012:	27 fe       	sbrs	r2, 7
    1014:	81 91       	ld	r24, Z+
    1016:	5f 01       	movw	r10, r30
    1018:	b7 01       	movw	r22, r14
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    1020:	31 10       	cpse	r3, r1
    1022:	3a 94       	dec	r3
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	4f 1a       	sub	r4, r31
    1028:	51 08       	sbc	r5, r1
    102a:	41 14       	cp	r4, r1
    102c:	51 04       	cpc	r5, r1
    102e:	71 f7       	brne	.-36     	; 0x100c <vfprintf+0x18c>
    1030:	e5 c0       	rjmp	.+458    	; 0x11fc <vfprintf+0x37c>
    1032:	84 36       	cpi	r24, 0x64	; 100
    1034:	11 f0       	breq	.+4      	; 0x103a <vfprintf+0x1ba>
    1036:	89 36       	cpi	r24, 0x69	; 105
    1038:	39 f5       	brne	.+78     	; 0x1088 <vfprintf+0x208>
    103a:	f8 01       	movw	r30, r16
    103c:	27 ff       	sbrs	r18, 7
    103e:	07 c0       	rjmp	.+14     	; 0x104e <vfprintf+0x1ce>
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	0c 5f       	subi	r16, 0xFC	; 252
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	08 c0       	rjmp	.+16     	; 0x105e <vfprintf+0x1de>
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	88 27       	eor	r24, r24
    1054:	77 fd       	sbrc	r23, 7
    1056:	80 95       	com	r24
    1058:	98 2f       	mov	r25, r24
    105a:	0e 5f       	subi	r16, 0xFE	; 254
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	2f 76       	andi	r18, 0x6F	; 111
    1060:	b2 2e       	mov	r11, r18
    1062:	97 ff       	sbrs	r25, 7
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <vfprintf+0x1f8>
    1066:	90 95       	com	r25
    1068:	80 95       	com	r24
    106a:	70 95       	com	r23
    106c:	61 95       	neg	r22
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	8f 4f       	sbci	r24, 0xFF	; 255
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	20 68       	ori	r18, 0x80	; 128
    1076:	b2 2e       	mov	r11, r18
    1078:	2a e0       	ldi	r18, 0x0A	; 10
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	a4 01       	movw	r20, r8
    107e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__ultoa_invert>
    1082:	a8 2e       	mov	r10, r24
    1084:	a8 18       	sub	r10, r8
    1086:	44 c0       	rjmp	.+136    	; 0x1110 <vfprintf+0x290>
    1088:	85 37       	cpi	r24, 0x75	; 117
    108a:	29 f4       	brne	.+10     	; 0x1096 <vfprintf+0x216>
    108c:	2f 7e       	andi	r18, 0xEF	; 239
    108e:	b2 2e       	mov	r11, r18
    1090:	2a e0       	ldi	r18, 0x0A	; 10
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	25 c0       	rjmp	.+74     	; 0x10e0 <vfprintf+0x260>
    1096:	f2 2f       	mov	r31, r18
    1098:	f9 7f       	andi	r31, 0xF9	; 249
    109a:	bf 2e       	mov	r11, r31
    109c:	8f 36       	cpi	r24, 0x6F	; 111
    109e:	c1 f0       	breq	.+48     	; 0x10d0 <vfprintf+0x250>
    10a0:	18 f4       	brcc	.+6      	; 0x10a8 <vfprintf+0x228>
    10a2:	88 35       	cpi	r24, 0x58	; 88
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <vfprintf+0x244>
    10a6:	b4 c0       	rjmp	.+360    	; 0x1210 <vfprintf+0x390>
    10a8:	80 37       	cpi	r24, 0x70	; 112
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <vfprintf+0x232>
    10ac:	88 37       	cpi	r24, 0x78	; 120
    10ae:	21 f0       	breq	.+8      	; 0x10b8 <vfprintf+0x238>
    10b0:	af c0       	rjmp	.+350    	; 0x1210 <vfprintf+0x390>
    10b2:	2f 2f       	mov	r18, r31
    10b4:	20 61       	ori	r18, 0x10	; 16
    10b6:	b2 2e       	mov	r11, r18
    10b8:	b4 fe       	sbrs	r11, 4
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <vfprintf+0x256>
    10bc:	8b 2d       	mov	r24, r11
    10be:	84 60       	ori	r24, 0x04	; 4
    10c0:	b8 2e       	mov	r11, r24
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <vfprintf+0x256>
    10c4:	24 ff       	sbrs	r18, 4
    10c6:	0a c0       	rjmp	.+20     	; 0x10dc <vfprintf+0x25c>
    10c8:	9f 2f       	mov	r25, r31
    10ca:	96 60       	ori	r25, 0x06	; 6
    10cc:	b9 2e       	mov	r11, r25
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <vfprintf+0x25c>
    10d0:	28 e0       	ldi	r18, 0x08	; 8
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <vfprintf+0x260>
    10d6:	20 e1       	ldi	r18, 0x10	; 16
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <vfprintf+0x260>
    10dc:	20 e1       	ldi	r18, 0x10	; 16
    10de:	32 e0       	ldi	r19, 0x02	; 2
    10e0:	f8 01       	movw	r30, r16
    10e2:	b7 fe       	sbrs	r11, 7
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <vfprintf+0x274>
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	0c 5f       	subi	r16, 0xFC	; 252
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	06 c0       	rjmp	.+12     	; 0x1100 <vfprintf+0x280>
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 5f       	subi	r16, 0xFE	; 254
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	a4 01       	movw	r20, r8
    1102:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__ultoa_invert>
    1106:	a8 2e       	mov	r10, r24
    1108:	a8 18       	sub	r10, r8
    110a:	fb 2d       	mov	r31, r11
    110c:	ff 77       	andi	r31, 0x7F	; 127
    110e:	bf 2e       	mov	r11, r31
    1110:	b6 fe       	sbrs	r11, 6
    1112:	0b c0       	rjmp	.+22     	; 0x112a <vfprintf+0x2aa>
    1114:	2b 2d       	mov	r18, r11
    1116:	2e 7f       	andi	r18, 0xFE	; 254
    1118:	a5 14       	cp	r10, r5
    111a:	50 f4       	brcc	.+20     	; 0x1130 <vfprintf+0x2b0>
    111c:	b4 fe       	sbrs	r11, 4
    111e:	0a c0       	rjmp	.+20     	; 0x1134 <vfprintf+0x2b4>
    1120:	b2 fc       	sbrc	r11, 2
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <vfprintf+0x2b4>
    1124:	2b 2d       	mov	r18, r11
    1126:	2e 7e       	andi	r18, 0xEE	; 238
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <vfprintf+0x2b4>
    112a:	7a 2c       	mov	r7, r10
    112c:	2b 2d       	mov	r18, r11
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x2b6>
    1130:	7a 2c       	mov	r7, r10
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <vfprintf+0x2b6>
    1134:	75 2c       	mov	r7, r5
    1136:	24 ff       	sbrs	r18, 4
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <vfprintf+0x2d4>
    113a:	fe 01       	movw	r30, r28
    113c:	ea 0d       	add	r30, r10
    113e:	f1 1d       	adc	r31, r1
    1140:	80 81       	ld	r24, Z
    1142:	80 33       	cpi	r24, 0x30	; 48
    1144:	11 f4       	brne	.+4      	; 0x114a <vfprintf+0x2ca>
    1146:	29 7e       	andi	r18, 0xE9	; 233
    1148:	09 c0       	rjmp	.+18     	; 0x115c <vfprintf+0x2dc>
    114a:	22 ff       	sbrs	r18, 2
    114c:	06 c0       	rjmp	.+12     	; 0x115a <vfprintf+0x2da>
    114e:	73 94       	inc	r7
    1150:	73 94       	inc	r7
    1152:	04 c0       	rjmp	.+8      	; 0x115c <vfprintf+0x2dc>
    1154:	82 2f       	mov	r24, r18
    1156:	86 78       	andi	r24, 0x86	; 134
    1158:	09 f0       	breq	.+2      	; 0x115c <vfprintf+0x2dc>
    115a:	73 94       	inc	r7
    115c:	23 fd       	sbrc	r18, 3
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <vfprintf+0x306>
    1160:	20 ff       	sbrs	r18, 0
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0x2f0>
    1164:	5a 2c       	mov	r5, r10
    1166:	73 14       	cp	r7, r3
    1168:	18 f4       	brcc	.+6      	; 0x1170 <vfprintf+0x2f0>
    116a:	53 0c       	add	r5, r3
    116c:	57 18       	sub	r5, r7
    116e:	73 2c       	mov	r7, r3
    1170:	73 14       	cp	r7, r3
    1172:	68 f4       	brcc	.+26     	; 0x118e <vfprintf+0x30e>
    1174:	b7 01       	movw	r22, r14
    1176:	80 e2       	ldi	r24, 0x20	; 32
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	2c 87       	std	Y+12, r18	; 0x0c
    117c:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    1180:	73 94       	inc	r7
    1182:	2c 85       	ldd	r18, Y+12	; 0x0c
    1184:	f5 cf       	rjmp	.-22     	; 0x1170 <vfprintf+0x2f0>
    1186:	73 14       	cp	r7, r3
    1188:	10 f4       	brcc	.+4      	; 0x118e <vfprintf+0x30e>
    118a:	37 18       	sub	r3, r7
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <vfprintf+0x310>
    118e:	31 2c       	mov	r3, r1
    1190:	24 ff       	sbrs	r18, 4
    1192:	12 c0       	rjmp	.+36     	; 0x11b8 <vfprintf+0x338>
    1194:	b7 01       	movw	r22, r14
    1196:	80 e3       	ldi	r24, 0x30	; 48
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2c 87       	std	Y+12, r18	; 0x0c
    119c:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    11a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a2:	22 ff       	sbrs	r18, 2
    11a4:	17 c0       	rjmp	.+46     	; 0x11d4 <vfprintf+0x354>
    11a6:	21 ff       	sbrs	r18, 1
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <vfprintf+0x330>
    11aa:	88 e5       	ldi	r24, 0x58	; 88
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <vfprintf+0x334>
    11b0:	88 e7       	ldi	r24, 0x78	; 120
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	b7 01       	movw	r22, r14
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <vfprintf+0x350>
    11b8:	82 2f       	mov	r24, r18
    11ba:	86 78       	andi	r24, 0x86	; 134
    11bc:	59 f0       	breq	.+22     	; 0x11d4 <vfprintf+0x354>
    11be:	21 fd       	sbrc	r18, 1
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <vfprintf+0x346>
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <vfprintf+0x348>
    11c6:	8b e2       	ldi	r24, 0x2B	; 43
    11c8:	27 fd       	sbrc	r18, 7
    11ca:	8d e2       	ldi	r24, 0x2D	; 45
    11cc:	b7 01       	movw	r22, r14
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    11d4:	a5 14       	cp	r10, r5
    11d6:	38 f4       	brcc	.+14     	; 0x11e6 <vfprintf+0x366>
    11d8:	b7 01       	movw	r22, r14
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    11e2:	5a 94       	dec	r5
    11e4:	f7 cf       	rjmp	.-18     	; 0x11d4 <vfprintf+0x354>
    11e6:	aa 94       	dec	r10
    11e8:	f4 01       	movw	r30, r8
    11ea:	ea 0d       	add	r30, r10
    11ec:	f1 1d       	adc	r31, r1
    11ee:	80 81       	ld	r24, Z
    11f0:	b7 01       	movw	r22, r14
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    11f8:	a1 10       	cpse	r10, r1
    11fa:	f5 cf       	rjmp	.-22     	; 0x11e6 <vfprintf+0x366>
    11fc:	33 20       	and	r3, r3
    11fe:	09 f4       	brne	.+2      	; 0x1202 <vfprintf+0x382>
    1200:	51 ce       	rjmp	.-862    	; 0xea4 <vfprintf+0x24>
    1202:	b7 01       	movw	r22, r14
    1204:	80 e2       	ldi	r24, 0x20	; 32
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 28 09 	call	0x1250	; 0x1250 <fputc>
    120c:	3a 94       	dec	r3
    120e:	f6 cf       	rjmp	.-20     	; 0x11fc <vfprintf+0x37c>
    1210:	f7 01       	movw	r30, r14
    1212:	86 81       	ldd	r24, Z+6	; 0x06
    1214:	97 81       	ldd	r25, Z+7	; 0x07
    1216:	02 c0       	rjmp	.+4      	; 0x121c <vfprintf+0x39c>
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	2c 96       	adiw	r28, 0x0c	; 12
    121e:	e2 e1       	ldi	r30, 0x12	; 18
    1220:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__epilogue_restores__>

00001224 <strnlen_P>:
    1224:	fc 01       	movw	r30, r24
    1226:	05 90       	lpm	r0, Z+
    1228:	61 50       	subi	r22, 0x01	; 1
    122a:	70 40       	sbci	r23, 0x00	; 0
    122c:	01 10       	cpse	r0, r1
    122e:	d8 f7       	brcc	.-10     	; 0x1226 <strnlen_P+0x2>
    1230:	80 95       	com	r24
    1232:	90 95       	com	r25
    1234:	8e 0f       	add	r24, r30
    1236:	9f 1f       	adc	r25, r31
    1238:	08 95       	ret

0000123a <strnlen>:
    123a:	fc 01       	movw	r30, r24
    123c:	61 50       	subi	r22, 0x01	; 1
    123e:	70 40       	sbci	r23, 0x00	; 0
    1240:	01 90       	ld	r0, Z+
    1242:	01 10       	cpse	r0, r1
    1244:	d8 f7       	brcc	.-10     	; 0x123c <strnlen+0x2>
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	8e 0f       	add	r24, r30
    124c:	9f 1f       	adc	r25, r31
    124e:	08 95       	ret

00001250 <fputc>:
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	18 2f       	mov	r17, r24
    125a:	09 2f       	mov	r16, r25
    125c:	eb 01       	movw	r28, r22
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	81 fd       	sbrc	r24, 1
    1262:	03 c0       	rjmp	.+6      	; 0x126a <fputc+0x1a>
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	20 c0       	rjmp	.+64     	; 0x12aa <fputc+0x5a>
    126a:	82 ff       	sbrs	r24, 2
    126c:	10 c0       	rjmp	.+32     	; 0x128e <fputc+0x3e>
    126e:	4e 81       	ldd	r20, Y+6	; 0x06
    1270:	5f 81       	ldd	r21, Y+7	; 0x07
    1272:	2c 81       	ldd	r18, Y+4	; 0x04
    1274:	3d 81       	ldd	r19, Y+5	; 0x05
    1276:	42 17       	cp	r20, r18
    1278:	53 07       	cpc	r21, r19
    127a:	7c f4       	brge	.+30     	; 0x129a <fputc+0x4a>
    127c:	e8 81       	ld	r30, Y
    127e:	f9 81       	ldd	r31, Y+1	; 0x01
    1280:	9f 01       	movw	r18, r30
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	39 83       	std	Y+1, r19	; 0x01
    1288:	28 83       	st	Y, r18
    128a:	10 83       	st	Z, r17
    128c:	06 c0       	rjmp	.+12     	; 0x129a <fputc+0x4a>
    128e:	e8 85       	ldd	r30, Y+8	; 0x08
    1290:	f9 85       	ldd	r31, Y+9	; 0x09
    1292:	81 2f       	mov	r24, r17
    1294:	09 95       	icall
    1296:	89 2b       	or	r24, r25
    1298:	29 f7       	brne	.-54     	; 0x1264 <fputc+0x14>
    129a:	2e 81       	ldd	r18, Y+6	; 0x06
    129c:	3f 81       	ldd	r19, Y+7	; 0x07
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	3f 83       	std	Y+7, r19	; 0x07
    12a4:	2e 83       	std	Y+6, r18	; 0x06
    12a6:	81 2f       	mov	r24, r17
    12a8:	90 2f       	mov	r25, r16
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <__ultoa_invert>:
    12b4:	fa 01       	movw	r30, r20
    12b6:	aa 27       	eor	r26, r26
    12b8:	28 30       	cpi	r18, 0x08	; 8
    12ba:	51 f1       	breq	.+84     	; 0x1310 <__ultoa_invert+0x5c>
    12bc:	20 31       	cpi	r18, 0x10	; 16
    12be:	81 f1       	breq	.+96     	; 0x1320 <__ultoa_invert+0x6c>
    12c0:	e8 94       	clt
    12c2:	6f 93       	push	r22
    12c4:	6e 7f       	andi	r22, 0xFE	; 254
    12c6:	6e 5f       	subi	r22, 0xFE	; 254
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	af 4f       	sbci	r26, 0xFF	; 255
    12d0:	b1 e0       	ldi	r27, 0x01	; 1
    12d2:	3e d0       	rcall	.+124    	; 0x1350 <__ultoa_invert+0x9c>
    12d4:	b4 e0       	ldi	r27, 0x04	; 4
    12d6:	3c d0       	rcall	.+120    	; 0x1350 <__ultoa_invert+0x9c>
    12d8:	67 0f       	add	r22, r23
    12da:	78 1f       	adc	r23, r24
    12dc:	89 1f       	adc	r24, r25
    12de:	9a 1f       	adc	r25, r26
    12e0:	a1 1d       	adc	r26, r1
    12e2:	68 0f       	add	r22, r24
    12e4:	79 1f       	adc	r23, r25
    12e6:	8a 1f       	adc	r24, r26
    12e8:	91 1d       	adc	r25, r1
    12ea:	a1 1d       	adc	r26, r1
    12ec:	6a 0f       	add	r22, r26
    12ee:	71 1d       	adc	r23, r1
    12f0:	81 1d       	adc	r24, r1
    12f2:	91 1d       	adc	r25, r1
    12f4:	a1 1d       	adc	r26, r1
    12f6:	20 d0       	rcall	.+64     	; 0x1338 <__ultoa_invert+0x84>
    12f8:	09 f4       	brne	.+2      	; 0x12fc <__ultoa_invert+0x48>
    12fa:	68 94       	set
    12fc:	3f 91       	pop	r19
    12fe:	2a e0       	ldi	r18, 0x0A	; 10
    1300:	26 9f       	mul	r18, r22
    1302:	11 24       	eor	r1, r1
    1304:	30 19       	sub	r19, r0
    1306:	30 5d       	subi	r19, 0xD0	; 208
    1308:	31 93       	st	Z+, r19
    130a:	de f6       	brtc	.-74     	; 0x12c2 <__ultoa_invert+0xe>
    130c:	cf 01       	movw	r24, r30
    130e:	08 95       	ret
    1310:	46 2f       	mov	r20, r22
    1312:	47 70       	andi	r20, 0x07	; 7
    1314:	40 5d       	subi	r20, 0xD0	; 208
    1316:	41 93       	st	Z+, r20
    1318:	b3 e0       	ldi	r27, 0x03	; 3
    131a:	0f d0       	rcall	.+30     	; 0x133a <__ultoa_invert+0x86>
    131c:	c9 f7       	brne	.-14     	; 0x1310 <__ultoa_invert+0x5c>
    131e:	f6 cf       	rjmp	.-20     	; 0x130c <__ultoa_invert+0x58>
    1320:	46 2f       	mov	r20, r22
    1322:	4f 70       	andi	r20, 0x0F	; 15
    1324:	40 5d       	subi	r20, 0xD0	; 208
    1326:	4a 33       	cpi	r20, 0x3A	; 58
    1328:	18 f0       	brcs	.+6      	; 0x1330 <__ultoa_invert+0x7c>
    132a:	49 5d       	subi	r20, 0xD9	; 217
    132c:	31 fd       	sbrc	r19, 1
    132e:	40 52       	subi	r20, 0x20	; 32
    1330:	41 93       	st	Z+, r20
    1332:	02 d0       	rcall	.+4      	; 0x1338 <__ultoa_invert+0x84>
    1334:	a9 f7       	brne	.-22     	; 0x1320 <__ultoa_invert+0x6c>
    1336:	ea cf       	rjmp	.-44     	; 0x130c <__ultoa_invert+0x58>
    1338:	b4 e0       	ldi	r27, 0x04	; 4
    133a:	a6 95       	lsr	r26
    133c:	97 95       	ror	r25
    133e:	87 95       	ror	r24
    1340:	77 95       	ror	r23
    1342:	67 95       	ror	r22
    1344:	ba 95       	dec	r27
    1346:	c9 f7       	brne	.-14     	; 0x133a <__ultoa_invert+0x86>
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 05       	cpc	r22, r1
    134c:	71 05       	cpc	r23, r1
    134e:	08 95       	ret
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	0a 2e       	mov	r0, r26
    1356:	06 94       	lsr	r0
    1358:	57 95       	ror	r21
    135a:	47 95       	ror	r20
    135c:	37 95       	ror	r19
    135e:	27 95       	ror	r18
    1360:	ba 95       	dec	r27
    1362:	c9 f7       	brne	.-14     	; 0x1356 <__ultoa_invert+0xa2>
    1364:	62 0f       	add	r22, r18
    1366:	73 1f       	adc	r23, r19
    1368:	84 1f       	adc	r24, r20
    136a:	95 1f       	adc	r25, r21
    136c:	a0 1d       	adc	r26, r0
    136e:	08 95       	ret

00001370 <__prologue_saves__>:
    1370:	2f 92       	push	r2
    1372:	3f 92       	push	r3
    1374:	4f 92       	push	r4
    1376:	5f 92       	push	r5
    1378:	6f 92       	push	r6
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	ca 1b       	sub	r28, r26
    139a:	db 0b       	sbc	r29, r27
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	09 94       	ijmp

000013a8 <__epilogue_restores__>:
    13a8:	2a 88       	ldd	r2, Y+18	; 0x12
    13aa:	39 88       	ldd	r3, Y+17	; 0x11
    13ac:	48 88       	ldd	r4, Y+16	; 0x10
    13ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    13b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13ba:	b9 84       	ldd	r11, Y+9	; 0x09
    13bc:	c8 84       	ldd	r12, Y+8	; 0x08
    13be:	df 80       	ldd	r13, Y+7	; 0x07
    13c0:	ee 80       	ldd	r14, Y+6	; 0x06
    13c2:	fd 80       	ldd	r15, Y+5	; 0x05
    13c4:	0c 81       	ldd	r16, Y+4	; 0x04
    13c6:	1b 81       	ldd	r17, Y+3	; 0x03
    13c8:	aa 81       	ldd	r26, Y+2	; 0x02
    13ca:	b9 81       	ldd	r27, Y+1	; 0x01
    13cc:	ce 0f       	add	r28, r30
    13ce:	d1 1d       	adc	r29, r1
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	ed 01       	movw	r28, r26
    13dc:	08 95       	ret

000013de <_exit>:
    13de:	f8 94       	cli

000013e0 <__stop_program>:
    13e0:	ff cf       	rjmp	.-2      	; 0x13e0 <__stop_program>
