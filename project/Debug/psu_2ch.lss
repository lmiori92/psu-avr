
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  000019ea  00001a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018e  008001c6  008001c6  00001b44  2**0
                  ALLOC
  3 .stab         00003378  00000000  00000000  00001b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002140  00000000  00000000  00004ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006ffc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ee       	ldi	r30, 0xEA	; 234
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3c       	cpi	r26, 0xC6	; 198
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a6 ec       	ldi	r26, 0xC6	; 198
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 35       	cpi	r26, 0x54	; 84
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3c 03 	call	0x678	; 0x678 <main>
      9e:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      c8:	80 91 d2 01 	lds	r24, 0x01D2
      cc:	88 23       	and	r24, r24
      ce:	c1 f0       	breq	.+48     	; 0x100 <__vector_21+0x5a>
        adc_mux_switch = true;
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
      d0:	10 92 d2 01 	sts	0x01D2, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
      d4:	80 91 7a 00 	lds	r24, 0x007A
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 93 7a 00 	sts	0x007A, r24

}
      de:	ff 91       	pop	r31
      e0:	ef 91       	pop	r30
      e2:	bf 91       	pop	r27
      e4:	af 91       	pop	r26
      e6:	9f 91       	pop	r25
      e8:	8f 91       	pop	r24
      ea:	7f 91       	pop	r23
      ec:	6f 91       	pop	r22
      ee:	5f 91       	pop	r21
      f0:	4f 91       	pop	r20
      f2:	3f 91       	pop	r19
      f4:	2f 91       	pop	r18
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
     100:	80 91 d3 01 	lds	r24, 0x01D3
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	20 91 78 00 	lds	r18, 0x0078
     10a:	40 91 79 00 	lds	r20, 0x0079
     10e:	fc 01       	movw	r30, r24
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	ea 53       	subi	r30, 0x3A	; 58
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	34 2b       	or	r19, r20
     11c:	31 83       	std	Z+1, r19	; 0x01
     11e:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__divmodhi4>
     12a:	80 93 d3 01 	sts	0x01D3, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     12e:	80 91 7c 00 	lds	r24, 0x007C
     132:	80 7f       	andi	r24, 0xF0	; 240
     134:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adc_mux_index;
     138:	80 91 7c 00 	lds	r24, 0x007C
     13c:	90 91 d3 01 	lds	r25, 0x01D3
     140:	89 2b       	or	r24, r25
     142:	80 93 7c 00 	sts	0x007C, r24
        adc_mux_switch = true;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 d2 01 	sts	0x01D2, r24
     14c:	c3 cf       	rjmp	.-122    	; 0xd4 <__vector_21+0x2e>

0000014e <adc_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     14e:	ec e7       	ldi	r30, 0x7C	; 124
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 71       	andi	r24, 0x10	; 16
     156:	80 83       	st	Z, r24

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     168:	80 81       	ld	r24, Z
     16a:	8f 64       	ori	r24, 0x4F	; 79
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <adc_get>:
/* nothing */
#endif

uint16_t adc_get(e_adc_channel channel)
{
    return adc_samples[channel];
     170:	e8 2f       	mov	r30, r24
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	ea 53       	subi	r30, 0x3A	; 58
     17a:	fe 4f       	sbci	r31, 0xFE	; 254
}
     17c:	80 81       	ld	r24, Z
     17e:	91 81       	ldd	r25, Z+1	; 0x01
     180:	08 95       	ret

00000182 <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     182:	08 95       	ret

00000184 <adc_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void adc_last_reset(void)
{
     184:	08 95       	ret

00000186 <encoder_init>:
 */
void encoder_init(void)
{

    /* Logic initialization */
    g_encoder[ENC_HW_0].pin_A = PIN6;
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	80 93 d4 01 	sts	0x01D4, r24
    g_encoder[ENC_HW_0].pin_B = PIN7;
     18c:	87 e0       	ldi	r24, 0x07	; 7
     18e:	80 93 d5 01 	sts	0x01D5, r24
    g_encoder[ENC_HW_0].tick = g_timestamp;
     192:	80 91 4a 03 	lds	r24, 0x034A
     196:	90 91 4b 03 	lds	r25, 0x034B
     19a:	a0 91 4c 03 	lds	r26, 0x034C
     19e:	b0 91 4d 03 	lds	r27, 0x034D
     1a2:	80 93 d9 01 	sts	0x01D9, r24
     1a6:	90 93 da 01 	sts	0x01DA, r25
     1aa:	a0 93 db 01 	sts	0x01DB, r26
     1ae:	b0 93 dc 01 	sts	0x01DC, r27

    /* Inputs */
    ENC_DDR &= ~(1<<PIN7);
     1b2:	57 98       	cbi	0x0a, 7	; 10
    ENC_DDR &= ~(1<<PIN6);
     1b4:	56 98       	cbi	0x0a, 6	; 10
    DDRB &= ~(1<<PIN0);
     1b6:	20 98       	cbi	0x04, 0	; 4

    /* Turn on pull-ups (encoder switches to GND) */
    ENC_PORT |= (1<<PIN7) | (1 << PIN6);
     1b8:	8b b1       	in	r24, 0x0b	; 11
     1ba:	80 6c       	ori	r24, 0xC0	; 192
     1bc:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 1<<PIN0;
     1be:	28 9a       	sbi	0x05, 0	; 5

    /* Enable interrupts on the encoder pins */
    PCMSK0 |= (1 << PCINT0 );                  /* click */
     1c0:	eb e6       	ldi	r30, 0x6B	; 107
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	81 60       	ori	r24, 0x01	; 1
     1c8:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT23 ) | (1 << PCINT22); /* wheel */
     1ca:	ed e6       	ldi	r30, 0x6D	; 109
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 6c       	ori	r24, 0xC0	; 192
     1d2:	80 83       	st	Z, r24

    /* Enable Pin Change subsystem (interrupts) */
    PCICR |= (1<< PCIE0);
     1d4:	e8 e6       	ldi	r30, 0x68	; 104
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	80 83       	st	Z, r24
    PCICR |= (1<< PCIE2);
     1de:	80 81       	ld	r24, Z
     1e0:	84 60       	ori	r24, 0x04	; 4
     1e2:	80 83       	st	Z, r24
     1e4:	08 95       	ret

000001e6 <encoder_set_callback>:
/**
 * Set the encoder event callback
 */
void encoder_set_callback(e_enc_hw index, t_enc_cb event_cb)
{
    g_encoder[index].evt_cb = event_cb;
     1e6:	9f e0       	ldi	r25, 0x0F	; 15
     1e8:	89 9f       	mul	r24, r25
     1ea:	f0 01       	movw	r30, r0
     1ec:	11 24       	eor	r1, r1
     1ee:	ec 52       	subi	r30, 0x2C	; 44
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	76 87       	std	Z+14, r23	; 0x0e
     1f4:	65 87       	std	Z+13, r22	; 0x0d
     1f6:	08 95       	ret

000001f8 <__vector_3>:
}

ISR(PCINT0_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
    /* TODO generate the appropriate event */
}
     202:	0f 90       	pop	r0
     204:	0f be       	out	0x3f, r0	; 63
     206:	0f 90       	pop	r0
     208:	1f 90       	pop	r1
     20a:	18 95       	reti

0000020c <__vector_5>:
 * Best case execution time: 10us
 * Worst case execution time: 20us
 * => both well below the 100us system tick timer
 */
ISR(PCINT2_vect)
{
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31

    uint8_t i = 0;  /* left for a future multiple encoder implementation */

    {
        /* Shift the old values */
        g_encoder[i].pin_raw <<= 2;
     236:	90 91 d6 01 	lds	r25, 0x01D6
     23a:	99 0f       	add	r25, r25
     23c:	99 0f       	add	r25, r25
     23e:	90 93 d6 01 	sts	0x01D6, r25
        /* Store the new values */
        g_encoder[i].pin_raw |= ((ENC_PIN >> g_encoder[i].pin_A) & 0x1U) | (((ENC_PIN >> g_encoder[i].pin_B) & 0x1U) << 1U);
     242:	e9 b1       	in	r30, 0x09	; 9
     244:	89 b1       	in	r24, 0x09	; 9
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	00 90 d4 01 	lds	r0, 0x01D4
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_5+0x46>
     24e:	f5 95       	asr	r31
     250:	e7 95       	ror	r30
     252:	0a 94       	dec	r0
     254:	e2 f7       	brpl	.-8      	; 0x24e <__vector_5+0x42>
     256:	e1 70       	andi	r30, 0x01	; 1
     258:	e9 2b       	or	r30, r25
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	00 90 d5 01 	lds	r0, 0x01D5
     260:	02 c0       	rjmp	.+4      	; 0x266 <__vector_5+0x5a>
     262:	95 95       	asr	r25
     264:	87 95       	ror	r24
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <__vector_5+0x56>
     26a:	81 70       	andi	r24, 0x01	; 1
     26c:	88 0f       	add	r24, r24
     26e:	e8 2b       	or	r30, r24
     270:	e0 93 d6 01 	sts	0x01D6, r30
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
     274:	ef 70       	andi	r30, 0x0F	; 15
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	e4 5e       	subi	r30, 0xE4	; 228
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	20 81       	ld	r18, Z
     27e:	80 91 d7 01 	lds	r24, 0x01D7
     282:	28 0f       	add	r18, r24
     284:	20 93 d7 01 	sts	0x01D7, r18
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
     288:	80 91 4a 03 	lds	r24, 0x034A
     28c:	90 91 4b 03 	lds	r25, 0x034B
     290:	a0 91 4c 03 	lds	r26, 0x034C
     294:	b0 91 4d 03 	lds	r27, 0x034D
     298:	40 91 d9 01 	lds	r20, 0x01D9
     29c:	50 91 da 01 	lds	r21, 0x01DA
     2a0:	60 91 db 01 	lds	r22, 0x01DB
     2a4:	70 91 dc 01 	lds	r23, 0x01DC
     2a8:	7c 01       	movw	r14, r24
     2aa:	8d 01       	movw	r16, r26
     2ac:	e4 1a       	sub	r14, r20
     2ae:	f5 0a       	sbc	r15, r21
     2b0:	06 0b       	sbc	r16, r22
     2b2:	17 0b       	sbc	r17, r23
     2b4:	b8 01       	movw	r22, r16
     2b6:	a7 01       	movw	r20, r14
     2b8:	41 32       	cpi	r20, 0x21	; 33
     2ba:	01 ea       	ldi	r16, 0xA1	; 161
     2bc:	50 07       	cpc	r21, r16
     2be:	07 e0       	ldi	r16, 0x07	; 7
     2c0:	60 07       	cpc	r22, r16
     2c2:	71 05       	cpc	r23, r1
     2c4:	b8 f5       	brcc	.+110    	; 0x334 <__vector_5+0x128>
            /* Timeout */
            g_encoder[i].raw = 0;
            g_encoder[i].pin_raw = 0;
            g_encoder[i].tick = g_timestamp;
        }
        else if (g_encoder[i].raw > 2)
     2c6:	23 30       	cpi	r18, 0x03	; 3
     2c8:	0c f0       	brlt	.+2      	; 0x2cc <__vector_5+0xc0>
     2ca:	41 c0       	rjmp	.+130    	; 0x34e <__vector_5+0x142>
            g_encoder[i].value++;
            g_encoder[i].raw = 0;
            g_encoder[i].tick = g_timestamp;
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
        }
        else if (g_encoder[i].raw < -2)
     2cc:	2e 3f       	cpi	r18, 0xFE	; 254
     2ce:	ec f4       	brge	.+58     	; 0x30a <__vector_5+0xfe>
        {
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     2d0:	40 93 dd 01 	sts	0x01DD, r20
     2d4:	50 93 de 01 	sts	0x01DE, r21
     2d8:	60 93 df 01 	sts	0x01DF, r22
     2dc:	70 93 e0 01 	sts	0x01E0, r23
            g_encoder[i].value--;
     2e0:	20 91 d8 01 	lds	r18, 0x01D8
     2e4:	21 50       	subi	r18, 0x01	; 1
     2e6:	20 93 d8 01 	sts	0x01D8, r18
            g_encoder[i].raw = 0;
     2ea:	10 92 d7 01 	sts	0x01D7, r1
            g_encoder[i].tick = g_timestamp;
     2ee:	80 93 d9 01 	sts	0x01D9, r24
     2f2:	90 93 da 01 	sts	0x01DA, r25
     2f6:	a0 93 db 01 	sts	0x01DB, r26
     2fa:	b0 93 dc 01 	sts	0x01DC, r27
            g_encoder[i].evt_cb(ENC_EVT_LEFT, g_encoder[i].delta_t);
     2fe:	e0 91 e1 01 	lds	r30, 0x01E1
     302:	f0 91 e2 01 	lds	r31, 0x01E2
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	09 95       	icall
        }
    }

}
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	bf 91       	pop	r27
     310:	af 91       	pop	r26
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	7f 91       	pop	r23
     318:	6f 91       	pop	r22
     31a:	5f 91       	pop	r21
     31c:	4f 91       	pop	r20
     31e:	3f 91       	pop	r19
     320:	2f 91       	pop	r18
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
        {
            /* Timeout */
            g_encoder[i].raw = 0;
     334:	10 92 d7 01 	sts	0x01D7, r1
            g_encoder[i].pin_raw = 0;
     338:	10 92 d6 01 	sts	0x01D6, r1
            g_encoder[i].tick = g_timestamp;
     33c:	80 93 d9 01 	sts	0x01D9, r24
     340:	90 93 da 01 	sts	0x01DA, r25
     344:	a0 93 db 01 	sts	0x01DB, r26
     348:	b0 93 dc 01 	sts	0x01DC, r27
     34c:	de cf       	rjmp	.-68     	; 0x30a <__vector_5+0xfe>
        }
        else if (g_encoder[i].raw > 2)
        {
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     34e:	40 93 dd 01 	sts	0x01DD, r20
     352:	50 93 de 01 	sts	0x01DE, r21
     356:	60 93 df 01 	sts	0x01DF, r22
     35a:	70 93 e0 01 	sts	0x01E0, r23
            g_encoder[i].value++;
     35e:	20 91 d8 01 	lds	r18, 0x01D8
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	20 93 d8 01 	sts	0x01D8, r18
            g_encoder[i].raw = 0;
     368:	10 92 d7 01 	sts	0x01D7, r1
            g_encoder[i].tick = g_timestamp;
     36c:	80 93 d9 01 	sts	0x01D9, r24
     370:	90 93 da 01 	sts	0x01DA, r25
     374:	a0 93 db 01 	sts	0x01DB, r26
     378:	b0 93 dc 01 	sts	0x01DC, r27
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
     37c:	e0 91 e1 01 	lds	r30, 0x01E1
     380:	f0 91 e2 01 	lds	r31, 0x01E2
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	09 95       	icall
     388:	c0 cf       	rjmp	.-128    	; 0x30a <__vector_5+0xfe>

0000038a <encoder_event_callback>:
    1, 1, 1, 20, 55, 90, 125, 160, 195, 230, 265, 300, 335, 370, 405, 440, 475,
    510, 545, 580, 615, 650, 685, 720, 755, 790, 825, 860, 895, 930, 965, 1000
};

static void encoder_event_callback(e_enc_event event, uint32_t delta_t)
{
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	a9 e7       	ldi	r26, 0x79	; 121
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	e0 e0       	ldi	r30, 0x00	; 0
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <encoder_event_callback+0x16>
     398:	31 96       	adiw	r30, 0x01	; 1
    uint8_t i;
    uint16_t diff;
    for (i = 0; i < SMOOTHING_SIZE; i++)
     39a:	e0 32       	cpi	r30, 0x20	; 32
     39c:	f1 05       	cpc	r31, r1
     39e:	51 f1       	breq	.+84     	; 0x3f4 <encoder_event_callback+0x6a>
    {
        if (delta_t >= smoothing_deltat[i])
     3a0:	0d 91       	ld	r16, X+
     3a2:	1d 91       	ld	r17, X+
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 17       	cp	r20, r16
     3aa:	51 07       	cpc	r21, r17
     3ac:	62 07       	cpc	r22, r18
     3ae:	73 07       	cpc	r23, r19
     3b0:	98 f3       	brcs	.-26     	; 0x398 <encoder_event_callback+0xe>
        {
            diff = smoothing_result[i];
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e7 5c       	subi	r30, 0xC7	; 199
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	20 81       	ld	r18, Z
     3bc:	31 81       	ldd	r19, Z+1	; 0x01
            if (event == ENC_EVT_LEFT)
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	e1 f0       	breq	.+56     	; 0x3fa <encoder_event_callback+0x70>
            {
                lib_diff(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, diff);
            }
            else if (event == ENC_EVT_RIGHT)
     3c2:	81 11       	cpse	r24, r1
     3c4:	17 c0       	rjmp	.+46     	; 0x3f4 <encoder_event_callback+0x6a>
            {
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
     3c6:	80 91 12 02 	lds	r24, 0x0212
     3ca:	90 91 13 02 	lds	r25, 0x0213
    return output;
}

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
    if (limit < *value)
     3ce:	40 91 18 02 	lds	r20, 0x0218
     3d2:	50 91 19 02 	lds	r21, 0x0219
     3d6:	84 17       	cp	r24, r20
     3d8:	95 07       	cpc	r25, r21
     3da:	e8 f0       	brcs	.+58     	; 0x416 <encoder_event_callback+0x8c>
    {
        *value = limit;
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     3dc:	bc 01       	movw	r22, r24
     3de:	64 1b       	sub	r22, r20
     3e0:	75 0b       	sbc	r23, r21
     3e2:	26 17       	cp	r18, r22
     3e4:	37 07       	cpc	r19, r23
     3e6:	b8 f4       	brcc	.+46     	; 0x416 <encoder_event_callback+0x8c>
     3e8:	24 0f       	add	r18, r20
     3ea:	35 1f       	adc	r19, r21
     3ec:	30 93 19 02 	sts	0x0219, r19
     3f0:	20 93 18 02 	sts	0x0218, r18
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
            }
            break;
        }
    }
}
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	08 95       	ret
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
     3fa:	80 91 18 02 	lds	r24, 0x0218
     3fe:	90 91 19 02 	lds	r25, 0x0219
     402:	28 17       	cp	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	70 f4       	brcc	.+28     	; 0x424 <encoder_event_callback+0x9a>
     408:	82 1b       	sub	r24, r18
     40a:	93 0b       	sbc	r25, r19
     40c:	90 93 19 02 	sts	0x0219, r25
     410:	80 93 18 02 	sts	0x0218, r24
     414:	ef cf       	rjmp	.-34     	; 0x3f4 <encoder_event_callback+0x6a>
        *value = limit;
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
        else                          *value  = limit;
     416:	90 93 19 02 	sts	0x0219, r25
     41a:	80 93 18 02 	sts	0x0218, r24
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
            }
            break;
        }
    }
}
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
    else               *value  = 0;
     424:	10 92 19 02 	sts	0x0219, r1
     428:	10 92 18 02 	sts	0x0218, r1
     42c:	e3 cf       	rjmp	.-58     	; 0x3f4 <encoder_event_callback+0x6a>

0000042e <uart_received>:
/* Definitions */
static void lib_uint16_to_bytes(uint16_t input, uint8_t *lo, uint8_t *hi);
static uint16_t lib_bytes_to_uint16(uint8_t lo, uint8_t hi);

void uart_received(uint8_t byte)
{
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	1f 92       	push	r1
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	89 83       	std	Y+1, r24	; 0x01

    /* Call the state machine with a single byte... */
    remote_buffer_to_datagram(&byte, 1U);
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	ce 01       	movw	r24, r28
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	0e 94 ce 05 	call	0xb9c	; 0xb9c <remote_buffer_to_datagram>

}
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <remote_master_send>:

e_error remote_master_send(t_remote_datagram *datagram, uint8_t *buffer, t_psu_channel *channel)
{
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	fc 01       	movw	r30, r24
     456:	db 01       	movw	r26, r22
     458:	ea 01       	movw	r28, r20

    datagram->len = BUF_SIZE;
     45a:	8a e0       	ldi	r24, 0x0A	; 10
     45c:	85 83       	std	Z+5, r24	; 0x05
    datagram->crc = 0;
     45e:	17 82       	std	Z+7, r1	; 0x07
     460:	16 82       	std	Z+6, r1	; 0x06
    datagram->node_id = channel->remote_node;
     462:	88 81       	ld	r24, Y
     464:	84 83       	std	Z+4, r24	; 0x04
    datagram->magic_start = DGRAM_MAGIC_START;
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	1e ee       	ldi	r17, 0xEE	; 238
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	30 ec       	ldi	r19, 0xC0	; 192
     46e:	00 83       	st	Z, r16
     470:	11 83       	std	Z+1, r17	; 0x01
     472:	22 83       	std	Z+2, r18	; 0x02
     474:	33 83       	std	Z+3, r19	; 0x03
    datagram->magic_end = DGRAM_MAGIC_END;
     476:	0f ee       	ldi	r16, 0xEF	; 239
     478:	1e eb       	ldi	r17, 0xBE	; 190
     47a:	2d ea       	ldi	r18, 0xAD	; 173
     47c:	3e ed       	ldi	r19, 0xDE	; 222
     47e:	00 87       	std	Z+8, r16	; 0x08
     480:	11 87       	std	Z+9, r17	; 0x09
     482:	22 87       	std	Z+10, r18	; 0x0a
     484:	33 87       	std	Z+11, r19	; 0x0b

    /* "Serialize" data (not really, it only works on the same architecture) */

    /* Voltage setpoint for the remote channel */
    lib_uint16_to_bytes(channel->voltage_setpoint.value.raw, &buffer[0], &buffer[1]);
     486:	99 85       	ldd	r25, Y+9	; 0x09
     488:	8a 85       	ldd	r24, Y+10	; 0x0a
    *hi   = (uint8_t)(input >> 16U);
}

static void lib_uint16_to_bytes(uint16_t input, uint8_t *lo, uint8_t *hi)
{
    *lo   = (uint8_t)input;
     48a:	9c 93       	st	X, r25
    *hi = (uint8_t)(input >> 8U);
     48c:	11 96       	adiw	r26, 0x01	; 1
     48e:	8c 93       	st	X, r24
     490:	11 97       	sbiw	r26, 0x01	; 1
    /* "Serialize" data (not really, it only works on the same architecture) */

    /* Voltage setpoint for the remote channel */
    lib_uint16_to_bytes(channel->voltage_setpoint.value.raw, &buffer[0], &buffer[1]);
    /* Current setpoint for the remote channel */
    lib_uint16_to_bytes(channel->current_setpoint.value.raw, &buffer[2], &buffer[3]);
     492:	9b a1       	ldd	r25, Y+35	; 0x23
     494:	8c a1       	ldd	r24, Y+36	; 0x24
    *hi   = (uint8_t)(input >> 16U);
}

static void lib_uint16_to_bytes(uint16_t input, uint8_t *lo, uint8_t *hi)
{
    *lo   = (uint8_t)input;
     496:	12 96       	adiw	r26, 0x02	; 2
     498:	9c 93       	st	X, r25
     49a:	12 97       	sbiw	r26, 0x02	; 2
    *hi = (uint8_t)(input >> 8U);
     49c:	13 96       	adiw	r26, 0x03	; 3
     49e:	8c 93       	st	X, r24
     4a0:	13 97       	sbiw	r26, 0x03	; 3
    lib_uint16_to_bytes(channel->voltage_setpoint.value.raw, &buffer[0], &buffer[1]);
    /* Current setpoint for the remote channel */
    lib_uint16_to_bytes(channel->current_setpoint.value.raw, &buffer[2], &buffer[3]);

    /* Calc the CRC */
    (void)remote_calc_crc_buffer_and_compare(buffer, BUF_SIZE, 0U, &datagram->crc);
     4a2:	9f 01       	movw	r18, r30
     4a4:	2a 5f       	subi	r18, 0xFA	; 250
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	6a e0       	ldi	r22, 0x0A	; 10
     4ae:	cd 01       	movw	r24, r26
     4b0:	0e 94 19 07 	call	0xe32	; 0xe32 <remote_calc_crc_buffer_and_compare>

    return E_OK;
}
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <remote_master_recv>:

e_error remote_master_recv(t_remote_datagram *datagram, uint8_t *buffer, t_psu_channel *channel)
{
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	eb 01       	movw	r28, r22
     4ca:	8a 01       	movw	r16, r20

    bool crc_ok;
    e_error err = E_UNKNOWN;

    crc_ok = remote_calc_crc_buffer_and_compare(buffer, BUF_SIZE, datagram->crc, NULL);
     4cc:	fc 01       	movw	r30, r24
     4ce:	46 81       	ldd	r20, Z+6	; 0x06
     4d0:	57 81       	ldd	r21, Z+7	; 0x07
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	6a e0       	ldi	r22, 0x0A	; 10
     4d8:	ce 01       	movw	r24, r28
     4da:	0e 94 19 07 	call	0xe32	; 0xe32 <remote_calc_crc_buffer_and_compare>

    if (crc_ok == false)
     4de:	81 11       	cpse	r24, r1
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <remote_master_recv+0x2e>
    {
        /* invalid data */
        err = E_CRC;
     4e2:	82 e0       	ldi	r24, 0x02	; 2
        /* Current setpoint for the remote channel */
        channel->current_readout.value.raw = lib_bytes_to_uint16(buffer[2], buffer[3]);
    }

    return err;
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret
}

static uint16_t lib_bytes_to_uint16(uint8_t lo, uint8_t hi)
{
    uint16_t output;
    output  = (uint8_t)lo;
     4ee:	88 81       	ld	r24, Y
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	f8 01       	movw	r30, r16
     4f4:	96 8b       	std	Z+22, r25	; 0x16
     4f6:	85 8b       	std	Z+21, r24	; 0x15
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	90 ab       	std	Z+48, r25	; 0x30
     4fe:	87 a7       	std	Z+47, r24	; 0x2f

e_error remote_master_recv(t_remote_datagram *datagram, uint8_t *buffer, t_psu_channel *channel)
{

    bool crc_ok;
    e_error err = E_UNKNOWN;
     500:	81 e0       	ldi	r24, 0x01	; 1
        /* Current setpoint for the remote channel */
        channel->current_readout.value.raw = lib_bytes_to_uint16(buffer[2], buffer[3]);
    }

    return err;
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	08 95       	ret

0000050c <lib_sum>:
    return output;
}

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
    if (limit < *value)
     50c:	fc 01       	movw	r30, r24
     50e:	20 81       	ld	r18, Z
     510:	31 81       	ldd	r19, Z+1	; 0x01
     512:	62 17       	cp	r22, r18
     514:	73 07       	cpc	r23, r19
     516:	30 f0       	brcs	.+12     	; 0x524 <lib_sum+0x18>
    {
        *value = limit;
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     518:	fb 01       	movw	r30, r22
     51a:	e2 1b       	sub	r30, r18
     51c:	f3 0b       	sbc	r31, r19
     51e:	4e 17       	cp	r20, r30
     520:	5f 07       	cpc	r21, r31
     522:	20 f0       	brcs	.+8      	; 0x52c <lib_sum+0x20>

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
    if (limit < *value)
    {
        *value = limit;
     524:	fc 01       	movw	r30, r24
     526:	71 83       	std	Z+1, r23	; 0x01
     528:	60 83       	st	Z, r22
     52a:	08 95       	ret
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     52c:	24 0f       	add	r18, r20
     52e:	35 1f       	adc	r19, r21
     530:	fc 01       	movw	r30, r24
     532:	31 83       	std	Z+1, r19	; 0x01
     534:	20 83       	st	Z, r18
     536:	08 95       	ret

00000538 <lib_diff>:
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
     538:	fc 01       	movw	r30, r24
     53a:	20 81       	ld	r18, Z
     53c:	31 81       	ldd	r19, Z+1	; 0x01
     53e:	62 17       	cp	r22, r18
     540:	73 07       	cpc	r23, r19
     542:	20 f0       	brcs	.+8      	; 0x54c <lib_diff+0x14>
    else               *value  = 0;
     544:	fc 01       	movw	r30, r24
     546:	11 82       	std	Z+1, r1	; 0x01
     548:	10 82       	st	Z, r1
     54a:	08 95       	ret
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
    if (*value > diff) *value -= diff;
     54c:	26 1b       	sub	r18, r22
     54e:	37 0b       	sbc	r19, r23
     550:	31 83       	std	Z+1, r19	; 0x01
     552:	20 83       	st	Z, r18
     554:	08 95       	ret

00000556 <lib_limit>:
    else               *value  = 0;
}

void lib_limit(t_value *value, t_value_scale *scale)
{
     556:	fc 01       	movw	r30, r24
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	db 01       	movw	r26, r22
     55e:	2d 91       	ld	r18, X+
     560:	3c 91       	ld	r19, X
     562:	82 17       	cp	r24, r18
     564:	93 07       	cpc	r25, r19
     566:	10 f4       	brcc	.+4      	; 0x56c <lib_limit+0x16>
     568:	33 83       	std	Z+3, r19	; 0x03
     56a:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     56c:	db 01       	movw	r26, r22
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	2d 91       	ld	r18, X+
     572:	3c 91       	ld	r19, X
     574:	13 97       	sbiw	r26, 0x03	; 3
     576:	28 17       	cp	r18, r24
     578:	39 07       	cpc	r19, r25
     57a:	10 f4       	brcc	.+4      	; 0x580 <lib_limit+0x2a>
     57c:	33 83       	std	Z+3, r19	; 0x03
     57e:	22 83       	std	Z+2, r18	; 0x02
     580:	08 95       	ret

00000582 <lib_scale>:
}

void lib_scale(t_value *value, t_value_scale *scale)
{
     582:	2f 92       	push	r2
     584:	3f 92       	push	r3
     586:	4f 92       	push	r4
     588:	5f 92       	push	r5
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <lib_scale+0x26>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	3b 01       	movw	r6, r22
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     5b2:	fb 01       	movw	r30, r22
     5b4:	24 80       	ldd	r2, Z+4	; 0x04
     5b6:	35 80       	ldd	r3, Z+5	; 0x05
     5b8:	00 81       	ld	r16, Z
     5ba:	11 81       	ldd	r17, Z+1	; 0x01

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     5bc:	fc 01       	movw	r30, r24
     5be:	60 81       	ld	r22, Z
     5c0:	71 81       	ldd	r23, Z+1	; 0x01
     5c2:	60 1b       	sub	r22, r16
     5c4:	71 0b       	sbc	r23, r17
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     5ce:	6b 01       	movw	r12, r22
     5d0:	7c 01       	movw	r14, r24
}

void lib_scale(t_value *value, t_value_scale *scale)
{
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     5d2:	f3 01       	movw	r30, r6
     5d4:	66 81       	ldd	r22, Z+6	; 0x06
     5d6:	77 81       	ldd	r23, Z+7	; 0x07
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     5e0:	4b 01       	movw	r8, r22
     5e2:	5c 01       	movw	r10, r24
     5e4:	b1 01       	movw	r22, r2
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c5 01       	movw	r24, r10
     5f4:	b4 01       	movw	r22, r8
     5f6:	0e 94 19 08 	call	0x1032	; 0x1032 <__subsf3>
     5fa:	4b 01       	movw	r8, r22
     5fc:	5c 01       	movw	r10, r24
     5fe:	f3 01       	movw	r30, r6
     600:	62 81       	ldd	r22, Z+2	; 0x02
     602:	73 81       	ldd	r23, Z+3	; 0x03
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     60c:	2b 01       	movw	r4, r22
     60e:	3c 01       	movw	r6, r24
     610:	b8 01       	movw	r22, r16
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 12 09 	call	0x1224	; 0x1224 <__floatunsisf>
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
     61e:	c3 01       	movw	r24, r6
     620:	b2 01       	movw	r22, r4
     622:	0e 94 19 08 	call	0x1032	; 0x1032 <__subsf3>
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__divsf3>
     632:	9b 01       	movw	r18, r22
     634:	ac 01       	movw	r20, r24

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 a0 09 	call	0x1340	; 0x1340 <__mulsf3>
     63e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__fixunssfsi>
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     642:	62 0d       	add	r22, r2
     644:	73 1d       	adc	r23, r3
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     646:	e9 81       	ldd	r30, Y+1	; 0x01
     648:	fa 81       	ldd	r31, Y+2	; 0x02
     64a:	73 83       	std	Z+3, r23	; 0x03
     64c:	62 83       	std	Z+2, r22	; 0x02
}
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	9f 90       	pop	r9
     668:	8f 90       	pop	r8
     66a:	7f 90       	pop	r7
     66c:	6f 90       	pop	r6
     66e:	5f 90       	pop	r5
     670:	4f 90       	pop	r4
     672:	3f 90       	pop	r3
     674:	2f 90       	pop	r2
     676:	08 95       	ret

00000678 <main>:
    }
    while ((new == true) && (i < DGRAM_RCV_BUFFER_LEN));
}

int main(void)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	2c 97       	sbiw	r28, 0x0c	; 12
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61

    /* System init */
    system_init();
     68c:	0e 94 65 07 	call	0xeca	; 0xeca <system_init>
}

static void init_io(void)
{

    cli();
     690:	f8 94       	cli

    /* UART */
    uart_init();
     692:	0e 94 a7 07 	call	0xf4e	; 0xf4e <uart_init>
    uart_callback(uart_received);
     696:	87 e1       	ldi	r24, 0x17	; 23
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <uart_callback>
    stdout = &uart_output;
     69e:	8e e0       	ldi	r24, 0x0E	; 14
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	90 93 51 03 	sts	0x0351, r25
     6a6:	80 93 50 03 	sts	0x0350, r24
    stdin  = &uart_input;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	90 93 4f 03 	sts	0x034F, r25
     6b2:	80 93 4e 03 	sts	0x034E, r24

    /* ADC */
    adc_init();
     6b6:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>

    /* PWM */
    pwm_init();
     6ba:	0e 94 bf 04 	call	0x97e	; 0x97e <pwm_init>

    /* System timer */
    timer_init();
     6be:	0e 94 68 07 	call	0xed0	; 0xed0 <timer_init>

    /* Encoder */
    encoder_init();
     6c2:	0e 94 c3 00 	call	0x186	; 0x186 <encoder_init>
    encoder_set_callback(ENC_HW_0, encoder_event_callback);
     6c6:	65 ec       	ldi	r22, 0xC5	; 197
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <encoder_set_callback>

    sei();
     6d0:	78 94       	sei
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->remote_node         = 0U;
     6d2:	10 92 0f 02 	sts	0x020F, r1
            channel->voltage_adc_channel = ADC_0;
     6d6:	10 92 28 02 	sts	0x0228, r1
            channel->current_adc_channel = ADC_1;
     6da:	bb 24       	eor	r11, r11
     6dc:	b3 94       	inc	r11
     6de:	b0 92 42 02 	sts	0x0242, r11
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     6e2:	10 92 29 02 	sts	0x0229, r1
            channel->current_pwm_channel = PWM_CHANNEL_1;
     6e6:	b0 92 43 02 	sts	0x0243, r11
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     6ea:	10 92 1d 02 	sts	0x021D, r1
     6ee:	10 92 1c 02 	sts	0x021C, r1
    channel->voltage_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     6f2:	ee 24       	eor	r14, r14
     6f4:	ea 94       	dec	r14
     6f6:	33 e0       	ldi	r19, 0x03	; 3
     6f8:	f3 2e       	mov	r15, r19
     6fa:	f0 92 1f 02 	sts	0x021F, r15
     6fe:	e0 92 1e 02 	sts	0x021E, r14
    channel->voltage_readout.scale.min_scaled = 0;
     702:	10 92 21 02 	sts	0x0221, r1
     706:	10 92 20 02 	sts	0x0220, r1
    channel->voltage_readout.scale.max_scaled = 28500;    /* Voltage */
     70a:	04 e5       	ldi	r16, 0x54	; 84
     70c:	1f e6       	ldi	r17, 0x6F	; 111
     70e:	10 93 23 02 	sts	0x0223, r17
     712:	00 93 22 02 	sts	0x0222, r16

    channel->current_readout.scale.min = 0;
     716:	10 92 37 02 	sts	0x0237, r1
     71a:	10 92 36 02 	sts	0x0236, r1
    channel->current_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     71e:	f0 92 39 02 	sts	0x0239, r15
     722:	e0 92 38 02 	sts	0x0238, r14
    channel->current_readout.scale.min_scaled = 0;
     726:	10 92 3b 02 	sts	0x023B, r1
     72a:	10 92 3a 02 	sts	0x023A, r1
    channel->current_readout.scale.max_scaled = 2048;     /* Voltage */
     72e:	c1 2c       	mov	r12, r1
     730:	48 e0       	ldi	r20, 0x08	; 8
     732:	d4 2e       	mov	r13, r20
     734:	d0 92 3d 02 	sts	0x023D, r13
     738:	c0 92 3c 02 	sts	0x023C, r12

    channel->voltage_setpoint.scale.min = 0;
     73c:	10 92 11 02 	sts	0x0211, r1
     740:	10 92 10 02 	sts	0x0210, r1
    channel->voltage_setpoint.scale.max = 28500;
     744:	10 93 13 02 	sts	0x0213, r17
     748:	00 93 12 02 	sts	0x0212, r16
    channel->voltage_setpoint.scale.min_scaled = 0;
     74c:	10 92 15 02 	sts	0x0215, r1
     750:	10 92 14 02 	sts	0x0214, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 1b 05 	call	0xa36	; 0xa36 <pwm_get_resolution>
     75a:	90 93 17 02 	sts	0x0217, r25
     75e:	80 93 16 02 	sts	0x0216, r24

    channel->current_setpoint.scale.min = 0;
     762:	10 92 2b 02 	sts	0x022B, r1
     766:	10 92 2a 02 	sts	0x022A, r1
    channel->current_setpoint.scale.max = 28500;
     76a:	10 93 2d 02 	sts	0x022D, r17
     76e:	00 93 2c 02 	sts	0x022C, r16
    channel->current_setpoint.scale.min_scaled = 0;
     772:	10 92 2f 02 	sts	0x022F, r1
     776:	10 92 2e 02 	sts	0x022E, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     77a:	80 91 43 02 	lds	r24, 0x0243
     77e:	0e 94 1b 05 	call	0xa36	; 0xa36 <pwm_get_resolution>
     782:	90 93 31 02 	sts	0x0231, r25
     786:	80 93 30 02 	sts	0x0230, r24
            channel->current_adc_channel = ADC_1;
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
            channel->current_pwm_channel = PWM_CHANNEL_1;
            break;
        case PSU_CHANNEL_1:
            channel->remote_node         = 1U;
     78a:	b0 92 44 02 	sts	0x0244, r11
            channel->voltage_adc_channel = ADC_2;
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	90 93 5d 02 	sts	0x025D, r25
            channel->current_adc_channel = ADC_3;
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	80 93 77 02 	sts	0x0277, r24
            channel->voltage_pwm_channel = PWM_CHANNEL_2;
     79a:	90 93 5e 02 	sts	0x025E, r25
            channel->current_pwm_channel = PWM_CHANNEL_3;
     79e:	80 93 78 02 	sts	0x0278, r24
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     7a2:	10 92 52 02 	sts	0x0252, r1
     7a6:	10 92 51 02 	sts	0x0251, r1
    channel->voltage_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     7aa:	f0 92 54 02 	sts	0x0254, r15
     7ae:	e0 92 53 02 	sts	0x0253, r14
    channel->voltage_readout.scale.min_scaled = 0;
     7b2:	10 92 56 02 	sts	0x0256, r1
     7b6:	10 92 55 02 	sts	0x0255, r1
    channel->voltage_readout.scale.max_scaled = 28500;    /* Voltage */
     7ba:	10 93 58 02 	sts	0x0258, r17
     7be:	00 93 57 02 	sts	0x0257, r16

    channel->current_readout.scale.min = 0;
     7c2:	10 92 6c 02 	sts	0x026C, r1
     7c6:	10 92 6b 02 	sts	0x026B, r1
    channel->current_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     7ca:	f0 92 6e 02 	sts	0x026E, r15
     7ce:	e0 92 6d 02 	sts	0x026D, r14
    channel->current_readout.scale.min_scaled = 0;
     7d2:	10 92 70 02 	sts	0x0270, r1
     7d6:	10 92 6f 02 	sts	0x026F, r1
    channel->current_readout.scale.max_scaled = 2048;     /* Voltage */
     7da:	d0 92 72 02 	sts	0x0272, r13
     7de:	c0 92 71 02 	sts	0x0271, r12

    channel->voltage_setpoint.scale.min = 0;
     7e2:	10 92 46 02 	sts	0x0246, r1
     7e6:	10 92 45 02 	sts	0x0245, r1
    channel->voltage_setpoint.scale.max = 28500;
     7ea:	10 93 48 02 	sts	0x0248, r17
     7ee:	00 93 47 02 	sts	0x0247, r16
    channel->voltage_setpoint.scale.min_scaled = 0;
     7f2:	10 92 4a 02 	sts	0x024A, r1
     7f6:	10 92 49 02 	sts	0x0249, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	0e 94 1b 05 	call	0xa36	; 0xa36 <pwm_get_resolution>
     800:	90 93 4c 02 	sts	0x024C, r25
     804:	80 93 4b 02 	sts	0x024B, r24

    channel->current_setpoint.scale.min = 0;
     808:	10 92 60 02 	sts	0x0260, r1
     80c:	10 92 5f 02 	sts	0x025F, r1
    channel->current_setpoint.scale.max = 28500;
     810:	10 93 62 02 	sts	0x0262, r17
     814:	00 93 61 02 	sts	0x0261, r16
    channel->current_setpoint.scale.min_scaled = 0;
     818:	10 92 64 02 	sts	0x0264, r1
     81c:	10 92 63 02 	sts	0x0263, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     820:	80 91 78 02 	lds	r24, 0x0278
     824:	0e 94 1b 05 	call	0xa36	; 0xa36 <pwm_get_resolution>
     828:	90 93 66 02 	sts	0x0266, r25
     82c:	80 93 65 02 	sts	0x0265, r24

    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/
    printf("\x1B[2J\x1B[H");
     830:	8c e2       	ldi	r24, 0x2C	; 44
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	0e 94 03 0a 	call	0x1406	; 0x1406 <printf>
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     840:	f1 2c       	mov	r15, r1
    {
        new = remote_receive_buffer_get_oldest_copy(&dgram_rcv);
        crc_ok = remote_calc_crc_buffer_and_compare(dgram_rcv.data, dgram_rcv.datagram.len, dgram_rcv.datagram.crc, NULL);
        if ((new == true) && (crc_ok == true))
        {
            printf("%s\r\n", dgram_rcv.data);
     842:	54 e3       	ldi	r21, 0x34	; 52
     844:	c5 2e       	mov	r12, r21
     846:	51 e0       	ldi	r21, 0x01	; 1
     848:	d5 2e       	mov	r13, r21

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == 0U)
     84a:	65 e3       	ldi	r22, 0x35	; 53
     84c:	b6 2e       	mov	r11, r22
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	ff 15       	cp	r31, r15
     852:	38 f1       	brcs	.+78     	; 0x8a2 <main+0x22a>
    {
        if (psu_channels[i].remote_node == 0U)
     854:	bf 9c       	mul	r11, r15
     856:	80 01       	movw	r16, r0
     858:	11 24       	eor	r1, r1
     85a:	01 5f       	subi	r16, 0xF1	; 241
     85c:	1d 4f       	sbci	r17, 0xFD	; 253
     85e:	f8 01       	movw	r30, r16
     860:	80 81       	ld	r24, Z
     862:	81 11       	cpse	r24, r1
     864:	77 c0       	rjmp	.+238    	; 0x954 <__stack+0x55>

static void adc_processing(t_psu_channel *channel)
{

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     866:	81 8d       	ldd	r24, Z+25	; 0x19
     868:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     86c:	f8 01       	movw	r30, r16
     86e:	96 8b       	std	Z+22, r25	; 0x16
     870:	85 8b       	std	Z+21, r24	; 0x15

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     872:	83 a9       	ldd	r24, Z+51	; 0x33
     874:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     878:	f8 01       	movw	r30, r16
     87a:	90 ab       	std	Z+48, r25	; 0x30
     87c:	87 a7       	std	Z+47, r24	; 0x2f
}

static void psu_postprocessing(t_psu_channel *channel)
{
    /* Voltage Scaling */
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     87e:	b8 01       	movw	r22, r16
     880:	63 5f       	subi	r22, 0xF3	; 243
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	c8 01       	movw	r24, r16
     886:	45 96       	adiw	r24, 0x15	; 21
     888:	0e 94 c1 02 	call	0x582	; 0x582 <lib_scale>
    /* Current Scaling */
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     88c:	b8 01       	movw	r22, r16
     88e:	69 5d       	subi	r22, 0xD9	; 217
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	c8 01       	movw	r24, r16
     894:	8f 96       	adiw	r24, 0x2f	; 47
     896:	0e 94 c1 02 	call	0x582	; 0x582 <lib_scale>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     89a:	f3 94       	inc	r15
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	ff 15       	cp	r31, r15
     8a0:	c8 f6       	brcc	.-78     	; 0x854 <main+0x1dc>
     8a2:	0f e0       	ldi	r16, 0x0F	; 15
     8a4:	12 e0       	ldi	r17, 0x02	; 2
     8a6:	22 e3       	ldi	r18, 0x32	; 50
     8a8:	e2 2e       	mov	r14, r18
     8aa:	22 e0       	ldi	r18, 0x02	; 2
     8ac:	f2 2e       	mov	r15, r18
     8ae:	b8 01       	movw	r22, r16
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
}

static void psu_preprocessing(t_psu_channel *channel)
{
    /* Voltage Scaling */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     8b4:	c8 01       	movw	r24, r16
     8b6:	09 96       	adiw	r24, 0x09	; 9
     8b8:	0e 94 c1 02 	call	0x582	; 0x582 <lib_scale>
     8bc:	b8 01       	movw	r22, r16
     8be:	65 5e       	subi	r22, 0xE5	; 229
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
    /* Current Scaling */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     8c2:	c7 01       	movw	r24, r14
     8c4:	0e 94 c1 02 	call	0x582	; 0x582 <lib_scale>
    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        /* Pre-processing (scaling) of the values */
        psu_preprocessing(&psu_channels[i]);

        if (psu_channels[i].remote_node == 0U)
     8c8:	f8 01       	movw	r30, r16
     8ca:	80 81       	ld	r24, Z
     8cc:	81 11       	cpse	r24, r1
     8ce:	39 c0       	rjmp	.+114    	; 0x942 <__stack+0x43>

static void pwm_processing(t_psu_channel *channel)
{

    /* Voltage */
    pwm_set_duty(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     8d0:	63 85       	ldd	r22, Z+11	; 0x0b
     8d2:	74 85       	ldd	r23, Z+12	; 0x0c
     8d4:	f7 01       	movw	r30, r14
     8d6:	39 97       	sbiw	r30, 0x09	; 9
     8d8:	80 81       	ld	r24, Z
     8da:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pwm_set_duty>

    /* Current */
    pwm_set_duty(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     8de:	f7 01       	movw	r30, r14
     8e0:	62 81       	ldd	r22, Z+2	; 0x02
     8e2:	73 81       	ldd	r23, Z+3	; 0x03
     8e4:	f8 01       	movw	r30, r16
     8e6:	84 a9       	ldd	r24, Z+52	; 0x34
     8e8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <pwm_set_duty>
     8ec:	0b 5c       	subi	r16, 0xCB	; 203
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
     8f0:	f5 e3       	ldi	r31, 0x35	; 53
     8f2:	ef 0e       	add	r14, r31
     8f4:	f1 1c       	adc	r15, r1

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	09 37       	cpi	r16, 0x79	; 121
     8fa:	18 07       	cpc	r17, r24
     8fc:	c1 f6       	brne	.-80     	; 0x8ae <main+0x236>
     8fe:	05 e0       	ldi	r16, 0x05	; 5
    bool new;
    bool crc_ok;
    uint8_t i = 0;
    do
    {
        new = remote_receive_buffer_get_oldest_copy(&dgram_rcv);
     900:	83 ee       	ldi	r24, 0xE3	; 227
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 8b 05 	call	0xb16	; 0xb16 <remote_receive_buffer_get_oldest_copy>
     908:	18 2f       	mov	r17, r24
        crc_ok = remote_calc_crc_buffer_and_compare(dgram_rcv.data, dgram_rcv.datagram.len, dgram_rcv.datagram.crc, NULL);
     90a:	40 91 e9 01 	lds	r20, 0x01E9
     90e:	50 91 ea 01 	lds	r21, 0x01EA
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	60 91 e8 01 	lds	r22, 0x01E8
     91a:	8f ee       	ldi	r24, 0xEF	; 239
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 19 07 	call	0xe32	; 0xe32 <remote_calc_crc_buffer_and_compare>
        if ((new == true) && (crc_ok == true))
     922:	11 23       	and	r17, r17
     924:	21 f0       	breq	.+8      	; 0x92e <__stack+0x2f>
     926:	81 11       	cpse	r24, r1
     928:	1d c0       	rjmp	.+58     	; 0x964 <__stack+0x65>
     92a:	01 50       	subi	r16, 0x01	; 1
        {
            printf("%s\r\n", dgram_rcv.data);
        }
        i++;
    }
    while ((new == true) && (i < DGRAM_RCV_BUFFER_LEN));
     92c:	49 f7       	brne	.-46     	; 0x900 <__stack+0x1>
        // TEST ONLY
remote_rcv_parse_datagram();

        uint8_t i = 0;
        uint8_t datagram_metadata[sizeof(t_remote_datagram)];
        remote_datagram_to_buffer(&datagram, datagram_metadata, sizeof(t_remote_datagram));
     92e:	4c e0       	ldi	r20, 0x0C	; 12
     930:	be 01       	movw	r22, r28
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 28 05 	call	0xa50	; 0xa50 <remote_datagram_to_buffer>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     93e:	f1 2c       	mov	r15, r1
        for (i = 0; i < datagram.len; i++)
        {
//            uart_putchar(buffer[i], NULL);
        }

    }
     940:	89 cf       	rjmp	.-238    	; 0x854 <main+0x1dc>
        }
        else
        {
            /* Slave(s)<->Master communication */
            // TODO NOTE THE 0, just for testing :-)
            remote_master_send(&datagram, buffer, &psu_channels[0]);
     942:	4f e0       	ldi	r20, 0x0F	; 15
     944:	52 e0       	ldi	r21, 0x02	; 2
     946:	69 e7       	ldi	r22, 0x79	; 121
     948:	72 e0       	ldi	r23, 0x02	; 2
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	0e 94 26 02 	call	0x44c	; 0x44c <remote_master_send>
     952:	cc cf       	rjmp	.-104    	; 0x8ec <main+0x274>
            adc_processing(&psu_channels[i]);
        }
        else
        {
            /* Slave(s)<->Master communication */
            remote_master_recv(&datagram, buffer, &psu_channels[i]);
     954:	a8 01       	movw	r20, r16
     956:	69 e7       	ldi	r22, 0x79	; 121
     958:	72 e0       	ldi	r23, 0x02	; 2
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <remote_master_recv>
     962:	8d cf       	rjmp	.-230    	; 0x87e <main+0x206>
    {
        new = remote_receive_buffer_get_oldest_copy(&dgram_rcv);
        crc_ok = remote_calc_crc_buffer_and_compare(dgram_rcv.data, dgram_rcv.datagram.len, dgram_rcv.datagram.crc, NULL);
        if ((new == true) && (crc_ok == true))
        {
            printf("%s\r\n", dgram_rcv.data);
     964:	8f ee       	ldi	r24, 0xEF	; 239
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	df 92       	push	r13
     96e:	cf 92       	push	r12
     970:	0e 94 03 0a 	call	0x1406	; 0x1406 <printf>
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	d6 cf       	rjmp	.-84     	; 0x92a <__stack+0x2b>

0000097e <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     97e:	e3 e8       	ldi	r30, 0x83	; 131
     980:	f2 e0       	ldi	r31, 0x02	; 2

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     982:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Reset values, just in case */
        pwm_channels[i].duty = 0;
     984:	14 82       	std	Z+4, r1	; 0x04
     986:	13 82       	std	Z+3, r1	; 0x03
        pwm_channels[i].resolution = 0;
     988:	12 82       	std	Z+2, r1	; 0x02
     98a:	11 82       	std	Z+1, r1	; 0x01
        pwm_channels[i].channel = i;
     98c:	80 83       	st	Z, r24
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	35 96       	adiw	r30, 0x05	; 5
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	b9 f7       	brne	.-18     	; 0x984 <pwm_init+0x6>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1));
     996:	82 ea       	ldi	r24, 0xA2	; 162
     998:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = ((PWM_MODE << 3) | (1 << WGM13) | (1 << CS10));
     99c:	89 e1       	ldi	r24, 0x19	; 25
     99e:	80 93 81 00 	sts	0x0081, r24
    ICR1H = (PWM_FREQ >> 8);
     9a2:	83 e0       	ldi	r24, 0x03	; 3
     9a4:	80 93 87 00 	sts	0x0087, r24
    ICR1L = (PWM_FREQ & 0xff);
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	80 93 86 00 	sts	0x0086, r24

    pwm_channels[PWM_CHANNEL_0].resolution = PWM_FREQ;
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	90 93 85 02 	sts	0x0285, r25
     9b6:	80 93 84 02 	sts	0x0284, r24
    pwm_channels[PWM_CHANNEL_1].resolution = PWM_FREQ;
     9ba:	90 93 8a 02 	sts	0x028A, r25
     9be:	80 93 89 02 	sts	0x0289, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     9c2:	81 ea       	ldi	r24, 0xA1	; 161
     9c4:	80 93 b0 00 	sts	0x00B0, r24
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 b1 00 	sts	0x00B1, r24

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     9ce:	84 b1       	in	r24, 0x04	; 4
     9d0:	8e 60       	ori	r24, 0x0E	; 14
     9d2:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIN3);
     9d4:	53 9a       	sbi	0x0a, 3	; 10

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 8f 02 	sts	0x028F, r25
     9de:	80 93 8e 02 	sts	0x028E, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     9e2:	90 93 94 02 	sts	0x0294, r25
     9e6:	80 93 93 02 	sts	0x0293, r24
     9ea:	08 95       	ret

000009ec <pwm_set_duty>:
}

void pwm_set_duty(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	e2 0f       	add	r30, r18
     9fc:	f3 1f       	adc	r31, r19
     9fe:	ed 57       	subi	r30, 0x7D	; 125
     a00:	fd 4f       	sbci	r31, 0xFD	; 253
     a02:	63 83       	std	Z+3, r22	; 0x03
     a04:	74 83       	std	Z+4, r23	; 0x04

    switch(pwm_channel)
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	89 f0       	breq	.+34     	; 0xa2c <pwm_set_duty+0x40>
     a0a:	58 f0       	brcs	.+22     	; 0xa22 <pwm_set_duty+0x36>
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	19 f0       	breq	.+6      	; 0xa16 <pwm_set_duty+0x2a>
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	21 f0       	breq	.+8      	; 0xa1c <pwm_set_duty+0x30>
     a14:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
        OCR1BL = duty;
        break;
    case PWM_CHANNEL_2:
        OCR2A = duty;
     a16:	60 93 b3 00 	sts	0x00B3, r22
        break;
     a1a:	08 95       	ret
    case PWM_CHANNEL_3:
        OCR2B = duty;
     a1c:	60 93 b4 00 	sts	0x00B4, r22
     a20:	08 95       	ret
    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     a22:	70 93 89 00 	sts	0x0089, r23
        OCR1AL = duty;
     a26:	60 93 88 00 	sts	0x0088, r22
        break;
     a2a:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     a2c:	70 93 8b 00 	sts	0x008B, r23
        OCR1BL = duty;
     a30:	60 93 8a 00 	sts	0x008A, r22
        break;
     a34:	08 95       	ret

00000a36 <pwm_get_resolution>:
    }
}

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
    return pwm_channels[channel].resolution;
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	fc 01       	movw	r30, r24
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e8 0f       	add	r30, r24
     a44:	f9 1f       	adc	r31, r25
     a46:	ed 57       	subi	r30, 0x7D	; 125
     a48:	fd 4f       	sbci	r31, 0xFD	; 253
}
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	92 81       	ldd	r25, Z+2	; 0x02
     a4e:	08 95       	ret

00000a50 <remote_datagram_to_buffer>:
#include <string.h>

static t_remote_datagram_buffer remote_rcv_buf[DGRAM_RCV_BUFFER_LEN];

e_error remote_datagram_to_buffer(t_remote_datagram *datagram, uint8_t *buffer, uint8_t size)
{
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <remote_datagram_to_buffer+0x6>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	7a 83       	std	Y+2, r23	; 0x02
     a5c:	69 83       	std	Y+1, r22	; 0x01
    if (size >= sizeof(t_remote_datagram))
     a5e:	4c 30       	cpi	r20, 0x0C	; 12
     a60:	30 f4       	brcc	.+12     	; 0xa6e <remote_datagram_to_buffer+0x1e>
        return E_OK;
    }
    else
    {
        /* refuse to overflow ! */
        return E_OVERFLOW;
     a62:	83 e0       	ldi	r24, 0x03	; 3
    }
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret
e_error remote_datagram_to_buffer(t_remote_datagram *datagram, uint8_t *buffer, uint8_t size)
{
    if (size >= sizeof(t_remote_datagram))
    {
        /* enough large buffer */
        memcpy(&datagram[0], &buffer, sizeof(t_remote_datagram));
     a6e:	2c e0       	ldi	r18, 0x0C	; 12
     a70:	fe 01       	movw	r30, r28
     a72:	31 96       	adiw	r30, 0x01	; 1
     a74:	dc 01       	movw	r26, r24
     a76:	01 90       	ld	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	2a 95       	dec	r18
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <remote_datagram_to_buffer+0x26>
        return E_OK;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        /* refuse to overflow ! */
        return E_OVERFLOW;
    }
}
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <remote_receive_buffer_alloc>:

void remote_receive_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
     a8a:	dc 01       	movw	r26, r24
    uint8_t i;
    *datagram_buf = NULL;
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	1c 92       	st	X, r1
     a90:	1e 92       	st	-X, r1
     a92:	e8 ea       	ldi	r30, 0xA8	; 168
     a94:	f2 e0       	ldi	r31, 0x02	; 2
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
    {
        if (remote_rcv_buf[i].timestamp == 0U)
     a96:	44 8d       	ldd	r20, Z+28	; 0x1c
     a98:	55 8d       	ldd	r21, Z+29	; 0x1d
     a9a:	66 8d       	ldd	r22, Z+30	; 0x1e
     a9c:	77 8d       	ldd	r23, Z+31	; 0x1f
     a9e:	45 2b       	or	r20, r21
     aa0:	46 2b       	or	r20, r22
     aa2:	47 2b       	or	r20, r23
     aa4:	19 f4       	brne	.+6      	; 0xaac <remote_receive_buffer_alloc+0x22>
        {
            *datagram_buf = &(remote_rcv_buf[i]);
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	fc 93       	st	X, r31
     aaa:	ee 93       	st	-X, r30
     aac:	b0 96       	adiw	r30, 0x20	; 32

void remote_receive_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	e8 34       	cpi	r30, 0x48	; 72
     ab2:	f8 07       	cpc	r31, r24
     ab4:	81 f7       	brne	.-32     	; 0xa96 <remote_receive_buffer_alloc+0xc>
        if (remote_rcv_buf[i].timestamp == 0U)
        {
            *datagram_buf = &(remote_rcv_buf[i]);
        }
    }
}
     ab6:	08 95       	ret

00000ab8 <remote_receive_buffer_get_oldest>:

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
     abc:	fc 01       	movw	r30, r24
     abe:	11 82       	std	Z+1, r1	; 0x01
     ac0:	10 82       	st	Z, r1
     ac2:	e4 ec       	ldi	r30, 0xC4	; 196
     ac4:	f2 e0       	ldi	r31, 0x02	; 2

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
     ac6:	0f ef       	ldi	r16, 0xFF	; 255
     ac8:	1f ef       	ldi	r17, 0xFF	; 255
     aca:	98 01       	movw	r18, r16
}

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
     acc:	bf ef       	ldi	r27, 0xFF	; 255
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     ace:	a0 e0       	ldi	r26, 0x00	; 0
    {
        if ((remote_rcv_buf[i].timestamp > 0U) && (remote_rcv_buf[i].timestamp < oldest))
     ad0:	40 81       	ld	r20, Z
     ad2:	51 81       	ldd	r21, Z+1	; 0x01
     ad4:	62 81       	ldd	r22, Z+2	; 0x02
     ad6:	73 81       	ldd	r23, Z+3	; 0x03
     ad8:	41 15       	cp	r20, r1
     ada:	51 05       	cpc	r21, r1
     adc:	61 05       	cpc	r22, r1
     ade:	71 05       	cpc	r23, r1
     ae0:	41 f0       	breq	.+16     	; 0xaf2 <remote_receive_buffer_get_oldest+0x3a>
     ae2:	40 17       	cp	r20, r16
     ae4:	51 07       	cpc	r21, r17
     ae6:	62 07       	cpc	r22, r18
     ae8:	73 07       	cpc	r23, r19
     aea:	18 f4       	brcc	.+6      	; 0xaf2 <remote_receive_buffer_get_oldest+0x3a>
     aec:	8a 01       	movw	r16, r20
     aee:	9b 01       	movw	r18, r22
     af0:	ba 2f       	mov	r27, r26
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     af2:	af 5f       	subi	r26, 0xFF	; 255
     af4:	b0 96       	adiw	r30, 0x20	; 32
     af6:	a5 30       	cpi	r26, 0x05	; 5
     af8:	59 f7       	brne	.-42     	; 0xad0 <remote_receive_buffer_get_oldest+0x18>
            id = i;
            oldest = remote_rcv_buf[i].timestamp;
        }
    }

    if (id != 0xFF) *datagram_buf = &(remote_rcv_buf[id]);
     afa:	bf 3f       	cpi	r27, 0xFF	; 255
     afc:	49 f0       	breq	.+18     	; 0xb10 <remote_receive_buffer_get_oldest+0x58>
     afe:	f0 e2       	ldi	r31, 0x20	; 32
     b00:	bf 9f       	mul	r27, r31
     b02:	90 01       	movw	r18, r0
     b04:	11 24       	eor	r1, r1
     b06:	28 55       	subi	r18, 0x58	; 88
     b08:	3d 4f       	sbci	r19, 0xFD	; 253
     b0a:	fc 01       	movw	r30, r24
     b0c:	31 83       	std	Z+1, r19	; 0x01
     b0e:	20 83       	st	Z, r18
}
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <remote_receive_buffer_get_oldest_copy>:

bool remote_receive_buffer_get_oldest_copy(t_remote_datagram_buffer *datagram)
{
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	e4 ec       	ldi	r30, 0xC4	; 196
     b20:	f2 e0       	ldi	r31, 0x02	; 2
}

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
     b22:	cf ef       	ldi	r28, 0xFF	; 255
    uint32_t oldest = 0xFFFFFFFFU;
     b24:	0f ef       	ldi	r16, 0xFF	; 255
     b26:	1f ef       	ldi	r17, 0xFF	; 255
     b28:	98 01       	movw	r18, r16
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
    {
        if ((remote_rcv_buf[i].timestamp > 0U) && (remote_rcv_buf[i].timestamp < oldest))
     b2c:	40 81       	ld	r20, Z
     b2e:	51 81       	ldd	r21, Z+1	; 0x01
     b30:	62 81       	ldd	r22, Z+2	; 0x02
     b32:	73 81       	ldd	r23, Z+3	; 0x03
     b34:	41 15       	cp	r20, r1
     b36:	51 05       	cpc	r21, r1
     b38:	61 05       	cpc	r22, r1
     b3a:	71 05       	cpc	r23, r1
     b3c:	41 f0       	breq	.+16     	; 0xb4e <remote_receive_buffer_get_oldest_copy+0x38>
     b3e:	40 17       	cp	r20, r16
     b40:	51 07       	cpc	r21, r17
     b42:	62 07       	cpc	r22, r18
     b44:	73 07       	cpc	r23, r19
     b46:	18 f4       	brcc	.+6      	; 0xb4e <remote_receive_buffer_get_oldest_copy+0x38>
     b48:	8a 01       	movw	r16, r20
     b4a:	9b 01       	movw	r18, r22
     b4c:	ca 2f       	mov	r28, r26
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     b4e:	af 5f       	subi	r26, 0xFF	; 255
     b50:	b0 96       	adiw	r30, 0x20	; 32
     b52:	a5 30       	cpi	r26, 0x05	; 5
     b54:	59 f7       	brne	.-42     	; 0xb2c <remote_receive_buffer_get_oldest_copy+0x16>
            id = i;
            oldest = remote_rcv_buf[i].timestamp;
        }
    }

    if (id != 0xFF) *datagram_buf = &(remote_rcv_buf[id]);
     b56:	cf 3f       	cpi	r28, 0xFF	; 255
     b58:	d9 f0       	breq	.+54     	; 0xb90 <remote_receive_buffer_get_oldest_copy+0x7a>
     b5a:	20 e2       	ldi	r18, 0x20	; 32
     b5c:	c2 9f       	mul	r28, r18
     b5e:	e0 01       	movw	r28, r0
     b60:	11 24       	eor	r1, r1
     b62:	c8 55       	subi	r28, 0x58	; 88
     b64:	dd 4f       	sbci	r29, 0xFD	; 253
bool remote_receive_buffer_get_oldest_copy(t_remote_datagram_buffer *datagram)
{
    t_remote_datagram_buffer *buf = NULL;
    remote_receive_buffer_get_oldest(&buf);

    if (buf != NULL && datagram != NULL)
     b66:	20 97       	sbiw	r28, 0x00	; 0
     b68:	99 f0       	breq	.+38     	; 0xb90 <remote_receive_buffer_get_oldest_copy+0x7a>
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	89 f0       	breq	.+34     	; 0xb90 <remote_receive_buffer_get_oldest_copy+0x7a>
    {
        /* get a copy */
        (void)memcpy(datagram, buf, sizeof(t_remote_datagram_buffer));
     b6e:	20 e2       	ldi	r18, 0x20	; 32
     b70:	fe 01       	movw	r30, r28
     b72:	dc 01       	movw	r26, r24
     b74:	01 90       	ld	r0, Z+
     b76:	0d 92       	st	X+, r0
     b78:	2a 95       	dec	r18
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <remote_receive_buffer_get_oldest_copy+0x5e>
        /* immediately reset timestamp
         * CAUTION: critical section! */
        buf->timestamp = 0U;
     b7c:	1c 8e       	std	Y+28, r1	; 0x1c
     b7e:	1d 8e       	std	Y+29, r1	; 0x1d
     b80:	1e 8e       	std	Y+30, r1	; 0x1e
     b82:	1f 8e       	std	Y+31, r1	; 0x1f
        return true;
     b84:	81 e0       	ldi	r24, 0x01	; 1
    }
    else
    {
        return false;
    }
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret
        buf->timestamp = 0U;
        return true;
    }
    else
    {
        return false;
     b90:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <remote_buffer_to_datagram>:

e_error remote_buffer_to_datagram(uint8_t *input, uint8_t size)
{
     b9c:	3f 92       	push	r3
     b9e:	4f 92       	push	r4
     ba0:	5f 92       	push	r5
     ba2:	6f 92       	push	r6
     ba4:	7f 92       	push	r7
     ba6:	8f 92       	push	r8
     ba8:	9f 92       	push	r9
     baa:	af 92       	push	r10
     bac:	bf 92       	push	r11
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	b6 2e       	mov	r11, r22
    static uint8_t buf_index = 0;
    static t_remote_datagram_buffer *datagram_buf;
    uint8_t i = 0;
    e_error err = E_OK;

    for (i = 0; i < size; i++)
     bc0:	66 23       	and	r22, r22
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <remote_buffer_to_datagram+0x2a>
     bc4:	32 c1       	rjmp	.+612    	; 0xe2a <remote_buffer_to_datagram+0x28e>
     bc6:	40 91 4a 03 	lds	r20, 0x034A
     bca:	50 91 4b 03 	lds	r21, 0x034B
     bce:	60 91 4c 03 	lds	r22, 0x034C
     bd2:	70 91 4d 03 	lds	r23, 0x034D
     bd6:	a8 2e       	mov	r10, r24
     bd8:	fc 01       	movw	r30, r24
    static uint8_t buf[DATAGRAM_HEADER_SIZE];
    static uint32_t temp;
    static uint8_t buf_index = 0;
    static t_remote_datagram_buffer *datagram_buf;
    uint8_t i = 0;
    e_error err = E_OK;
     bda:	80 e0       	ldi	r24, 0x00	; 0

        if (state != state_prev)
        {
            temp = 0;
            buf_index = 0;
            timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     bdc:	8a 01       	movw	r16, r20
     bde:	9b 01       	movw	r18, r22
     be0:	00 5c       	subi	r16, 0xC0	; 192
     be2:	1d 4b       	sbci	r17, 0xBD	; 189
     be4:	20 4f       	sbci	r18, 0xF0	; 240
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
            {
                /* raw copy the received data. Cannot overflow due to
                 * the above macro which exactly calculates field size */
                (void)memcpy(&(DATAGRAM_HEADER_START(datagram_buf->datagram)), buf, DATAGRAM_HEADER_SIZE);
                /* header completely received */
                state = DGRAM_RCV_MAGIC_END;
     be8:	c2 e0       	ldi	r28, 0x02	; 2
     bea:	3c 2e       	mov	r3, r28
                    state = DGRAM_RCV_HEADER;
                }
                else
                {
                    /* Overflow! */
                    err = E_OVERFLOW;
     bec:	d3 e0       	ldi	r29, 0x03	; 3
     bee:	9d 2e       	mov	r9, r29
                /* new datagram is incoming: allocate a buffer slot, if possible */
                remote_receive_buffer_alloc(&datagram_buf);
                if (datagram_buf != NULL)
                {
                    /* copy the magic number */
                    datagram_buf->datagram.magic_start = temp;
     bf0:	c1 2c       	mov	r12, r1
     bf2:	9e ee       	ldi	r25, 0xEE	; 238
     bf4:	d9 2e       	mov	r13, r25
     bf6:	ee 24       	eor	r14, r14
     bf8:	ea 94       	dec	r14
     bfa:	90 ec       	ldi	r25, 0xC0	; 192
     bfc:	f9 2e       	mov	r15, r25
                    /* alright, datagram header synchronized! */
                    state = DGRAM_RCV_HEADER;
     bfe:	88 24       	eor	r8, r8
     c00:	83 94       	inc	r8
     c02:	37 c0       	rjmp	.+110    	; 0xc72 <remote_buffer_to_datagram+0xd6>
     c04:	a0 91 a3 02 	lds	r26, 0x02A3
            state = DGRAM_RCV_MAGIC_START;
            state_prev = DGRAM_RCV_MAGIC_END;   /* force state change to reuse code */
            err = E_TIMEOUT;
        }

        if (state != state_prev)
     c08:	b0 91 a2 02 	lds	r27, 0x02A2
     c0c:	ba 13       	cpse	r27, r26
     c0e:	43 c0       	rjmp	.+134    	; 0xc96 <remote_buffer_to_datagram+0xfa>
            buf_index = 0;
            timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
            state_prev = state;
        }

        switch(state)
     c10:	a1 30       	cpi	r26, 0x01	; 1
     c12:	09 f4       	brne	.+2      	; 0xc16 <remote_buffer_to_datagram+0x7a>
     c14:	57 c0       	rjmp	.+174    	; 0xcc4 <remote_buffer_to_datagram+0x128>
     c16:	a1 30       	cpi	r26, 0x01	; 1
     c18:	08 f4       	brcc	.+2      	; 0xc1c <remote_buffer_to_datagram+0x80>
     c1a:	b1 c0       	rjmp	.+354    	; 0xd7e <remote_buffer_to_datagram+0x1e2>
     c1c:	a2 30       	cpi	r26, 0x02	; 2
     c1e:	09 f4       	brne	.+2      	; 0xc22 <remote_buffer_to_datagram+0x86>
     c20:	8d c0       	rjmp	.+282    	; 0xd3c <remote_buffer_to_datagram+0x1a0>
     c22:	a3 30       	cpi	r26, 0x03	; 3
     c24:	01 f5       	brne	.+64     	; 0xc66 <remote_buffer_to_datagram+0xca>
            }

            break;
        case DGRAM_RCV_DATA:

            datagram_buf->data[buf_index] = input[i];
     c26:	a0 91 9b 02 	lds	r26, 0x029B
     c2a:	b0 91 9c 02 	lds	r27, 0x029C
     c2e:	70 90 9d 02 	lds	r7, 0x029D
     c32:	60 80       	ld	r6, Z
     c34:	ed 01       	movw	r28, r26
     c36:	c7 0d       	add	r28, r7
     c38:	d1 1d       	adc	r29, r1
     c3a:	6c 86       	std	Y+12, r6	; 0x0c
            buf_index++;
     c3c:	c1 e0       	ldi	r28, 0x01	; 1
     c3e:	c7 0d       	add	r28, r7
     c40:	c0 93 9d 02 	sts	0x029D, r28
            if ((buf_index >= datagram_buf->datagram.len) || (buf_index >= DGRAM_RCV_DATA_MAX))
     c44:	15 96       	adiw	r26, 0x05	; 5
     c46:	dc 91       	ld	r29, X
     c48:	15 97       	sbiw	r26, 0x05	; 5
     c4a:	cd 17       	cp	r28, r29
     c4c:	10 f4       	brcc	.+4      	; 0xc52 <remote_buffer_to_datagram+0xb6>
     c4e:	c0 31       	cpi	r28, 0x10	; 16
     c50:	50 f0       	brcs	.+20     	; 0xc66 <remote_buffer_to_datagram+0xca>
            {
                /* data transfer completed */
                state = DGRAM_RCV_MAGIC_START;
     c52:	10 92 a3 02 	sts	0x02A3, r1
                /* set timestamp to indicate buffer slot not free and to give an order */
                datagram_buf->timestamp = g_timestamp;
     c56:	5c 96       	adiw	r26, 0x1c	; 28
     c58:	4d 93       	st	X+, r20
     c5a:	5d 93       	st	X+, r21
     c5c:	6d 93       	st	X+, r22
     c5e:	7c 93       	st	X, r23
     c60:	5f 97       	sbiw	r26, 0x1f	; 31
/*                printf("*%d %d\n", buf_index, datagram_buf->datagram.len);    */
                buf_index = 0;
     c62:	10 92 9d 02 	sts	0x029D, r1
     c66:	31 96       	adiw	r30, 0x01	; 1
     c68:	ae 2f       	mov	r26, r30
     c6a:	aa 19       	sub	r26, r10
    static uint8_t buf_index = 0;
    static t_remote_datagram_buffer *datagram_buf;
    uint8_t i = 0;
    e_error err = E_OK;

    for (i = 0; i < size; i++)
     c6c:	ab 15       	cp	r26, r11
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <remote_buffer_to_datagram+0xd6>
     c70:	53 c0       	rjmp	.+166    	; 0xd18 <remote_buffer_to_datagram+0x17c>
    {

        /* Run the state machine for each received byte */
        if (g_timestamp > timeout)
     c72:	40 90 a4 02 	lds	r4, 0x02A4
     c76:	50 90 a5 02 	lds	r5, 0x02A5
     c7a:	60 90 a6 02 	lds	r6, 0x02A6
     c7e:	70 90 a7 02 	lds	r7, 0x02A7
     c82:	44 16       	cp	r4, r20
     c84:	55 06       	cpc	r5, r21
     c86:	66 06       	cpc	r6, r22
     c88:	77 06       	cpc	r7, r23
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <remote_buffer_to_datagram+0xf2>
     c8c:	bb cf       	rjmp	.-138    	; 0xc04 <remote_buffer_to_datagram+0x68>
        {
            /* timed out - restart the state machine */
            state = DGRAM_RCV_MAGIC_START;
     c8e:	10 92 a3 02 	sts	0x02A3, r1
     c92:	a0 e0       	ldi	r26, 0x00	; 0
            state_prev = DGRAM_RCV_MAGIC_END;   /* force state change to reuse code */
            err = E_TIMEOUT;
     c94:	84 e0       	ldi	r24, 0x04	; 4
        }

        if (state != state_prev)
        {
            temp = 0;
     c96:	10 92 9e 02 	sts	0x029E, r1
     c9a:	10 92 9f 02 	sts	0x029F, r1
     c9e:	10 92 a0 02 	sts	0x02A0, r1
     ca2:	10 92 a1 02 	sts	0x02A1, r1
            buf_index = 0;
     ca6:	10 92 9d 02 	sts	0x029D, r1
            timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     caa:	00 93 a4 02 	sts	0x02A4, r16
     cae:	10 93 a5 02 	sts	0x02A5, r17
     cb2:	20 93 a6 02 	sts	0x02A6, r18
     cb6:	30 93 a7 02 	sts	0x02A7, r19
            state_prev = state;
     cba:	a0 93 a2 02 	sts	0x02A2, r26
        }

        switch(state)
     cbe:	a1 30       	cpi	r26, 0x01	; 1
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <remote_buffer_to_datagram+0x128>
     cc2:	a9 cf       	rjmp	.-174    	; 0xc16 <remote_buffer_to_datagram+0x7a>

            break;
        case DGRAM_RCV_HEADER:

            /* State transition happens, so this is safe */
            buf[buf_index] = input[i];
     cc4:	c0 91 9d 02 	lds	r28, 0x029D
     cc8:	ac 2f       	mov	r26, r28
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	a9 56       	subi	r26, 0x69	; 105
     cce:	bd 4f       	sbci	r27, 0xFD	; 253
     cd0:	d0 81       	ld	r29, Z
     cd2:	dc 93       	st	X, r29
            buf_index++;
     cd4:	a1 e0       	ldi	r26, 0x01	; 1
     cd6:	ac 0f       	add	r26, r28
     cd8:	a0 93 9d 02 	sts	0x029D, r26

            if (buf_index >= DATAGRAM_HEADER_SIZE)
     cdc:	a4 30       	cpi	r26, 0x04	; 4
     cde:	18 f2       	brcs	.-122    	; 0xc66 <remote_buffer_to_datagram+0xca>
            {
                /* raw copy the received data. Cannot overflow due to
                 * the above macro which exactly calculates field size */
                (void)memcpy(&(DATAGRAM_HEADER_START(datagram_buf->datagram)), buf, DATAGRAM_HEADER_SIZE);
     ce0:	a0 91 9b 02 	lds	r26, 0x029B
     ce4:	b0 91 9c 02 	lds	r27, 0x029C
     ce8:	40 90 97 02 	lds	r4, 0x0297
     cec:	50 90 98 02 	lds	r5, 0x0298
     cf0:	60 90 99 02 	lds	r6, 0x0299
     cf4:	70 90 9a 02 	lds	r7, 0x029A
     cf8:	14 96       	adiw	r26, 0x04	; 4
     cfa:	4d 92       	st	X+, r4
     cfc:	5d 92       	st	X+, r5
     cfe:	6d 92       	st	X+, r6
     d00:	7c 92       	st	X, r7
     d02:	17 97       	sbiw	r26, 0x07	; 7
                /* header completely received */
                state = DGRAM_RCV_MAGIC_END;
     d04:	30 92 a3 02 	sts	0x02A3, r3
                buf_index = 0;
     d08:	10 92 9d 02 	sts	0x029D, r1
     d0c:	31 96       	adiw	r30, 0x01	; 1
     d0e:	ae 2f       	mov	r26, r30
     d10:	aa 19       	sub	r26, r10
    static uint8_t buf_index = 0;
    static t_remote_datagram_buffer *datagram_buf;
    uint8_t i = 0;
    e_error err = E_OK;

    for (i = 0; i < size; i++)
     d12:	ab 15       	cp	r26, r11
     d14:	08 f4       	brcc	.+2      	; 0xd18 <remote_buffer_to_datagram+0x17c>
     d16:	ad cf       	rjmp	.-166    	; 0xc72 <remote_buffer_to_datagram+0xd6>

    }

    return err;

}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	9f 90       	pop	r9
     d2e:	8f 90       	pop	r8
     d30:	7f 90       	pop	r7
     d32:	6f 90       	pop	r6
     d34:	5f 90       	pop	r5
     d36:	4f 90       	pop	r4
     d38:	3f 90       	pop	r3
     d3a:	08 95       	ret
            break;
        case DGRAM_RCV_MAGIC_END:
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            temp |= input[i];
     d3c:	80 81       	ld	r24, Z

            break;
        case DGRAM_RCV_MAGIC_END:
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
     d3e:	40 90 9e 02 	lds	r4, 0x029E
     d42:	50 90 9f 02 	lds	r5, 0x029F
     d46:	60 90 a0 02 	lds	r6, 0x02A0
     d4a:	70 90 a1 02 	lds	r7, 0x02A1
     d4e:	76 2c       	mov	r7, r6
     d50:	65 2c       	mov	r6, r5
     d52:	54 2c       	mov	r5, r4
     d54:	44 24       	eor	r4, r4
            temp |= input[i];
     d56:	48 2a       	or	r4, r24
     d58:	40 92 9e 02 	sts	0x029E, r4
     d5c:	50 92 9f 02 	sts	0x029F, r5
     d60:	60 92 a0 02 	sts	0x02A0, r6
     d64:	70 92 a1 02 	sts	0x02A1, r7

            err = E_OK;

            if (temp == DGRAM_MAGIC_END)
     d68:	af ee       	ldi	r26, 0xEF	; 239
     d6a:	4a 16       	cp	r4, r26
     d6c:	ae eb       	ldi	r26, 0xBE	; 190
     d6e:	5a 06       	cpc	r5, r26
     d70:	ad ea       	ldi	r26, 0xAD	; 173
     d72:	6a 06       	cpc	r6, r26
     d74:	ae ed       	ldi	r26, 0xDE	; 222
     d76:	7a 06       	cpc	r7, r26
     d78:	49 f1       	breq	.+82     	; 0xdcc <remote_buffer_to_datagram+0x230>
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            temp |= input[i];

            err = E_OK;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	74 cf       	rjmp	.-280    	; 0xc66 <remote_buffer_to_datagram+0xca>
        {
        case DGRAM_RCV_MAGIC_START:
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            temp |= input[i];
     d7e:	a0 81       	ld	r26, Z
        switch(state)
        {
        case DGRAM_RCV_MAGIC_START:
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
     d80:	40 90 9e 02 	lds	r4, 0x029E
     d84:	50 90 9f 02 	lds	r5, 0x029F
     d88:	60 90 a0 02 	lds	r6, 0x02A0
     d8c:	70 90 a1 02 	lds	r7, 0x02A1
     d90:	76 2c       	mov	r7, r6
     d92:	65 2c       	mov	r6, r5
     d94:	54 2c       	mov	r5, r4
     d96:	44 24       	eor	r4, r4
            temp |= input[i];
     d98:	4a 2a       	or	r4, r26
     d9a:	40 92 9e 02 	sts	0x029E, r4
     d9e:	50 92 9f 02 	sts	0x029F, r5
     da2:	60 92 a0 02 	sts	0x02A0, r6
     da6:	70 92 a1 02 	sts	0x02A1, r7

            if (temp == DGRAM_MAGIC_START)
     daa:	41 14       	cp	r4, r1
     dac:	9e ee       	ldi	r25, 0xEE	; 238
     dae:	59 06       	cpc	r5, r25
     db0:	9f ef       	ldi	r25, 0xFF	; 255
     db2:	69 06       	cpc	r6, r25
     db4:	90 ec       	ldi	r25, 0xC0	; 192
     db6:	79 06       	cpc	r7, r25
     db8:	b9 f0       	breq	.+46     	; 0xde8 <remote_buffer_to_datagram+0x24c>
                /* Invalid magic or out of sync */
                /* Stay listening for the magic sequence */
            }

            /* Never timeout in this state */
            timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     dba:	00 93 a4 02 	sts	0x02A4, r16
     dbe:	10 93 a5 02 	sts	0x02A5, r17
     dc2:	20 93 a6 02 	sts	0x02A6, r18
     dc6:	30 93 a7 02 	sts	0x02A7, r19

            break;
     dca:	4d cf       	rjmp	.-358    	; 0xc66 <remote_buffer_to_datagram+0xca>
            err = E_OK;

            if (temp == DGRAM_MAGIC_END)
            {
                /* copy the magic number */
                datagram_buf->datagram.magic_end = temp;
     dcc:	a0 91 9b 02 	lds	r26, 0x029B
     dd0:	b0 91 9c 02 	lds	r27, 0x029C
     dd4:	18 96       	adiw	r26, 0x08	; 8
     dd6:	4d 92       	st	X+, r4
     dd8:	5d 92       	st	X+, r5
     dda:	6d 92       	st	X+, r6
     ddc:	7c 92       	st	X, r7
     dde:	1b 97       	sbiw	r26, 0x0b	; 11
                /* alright, datagram header synchronized! */
                state = DGRAM_RCV_DATA;
     de0:	90 92 a3 02 	sts	0x02A3, r9
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            temp |= input[i];

            err = E_OK;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	3f cf       	rjmp	.-386    	; 0xc66 <remote_buffer_to_datagram+0xca>
     de8:	a8 ea       	ldi	r26, 0xA8	; 168
     dea:	b2 e0       	ldi	r27, 0x02	; 2
            /* Stay in there until the magic sequence is received */

            temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            temp |= input[i];

            if (temp == DGRAM_MAGIC_START)
     dec:	c0 e0       	ldi	r28, 0x00	; 0
     dee:	d0 e0       	ldi	r29, 0x00	; 0
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
    {
        if (remote_rcv_buf[i].timestamp == 0U)
     df0:	5c 96       	adiw	r26, 0x1c	; 28
     df2:	4d 90       	ld	r4, X+
     df4:	5d 90       	ld	r5, X+
     df6:	6d 90       	ld	r6, X+
     df8:	7c 90       	ld	r7, X
     dfa:	5f 97       	sbiw	r26, 0x1f	; 31
     dfc:	45 28       	or	r4, r5
     dfe:	46 28       	or	r4, r6
     e00:	47 28       	or	r4, r7
     e02:	09 f4       	brne	.+2      	; 0xe06 <remote_buffer_to_datagram+0x26a>
        {
            *datagram_buf = &(remote_rcv_buf[i]);
     e04:	ed 01       	movw	r28, r26
     e06:	90 96       	adiw	r26, 0x20	; 32

void remote_receive_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	a8 34       	cpi	r26, 0x48	; 72
     e0c:	b9 07       	cpc	r27, r25
     e0e:	81 f7       	brne	.-32     	; 0xdf0 <remote_buffer_to_datagram+0x254>
     e10:	d0 93 9c 02 	sts	0x029C, r29
     e14:	c0 93 9b 02 	sts	0x029B, r28

            if (temp == DGRAM_MAGIC_START)
            {
                /* new datagram is incoming: allocate a buffer slot, if possible */
                remote_receive_buffer_alloc(&datagram_buf);
                if (datagram_buf != NULL)
     e18:	20 97       	sbiw	r28, 0x00	; 0
     e1a:	49 f0       	breq	.+18     	; 0xe2e <remote_buffer_to_datagram+0x292>
                {
                    /* copy the magic number */
                    datagram_buf->datagram.magic_start = temp;
     e1c:	c8 82       	st	Y, r12
     e1e:	d9 82       	std	Y+1, r13	; 0x01
     e20:	ea 82       	std	Y+2, r14	; 0x02
     e22:	fb 82       	std	Y+3, r15	; 0x03
                    /* alright, datagram header synchronized! */
                    state = DGRAM_RCV_HEADER;
     e24:	80 92 a3 02 	sts	0x02A3, r8
     e28:	c8 cf       	rjmp	.-112    	; 0xdba <remote_buffer_to_datagram+0x21e>
    static uint8_t buf[DATAGRAM_HEADER_SIZE];
    static uint32_t temp;
    static uint8_t buf_index = 0;
    static t_remote_datagram_buffer *datagram_buf;
    uint8_t i = 0;
    e_error err = E_OK;
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	75 cf       	rjmp	.-278    	; 0xd18 <remote_buffer_to_datagram+0x17c>
                    state = DGRAM_RCV_HEADER;
                }
                else
                {
                    /* Overflow! */
                    err = E_OVERFLOW;
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	c4 cf       	rjmp	.-120    	; 0xdba <remote_buffer_to_datagram+0x21e>

00000e32 <remote_calc_crc_buffer_and_compare>:
bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t crc = 0;
    uint8_t i;

    for (i = 0; i < len; i++)
     e32:	66 23       	and	r22, r22
     e34:	09 f4       	brne	.+2      	; 0xe38 <remote_calc_crc_buffer_and_compare+0x6>
     e36:	2c c0       	rjmp	.+88     	; 0xe90 <remote_calc_crc_buffer_and_compare+0x5e>
     e38:	78 2f       	mov	r23, r24
     e3a:	dc 01       	movw	r26, r24

}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t crc = 0;
     e3c:	e0 e0       	ldi	r30, 0x00	; 0
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t i;

    for (i = 0; i < len; i++)
    {
        crc = _crc16_update(crc, buffer[i]);
     e40:	8d 91       	ld	r24, X+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     e42:	e8 27       	eor	r30, r24
     e44:	8e 2f       	mov	r24, r30
     e46:	82 95       	swap	r24
     e48:	8e 27       	eor	r24, r30
     e4a:	08 2e       	mov	r0, r24
     e4c:	86 95       	lsr	r24
     e4e:	86 95       	lsr	r24
     e50:	80 25       	eor	r24, r0
     e52:	08 2e       	mov	r0, r24
     e54:	86 95       	lsr	r24
     e56:	80 25       	eor	r24, r0
     e58:	87 70       	andi	r24, 0x07	; 7
     e5a:	0e 2e       	mov	r0, r30
     e5c:	ef 2f       	mov	r30, r31
     e5e:	86 95       	lsr	r24
     e60:	07 94       	ror	r0
     e62:	87 95       	ror	r24
     e64:	f0 2d       	mov	r31, r0
     e66:	e8 27       	eor	r30, r24
     e68:	06 94       	lsr	r0
     e6a:	87 95       	ror	r24
     e6c:	f0 25       	eor	r31, r0
     e6e:	e8 27       	eor	r30, r24
     e70:	8a 2f       	mov	r24, r26
     e72:	87 1b       	sub	r24, r23
bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t crc = 0;
    uint8_t i;

    for (i = 0; i < len; i++)
     e74:	86 17       	cp	r24, r22
     e76:	20 f3       	brcs	.-56     	; 0xe40 <remote_calc_crc_buffer_and_compare+0xe>
    {
        crc = _crc16_update(crc, buffer[i]);
    }

    if (calc_crc != NULL) *calc_crc = crc;
     e78:	21 15       	cp	r18, r1
     e7a:	31 05       	cpc	r19, r1
     e7c:	19 f0       	breq	.+6      	; 0xe84 <remote_calc_crc_buffer_and_compare+0x52>
     e7e:	d9 01       	movw	r26, r18
     e80:	ed 93       	st	X+, r30
     e82:	fc 93       	st	X, r31

    if (crc != expected_crc)
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	4e 17       	cp	r20, r30
     e88:	5f 07       	cpc	r21, r31
     e8a:	09 f0       	breq	.+2      	; 0xe8e <remote_calc_crc_buffer_and_compare+0x5c>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return true;
    }
}
     e8e:	08 95       	ret

}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t crc = 0;
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	f1 cf       	rjmp	.-30     	; 0xe78 <remote_calc_crc_buffer_and_compare+0x46>

00000e96 <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
    printf("no ISR!\r\n");
     ea0:	89 eb       	ldi	r24, 0xB9	; 185
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 17 0a 	call	0x142e	; 0x142e <puts>
     ea8:	ff cf       	rjmp	.-2      	; 0xea8 <__vector_default+0x12>

00000eaa <system_fatal>:
    for(;;);
}

void system_fatal(char *str)
{
    printf("%s", str);
     eaa:	9f 93       	push	r25
     eac:	8f 93       	push	r24
     eae:	82 ec       	ldi	r24, 0xC2	; 194
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	9f 93       	push	r25
     eb4:	8f 93       	push	r24
     eb6:	0e 94 03 0a 	call	0x1406	; 0x1406 <printf>
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	ff cf       	rjmp	.-2      	; 0xec2 <system_fatal+0x18>

00000ec4 <system_reset>:

void system_reset(void)
{
    /* start at zero! */
    void (*start)(void) = 0;
    start();
     ec4:	e0 e0       	ldi	r30, 0x00	; 0
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	09 94       	ijmp

00000eca <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     eca:	84 b7       	in	r24, 0x34	; 52

    /* Reset state for the next proper detection */
    MCUSR = 0;
     ecc:	14 be       	out	0x34, r1	; 52

    return t;
}
     ece:	08 95       	ret

00000ed0 <timer_init>:
 */
void timer_init(void)
{

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	84 bd       	out	0x24, r24	; 36
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     ed4:	85 bd       	out	0x25, r24	; 37

    /* initialize counter */
    OCR0A = 200;
     ed6:	88 ec       	ldi	r24, 0xC8	; 200
     ed8:	87 bd       	out	0x27, r24	; 39

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     eda:	ee e6       	ldi	r30, 0x6E	; 110
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	80 83       	st	Z, r24
     ee4:	08 95       	ret

00000ee6 <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
     ef8:	80 91 4a 03 	lds	r24, 0x034A
     efc:	90 91 4b 03 	lds	r25, 0x034B
     f00:	a0 91 4c 03 	lds	r26, 0x034C
     f04:	b0 91 4d 03 	lds	r27, 0x034D
     f08:	8c 59       	subi	r24, 0x9C	; 156
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	af 4f       	sbci	r26, 0xFF	; 255
     f0e:	bf 4f       	sbci	r27, 0xFF	; 255
     f10:	80 93 4a 03 	sts	0x034A, r24
     f14:	90 93 4b 03 	sts	0x034B, r25
     f18:	a0 93 4c 03 	sts	0x034C, r26
     f1c:	b0 93 4d 03 	sts	0x034D, r27
}
     f20:	bf 91       	pop	r27
     f22:	af 91       	pop	r26
     f24:	9f 91       	pop	r25
     f26:	8f 91       	pop	r24
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <uart_putchar>:
    /*
    if (c == '\n') {
        uart_putchar('\r', stream);
    }
    */
    loop_until_bit_is_set(UCSRA, UDRE);
     f32:	90 91 c0 00 	lds	r25, 0x00C0
     f36:	95 ff       	sbrs	r25, 5
     f38:	fc cf       	rjmp	.-8      	; 0xf32 <uart_putchar>
    UDR = c;
     f3a:	80 93 c6 00 	sts	0x00C6, r24
     f3e:	08 95       	ret

00000f40 <uart_getchar>:
}

char uart_getchar(FILE *stream)
{
    loop_until_bit_is_set(UCSRA, RXC);
     f40:	80 91 c0 00 	lds	r24, 0x00C0
     f44:	87 ff       	sbrs	r24, 7
     f46:	fc cf       	rjmp	.-8      	; 0xf40 <uart_getchar>
    return UDR;
     f48:	80 91 c6 00 	lds	r24, 0x00C6
}
     f4c:	08 95       	ret

00000f4e <uart_init>:

void uart_init(void)
{

    /* Enable UART power */
    power_usart0_enable();
     f4e:	e4 e6       	ldi	r30, 0x64	; 100
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8d 7f       	andi	r24, 0xFD	; 253
     f56:	80 83       	st	Z, r24

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
    #else
        UCSRA &= ~(_BV(U2X0));
     f58:	e0 ec       	ldi	r30, 0xC0	; 192
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	80 83       	st	Z, r24
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     f62:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     f66:	87 e6       	ldi	r24, 0x67	; 103
     f68:	80 93 c4 00 	sts	0x00C4, r24

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     f6c:	86 e0       	ldi	r24, 0x06	; 6
     f6e:	80 93 c2 00 	sts	0x00C2, r24


    /* Enable RX and TX */
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     f72:	e1 ec       	ldi	r30, 0xC1	; 193
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	88 e1       	ldi	r24, 0x18	; 24
     f78:	80 83       	st	Z, r24

    /* RX interrupt */
    UCSR0B |= (1<<RXCIE0);
     f7a:	80 81       	ld	r24, Z
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	80 83       	st	Z, r24
     f80:	08 95       	ret

00000f82 <__vector_18>:
//    UBRRL = UBRRL_VALUE;

}

ISR(USART_RX_vect)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
    /* byte received ! */
    if (uart_cb != NULL)
     fa4:	e0 91 48 03 	lds	r30, 0x0348
     fa8:	f0 91 49 03 	lds	r31, 0x0349
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	19 f0       	breq	.+6      	; 0xfb6 <__vector_18+0x34>
    {
        uart_cb(UDR);
     fb0:	80 91 c6 00 	lds	r24, 0x00C6
     fb4:	09 95       	icall
    }
}
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <uart_callback>:

void uart_callback(t_uart_cb cb)
{
    uart_cb = cb;
     fd8:	90 93 49 03 	sts	0x0349, r25
     fdc:	80 93 48 03 	sts	0x0348, r24
     fe0:	08 95       	ret

00000fe2 <__divmodhi4>:
     fe2:	97 fb       	bst	r25, 7
     fe4:	07 2e       	mov	r0, r23
     fe6:	16 f4       	brtc	.+4      	; 0xfec <__divmodhi4+0xa>
     fe8:	00 94       	com	r0
     fea:	07 d0       	rcall	.+14     	; 0xffa <__divmodhi4_neg1>
     fec:	77 fd       	sbrc	r23, 7
     fee:	09 d0       	rcall	.+18     	; 0x1002 <__divmodhi4_neg2>
     ff0:	0e 94 05 08 	call	0x100a	; 0x100a <__udivmodhi4>
     ff4:	07 fc       	sbrc	r0, 7
     ff6:	05 d0       	rcall	.+10     	; 0x1002 <__divmodhi4_neg2>
     ff8:	3e f4       	brtc	.+14     	; 0x1008 <__divmodhi4_exit>

00000ffa <__divmodhi4_neg1>:
     ffa:	90 95       	com	r25
     ffc:	81 95       	neg	r24
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	08 95       	ret

00001002 <__divmodhi4_neg2>:
    1002:	70 95       	com	r23
    1004:	61 95       	neg	r22
    1006:	7f 4f       	sbci	r23, 0xFF	; 255

00001008 <__divmodhi4_exit>:
    1008:	08 95       	ret

0000100a <__udivmodhi4>:
    100a:	aa 1b       	sub	r26, r26
    100c:	bb 1b       	sub	r27, r27
    100e:	51 e1       	ldi	r21, 0x11	; 17
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <__udivmodhi4_ep>

00001012 <__udivmodhi4_loop>:
    1012:	aa 1f       	adc	r26, r26
    1014:	bb 1f       	adc	r27, r27
    1016:	a6 17       	cp	r26, r22
    1018:	b7 07       	cpc	r27, r23
    101a:	10 f0       	brcs	.+4      	; 0x1020 <__udivmodhi4_ep>
    101c:	a6 1b       	sub	r26, r22
    101e:	b7 0b       	sbc	r27, r23

00001020 <__udivmodhi4_ep>:
    1020:	88 1f       	adc	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	5a 95       	dec	r21
    1026:	a9 f7       	brne	.-22     	; 0x1012 <__udivmodhi4_loop>
    1028:	80 95       	com	r24
    102a:	90 95       	com	r25
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	08 95       	ret

00001032 <__subsf3>:
    1032:	50 58       	subi	r21, 0x80	; 128

00001034 <__addsf3>:
    1034:	bb 27       	eor	r27, r27
    1036:	aa 27       	eor	r26, r26
    1038:	0e d0       	rcall	.+28     	; 0x1056 <__addsf3x>
    103a:	48 c1       	rjmp	.+656    	; 0x12cc <__fp_round>
    103c:	39 d1       	rcall	.+626    	; 0x12b0 <__fp_pscA>
    103e:	30 f0       	brcs	.+12     	; 0x104c <__addsf3+0x18>
    1040:	3e d1       	rcall	.+636    	; 0x12be <__fp_pscB>
    1042:	20 f0       	brcs	.+8      	; 0x104c <__addsf3+0x18>
    1044:	31 f4       	brne	.+12     	; 0x1052 <__addsf3+0x1e>
    1046:	9f 3f       	cpi	r25, 0xFF	; 255
    1048:	11 f4       	brne	.+4      	; 0x104e <__addsf3+0x1a>
    104a:	1e f4       	brtc	.+6      	; 0x1052 <__addsf3+0x1e>
    104c:	2e c1       	rjmp	.+604    	; 0x12aa <__fp_nan>
    104e:	0e f4       	brtc	.+2      	; 0x1052 <__addsf3+0x1e>
    1050:	e0 95       	com	r30
    1052:	e7 fb       	bst	r30, 7
    1054:	24 c1       	rjmp	.+584    	; 0x129e <__fp_inf>

00001056 <__addsf3x>:
    1056:	e9 2f       	mov	r30, r25
    1058:	4a d1       	rcall	.+660    	; 0x12ee <__fp_split3>
    105a:	80 f3       	brcs	.-32     	; 0x103c <__addsf3+0x8>
    105c:	ba 17       	cp	r27, r26
    105e:	62 07       	cpc	r22, r18
    1060:	73 07       	cpc	r23, r19
    1062:	84 07       	cpc	r24, r20
    1064:	95 07       	cpc	r25, r21
    1066:	18 f0       	brcs	.+6      	; 0x106e <__addsf3x+0x18>
    1068:	71 f4       	brne	.+28     	; 0x1086 <__addsf3x+0x30>
    106a:	9e f5       	brtc	.+102    	; 0x10d2 <__addsf3x+0x7c>
    106c:	62 c1       	rjmp	.+708    	; 0x1332 <__fp_zero>
    106e:	0e f4       	brtc	.+2      	; 0x1072 <__addsf3x+0x1c>
    1070:	e0 95       	com	r30
    1072:	0b 2e       	mov	r0, r27
    1074:	ba 2f       	mov	r27, r26
    1076:	a0 2d       	mov	r26, r0
    1078:	0b 01       	movw	r0, r22
    107a:	b9 01       	movw	r22, r18
    107c:	90 01       	movw	r18, r0
    107e:	0c 01       	movw	r0, r24
    1080:	ca 01       	movw	r24, r20
    1082:	a0 01       	movw	r20, r0
    1084:	11 24       	eor	r1, r1
    1086:	ff 27       	eor	r31, r31
    1088:	59 1b       	sub	r21, r25
    108a:	99 f0       	breq	.+38     	; 0x10b2 <__addsf3x+0x5c>
    108c:	59 3f       	cpi	r21, 0xF9	; 249
    108e:	50 f4       	brcc	.+20     	; 0x10a4 <__addsf3x+0x4e>
    1090:	50 3e       	cpi	r21, 0xE0	; 224
    1092:	68 f1       	brcs	.+90     	; 0x10ee <__addsf3x+0x98>
    1094:	1a 16       	cp	r1, r26
    1096:	f0 40       	sbci	r31, 0x00	; 0
    1098:	a2 2f       	mov	r26, r18
    109a:	23 2f       	mov	r18, r19
    109c:	34 2f       	mov	r19, r20
    109e:	44 27       	eor	r20, r20
    10a0:	58 5f       	subi	r21, 0xF8	; 248
    10a2:	f3 cf       	rjmp	.-26     	; 0x108a <__addsf3x+0x34>
    10a4:	46 95       	lsr	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	a7 95       	ror	r26
    10ac:	f0 40       	sbci	r31, 0x00	; 0
    10ae:	53 95       	inc	r21
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__addsf3x+0x4e>
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__addsf3x+0x7c>
    10b4:	1f 16       	cp	r1, r31
    10b6:	ba 0b       	sbc	r27, r26
    10b8:	62 0b       	sbc	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba f0       	brmi	.+46     	; 0x10ee <__addsf3x+0x98>
    10c0:	91 50       	subi	r25, 0x01	; 1
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <__addsf3x+0x96>
    10c4:	ff 0f       	add	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	c2 f7       	brpl	.-16     	; 0x10c0 <__addsf3x+0x6a>
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <__addsf3x+0x98>
    10d2:	ba 0f       	add	r27, r26
    10d4:	62 1f       	adc	r22, r18
    10d6:	73 1f       	adc	r23, r19
    10d8:	84 1f       	adc	r24, r20
    10da:	48 f4       	brcc	.+18     	; 0x10ee <__addsf3x+0x98>
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f7 95       	ror	r31
    10e6:	9e 3f       	cpi	r25, 0xFE	; 254
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__addsf3x+0x96>
    10ea:	b3 cf       	rjmp	.-154    	; 0x1052 <__addsf3+0x1e>
    10ec:	93 95       	inc	r25
    10ee:	88 0f       	add	r24, r24
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__addsf3x+0x9e>
    10f2:	99 27       	eor	r25, r25
    10f4:	ee 0f       	add	r30, r30
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	08 95       	ret

000010fc <__divsf3>:
    10fc:	0c d0       	rcall	.+24     	; 0x1116 <__divsf3x>
    10fe:	e6 c0       	rjmp	.+460    	; 0x12cc <__fp_round>
    1100:	de d0       	rcall	.+444    	; 0x12be <__fp_pscB>
    1102:	40 f0       	brcs	.+16     	; 0x1114 <__divsf3+0x18>
    1104:	d5 d0       	rcall	.+426    	; 0x12b0 <__fp_pscA>
    1106:	30 f0       	brcs	.+12     	; 0x1114 <__divsf3+0x18>
    1108:	21 f4       	brne	.+8      	; 0x1112 <__divsf3+0x16>
    110a:	5f 3f       	cpi	r21, 0xFF	; 255
    110c:	19 f0       	breq	.+6      	; 0x1114 <__divsf3+0x18>
    110e:	c7 c0       	rjmp	.+398    	; 0x129e <__fp_inf>
    1110:	51 11       	cpse	r21, r1
    1112:	10 c1       	rjmp	.+544    	; 0x1334 <__fp_szero>
    1114:	ca c0       	rjmp	.+404    	; 0x12aa <__fp_nan>

00001116 <__divsf3x>:
    1116:	eb d0       	rcall	.+470    	; 0x12ee <__fp_split3>
    1118:	98 f3       	brcs	.-26     	; 0x1100 <__divsf3+0x4>

0000111a <__divsf3_pse>:
    111a:	99 23       	and	r25, r25
    111c:	c9 f3       	breq	.-14     	; 0x1110 <__divsf3+0x14>
    111e:	55 23       	and	r21, r21
    1120:	b1 f3       	breq	.-20     	; 0x110e <__divsf3+0x12>
    1122:	95 1b       	sub	r25, r21
    1124:	55 0b       	sbc	r21, r21
    1126:	bb 27       	eor	r27, r27
    1128:	aa 27       	eor	r26, r26
    112a:	62 17       	cp	r22, r18
    112c:	73 07       	cpc	r23, r19
    112e:	84 07       	cpc	r24, r20
    1130:	38 f0       	brcs	.+14     	; 0x1140 <__divsf3_pse+0x26>
    1132:	9f 5f       	subi	r25, 0xFF	; 255
    1134:	5f 4f       	sbci	r21, 0xFF	; 255
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	44 1f       	adc	r20, r20
    113c:	aa 1f       	adc	r26, r26
    113e:	a9 f3       	breq	.-22     	; 0x112a <__divsf3_pse+0x10>
    1140:	33 d0       	rcall	.+102    	; 0x11a8 <__divsf3_pse+0x8e>
    1142:	0e 2e       	mov	r0, r30
    1144:	3a f0       	brmi	.+14     	; 0x1154 <__divsf3_pse+0x3a>
    1146:	e0 e8       	ldi	r30, 0x80	; 128
    1148:	30 d0       	rcall	.+96     	; 0x11aa <__divsf3_pse+0x90>
    114a:	91 50       	subi	r25, 0x01	; 1
    114c:	50 40       	sbci	r21, 0x00	; 0
    114e:	e6 95       	lsr	r30
    1150:	00 1c       	adc	r0, r0
    1152:	ca f7       	brpl	.-14     	; 0x1146 <__divsf3_pse+0x2c>
    1154:	29 d0       	rcall	.+82     	; 0x11a8 <__divsf3_pse+0x8e>
    1156:	fe 2f       	mov	r31, r30
    1158:	27 d0       	rcall	.+78     	; 0x11a8 <__divsf3_pse+0x8e>
    115a:	66 0f       	add	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	bb 1f       	adc	r27, r27
    1162:	26 17       	cp	r18, r22
    1164:	37 07       	cpc	r19, r23
    1166:	48 07       	cpc	r20, r24
    1168:	ab 07       	cpc	r26, r27
    116a:	b0 e8       	ldi	r27, 0x80	; 128
    116c:	09 f0       	breq	.+2      	; 0x1170 <__divsf3_pse+0x56>
    116e:	bb 0b       	sbc	r27, r27
    1170:	80 2d       	mov	r24, r0
    1172:	bf 01       	movw	r22, r30
    1174:	ff 27       	eor	r31, r31
    1176:	93 58       	subi	r25, 0x83	; 131
    1178:	5f 4f       	sbci	r21, 0xFF	; 255
    117a:	2a f0       	brmi	.+10     	; 0x1186 <__divsf3_pse+0x6c>
    117c:	9e 3f       	cpi	r25, 0xFE	; 254
    117e:	51 05       	cpc	r21, r1
    1180:	68 f0       	brcs	.+26     	; 0x119c <__divsf3_pse+0x82>
    1182:	8d c0       	rjmp	.+282    	; 0x129e <__fp_inf>
    1184:	d7 c0       	rjmp	.+430    	; 0x1334 <__fp_szero>
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	ec f3       	brlt	.-6      	; 0x1184 <__divsf3_pse+0x6a>
    118a:	98 3e       	cpi	r25, 0xE8	; 232
    118c:	dc f3       	brlt	.-10     	; 0x1184 <__divsf3_pse+0x6a>
    118e:	86 95       	lsr	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	b7 95       	ror	r27
    1196:	f7 95       	ror	r31
    1198:	9f 5f       	subi	r25, 0xFF	; 255
    119a:	c9 f7       	brne	.-14     	; 0x118e <__divsf3_pse+0x74>
    119c:	88 0f       	add	r24, r24
    119e:	91 1d       	adc	r25, r1
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret
    11a8:	e1 e0       	ldi	r30, 0x01	; 1
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	bb 1f       	adc	r27, r27
    11b2:	62 17       	cp	r22, r18
    11b4:	73 07       	cpc	r23, r19
    11b6:	84 07       	cpc	r24, r20
    11b8:	ba 07       	cpc	r27, r26
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__divsf3_pse+0xaa>
    11bc:	62 1b       	sub	r22, r18
    11be:	73 0b       	sbc	r23, r19
    11c0:	84 0b       	sbc	r24, r20
    11c2:	ba 0b       	sbc	r27, r26
    11c4:	ee 1f       	adc	r30, r30
    11c6:	88 f7       	brcc	.-30     	; 0x11aa <__divsf3_pse+0x90>
    11c8:	e0 95       	com	r30
    11ca:	08 95       	ret

000011cc <__fixunssfsi>:
    11cc:	98 d0       	rcall	.+304    	; 0x12fe <__fp_splitA>
    11ce:	88 f0       	brcs	.+34     	; 0x11f2 <__fixunssfsi+0x26>
    11d0:	9f 57       	subi	r25, 0x7F	; 127
    11d2:	90 f0       	brcs	.+36     	; 0x11f8 <__fixunssfsi+0x2c>
    11d4:	b9 2f       	mov	r27, r25
    11d6:	99 27       	eor	r25, r25
    11d8:	b7 51       	subi	r27, 0x17	; 23
    11da:	a0 f0       	brcs	.+40     	; 0x1204 <__fixunssfsi+0x38>
    11dc:	d1 f0       	breq	.+52     	; 0x1212 <__fixunssfsi+0x46>
    11de:	66 0f       	add	r22, r22
    11e0:	77 1f       	adc	r23, r23
    11e2:	88 1f       	adc	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	1a f0       	brmi	.+6      	; 0x11ee <__fixunssfsi+0x22>
    11e8:	ba 95       	dec	r27
    11ea:	c9 f7       	brne	.-14     	; 0x11de <__fixunssfsi+0x12>
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <__fixunssfsi+0x46>
    11ee:	b1 30       	cpi	r27, 0x01	; 1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <__fixunssfsi+0x46>
    11f2:	9f d0       	rcall	.+318    	; 0x1332 <__fp_zero>
    11f4:	b1 e0       	ldi	r27, 0x01	; 1
    11f6:	08 95       	ret
    11f8:	9c c0       	rjmp	.+312    	; 0x1332 <__fp_zero>
    11fa:	67 2f       	mov	r22, r23
    11fc:	78 2f       	mov	r23, r24
    11fe:	88 27       	eor	r24, r24
    1200:	b8 5f       	subi	r27, 0xF8	; 248
    1202:	39 f0       	breq	.+14     	; 0x1212 <__fixunssfsi+0x46>
    1204:	b9 3f       	cpi	r27, 0xF9	; 249
    1206:	cc f3       	brlt	.-14     	; 0x11fa <__fixunssfsi+0x2e>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b3 95       	inc	r27
    1210:	d9 f7       	brne	.-10     	; 0x1208 <__fixunssfsi+0x3c>
    1212:	3e f4       	brtc	.+14     	; 0x1222 <__fixunssfsi+0x56>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	08 95       	ret

00001224 <__floatunsisf>:
    1224:	e8 94       	clt
    1226:	09 c0       	rjmp	.+18     	; 0x123a <__floatsisf+0x12>

00001228 <__floatsisf>:
    1228:	97 fb       	bst	r25, 7
    122a:	3e f4       	brtc	.+14     	; 0x123a <__floatsisf+0x12>
    122c:	90 95       	com	r25
    122e:	80 95       	com	r24
    1230:	70 95       	com	r23
    1232:	61 95       	neg	r22
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	8f 4f       	sbci	r24, 0xFF	; 255
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	99 23       	and	r25, r25
    123c:	a9 f0       	breq	.+42     	; 0x1268 <__floatsisf+0x40>
    123e:	f9 2f       	mov	r31, r25
    1240:	96 e9       	ldi	r25, 0x96	; 150
    1242:	bb 27       	eor	r27, r27
    1244:	93 95       	inc	r25
    1246:	f6 95       	lsr	r31
    1248:	87 95       	ror	r24
    124a:	77 95       	ror	r23
    124c:	67 95       	ror	r22
    124e:	b7 95       	ror	r27
    1250:	f1 11       	cpse	r31, r1
    1252:	f8 cf       	rjmp	.-16     	; 0x1244 <__floatsisf+0x1c>
    1254:	fa f4       	brpl	.+62     	; 0x1294 <__floatsisf+0x6c>
    1256:	bb 0f       	add	r27, r27
    1258:	11 f4       	brne	.+4      	; 0x125e <__floatsisf+0x36>
    125a:	60 ff       	sbrs	r22, 0
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <__floatsisf+0x6c>
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <__floatsisf+0x6c>
    1268:	88 23       	and	r24, r24
    126a:	11 f0       	breq	.+4      	; 0x1270 <__floatsisf+0x48>
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	11 c0       	rjmp	.+34     	; 0x1292 <__floatsisf+0x6a>
    1270:	77 23       	and	r23, r23
    1272:	21 f0       	breq	.+8      	; 0x127c <__floatsisf+0x54>
    1274:	9e e8       	ldi	r25, 0x8E	; 142
    1276:	87 2f       	mov	r24, r23
    1278:	76 2f       	mov	r23, r22
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <__floatsisf+0x5e>
    127c:	66 23       	and	r22, r22
    127e:	71 f0       	breq	.+28     	; 0x129c <__floatsisf+0x74>
    1280:	96 e8       	ldi	r25, 0x86	; 134
    1282:	86 2f       	mov	r24, r22
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	2a f0       	brmi	.+10     	; 0x1294 <__floatsisf+0x6c>
    128a:	9a 95       	dec	r25
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	da f7       	brpl	.-10     	; 0x128a <__floatsisf+0x62>
    1294:	88 0f       	add	r24, r24
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <__fp_inf>:
    129e:	97 f9       	bld	r25, 7
    12a0:	9f 67       	ori	r25, 0x7F	; 127
    12a2:	80 e8       	ldi	r24, 0x80	; 128
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	08 95       	ret

000012aa <__fp_nan>:
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	80 ec       	ldi	r24, 0xC0	; 192
    12ae:	08 95       	ret

000012b0 <__fp_pscA>:
    12b0:	00 24       	eor	r0, r0
    12b2:	0a 94       	dec	r0
    12b4:	16 16       	cp	r1, r22
    12b6:	17 06       	cpc	r1, r23
    12b8:	18 06       	cpc	r1, r24
    12ba:	09 06       	cpc	r0, r25
    12bc:	08 95       	ret

000012be <__fp_pscB>:
    12be:	00 24       	eor	r0, r0
    12c0:	0a 94       	dec	r0
    12c2:	12 16       	cp	r1, r18
    12c4:	13 06       	cpc	r1, r19
    12c6:	14 06       	cpc	r1, r20
    12c8:	05 06       	cpc	r0, r21
    12ca:	08 95       	ret

000012cc <__fp_round>:
    12cc:	09 2e       	mov	r0, r25
    12ce:	03 94       	inc	r0
    12d0:	00 0c       	add	r0, r0
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__fp_round+0xc>
    12d4:	88 23       	and	r24, r24
    12d6:	52 f0       	brmi	.+20     	; 0x12ec <__fp_round+0x20>
    12d8:	bb 0f       	add	r27, r27
    12da:	40 f4       	brcc	.+16     	; 0x12ec <__fp_round+0x20>
    12dc:	bf 2b       	or	r27, r31
    12de:	11 f4       	brne	.+4      	; 0x12e4 <__fp_round+0x18>
    12e0:	60 ff       	sbrs	r22, 0
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <__fp_round+0x20>
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	08 95       	ret

000012ee <__fp_split3>:
    12ee:	57 fd       	sbrc	r21, 7
    12f0:	90 58       	subi	r25, 0x80	; 128
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	59 f0       	breq	.+22     	; 0x130e <__fp_splitA+0x10>
    12f8:	5f 3f       	cpi	r21, 0xFF	; 255
    12fa:	71 f0       	breq	.+28     	; 0x1318 <__fp_splitA+0x1a>
    12fc:	47 95       	ror	r20

000012fe <__fp_splitA>:
    12fe:	88 0f       	add	r24, r24
    1300:	97 fb       	bst	r25, 7
    1302:	99 1f       	adc	r25, r25
    1304:	61 f0       	breq	.+24     	; 0x131e <__fp_splitA+0x20>
    1306:	9f 3f       	cpi	r25, 0xFF	; 255
    1308:	79 f0       	breq	.+30     	; 0x1328 <__fp_splitA+0x2a>
    130a:	87 95       	ror	r24
    130c:	08 95       	ret
    130e:	12 16       	cp	r1, r18
    1310:	13 06       	cpc	r1, r19
    1312:	14 06       	cpc	r1, r20
    1314:	55 1f       	adc	r21, r21
    1316:	f2 cf       	rjmp	.-28     	; 0x12fc <__fp_split3+0xe>
    1318:	46 95       	lsr	r20
    131a:	f1 df       	rcall	.-30     	; 0x12fe <__fp_splitA>
    131c:	08 c0       	rjmp	.+16     	; 0x132e <__fp_splitA+0x30>
    131e:	16 16       	cp	r1, r22
    1320:	17 06       	cpc	r1, r23
    1322:	18 06       	cpc	r1, r24
    1324:	99 1f       	adc	r25, r25
    1326:	f1 cf       	rjmp	.-30     	; 0x130a <__fp_splitA+0xc>
    1328:	86 95       	lsr	r24
    132a:	71 05       	cpc	r23, r1
    132c:	61 05       	cpc	r22, r1
    132e:	08 94       	sec
    1330:	08 95       	ret

00001332 <__fp_zero>:
    1332:	e8 94       	clt

00001334 <__fp_szero>:
    1334:	bb 27       	eor	r27, r27
    1336:	66 27       	eor	r22, r22
    1338:	77 27       	eor	r23, r23
    133a:	cb 01       	movw	r24, r22
    133c:	97 f9       	bld	r25, 7
    133e:	08 95       	ret

00001340 <__mulsf3>:
    1340:	0b d0       	rcall	.+22     	; 0x1358 <__mulsf3x>
    1342:	c4 cf       	rjmp	.-120    	; 0x12cc <__fp_round>
    1344:	b5 df       	rcall	.-150    	; 0x12b0 <__fp_pscA>
    1346:	28 f0       	brcs	.+10     	; 0x1352 <__mulsf3+0x12>
    1348:	ba df       	rcall	.-140    	; 0x12be <__fp_pscB>
    134a:	18 f0       	brcs	.+6      	; 0x1352 <__mulsf3+0x12>
    134c:	95 23       	and	r25, r21
    134e:	09 f0       	breq	.+2      	; 0x1352 <__mulsf3+0x12>
    1350:	a6 cf       	rjmp	.-180    	; 0x129e <__fp_inf>
    1352:	ab cf       	rjmp	.-170    	; 0x12aa <__fp_nan>
    1354:	11 24       	eor	r1, r1
    1356:	ee cf       	rjmp	.-36     	; 0x1334 <__fp_szero>

00001358 <__mulsf3x>:
    1358:	ca df       	rcall	.-108    	; 0x12ee <__fp_split3>
    135a:	a0 f3       	brcs	.-24     	; 0x1344 <__mulsf3+0x4>

0000135c <__mulsf3_pse>:
    135c:	95 9f       	mul	r25, r21
    135e:	d1 f3       	breq	.-12     	; 0x1354 <__mulsf3+0x14>
    1360:	95 0f       	add	r25, r21
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	55 1f       	adc	r21, r21
    1366:	62 9f       	mul	r22, r18
    1368:	f0 01       	movw	r30, r0
    136a:	72 9f       	mul	r23, r18
    136c:	bb 27       	eor	r27, r27
    136e:	f0 0d       	add	r31, r0
    1370:	b1 1d       	adc	r27, r1
    1372:	63 9f       	mul	r22, r19
    1374:	aa 27       	eor	r26, r26
    1376:	f0 0d       	add	r31, r0
    1378:	b1 1d       	adc	r27, r1
    137a:	aa 1f       	adc	r26, r26
    137c:	64 9f       	mul	r22, r20
    137e:	66 27       	eor	r22, r22
    1380:	b0 0d       	add	r27, r0
    1382:	a1 1d       	adc	r26, r1
    1384:	66 1f       	adc	r22, r22
    1386:	82 9f       	mul	r24, r18
    1388:	22 27       	eor	r18, r18
    138a:	b0 0d       	add	r27, r0
    138c:	a1 1d       	adc	r26, r1
    138e:	62 1f       	adc	r22, r18
    1390:	73 9f       	mul	r23, r19
    1392:	b0 0d       	add	r27, r0
    1394:	a1 1d       	adc	r26, r1
    1396:	62 1f       	adc	r22, r18
    1398:	83 9f       	mul	r24, r19
    139a:	a0 0d       	add	r26, r0
    139c:	61 1d       	adc	r22, r1
    139e:	22 1f       	adc	r18, r18
    13a0:	74 9f       	mul	r23, r20
    13a2:	33 27       	eor	r19, r19
    13a4:	a0 0d       	add	r26, r0
    13a6:	61 1d       	adc	r22, r1
    13a8:	23 1f       	adc	r18, r19
    13aa:	84 9f       	mul	r24, r20
    13ac:	60 0d       	add	r22, r0
    13ae:	21 1d       	adc	r18, r1
    13b0:	82 2f       	mov	r24, r18
    13b2:	76 2f       	mov	r23, r22
    13b4:	6a 2f       	mov	r22, r26
    13b6:	11 24       	eor	r1, r1
    13b8:	9f 57       	subi	r25, 0x7F	; 127
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	8a f0       	brmi	.+34     	; 0x13e0 <__mulsf3_pse+0x84>
    13be:	e1 f0       	breq	.+56     	; 0x13f8 <__mulsf3_pse+0x9c>
    13c0:	88 23       	and	r24, r24
    13c2:	4a f0       	brmi	.+18     	; 0x13d6 <__mulsf3_pse+0x7a>
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	bb 1f       	adc	r27, r27
    13ca:	66 1f       	adc	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	50 40       	sbci	r21, 0x00	; 0
    13d4:	a9 f7       	brne	.-22     	; 0x13c0 <__mulsf3_pse+0x64>
    13d6:	9e 3f       	cpi	r25, 0xFE	; 254
    13d8:	51 05       	cpc	r21, r1
    13da:	70 f0       	brcs	.+28     	; 0x13f8 <__mulsf3_pse+0x9c>
    13dc:	60 cf       	rjmp	.-320    	; 0x129e <__fp_inf>
    13de:	aa cf       	rjmp	.-172    	; 0x1334 <__fp_szero>
    13e0:	5f 3f       	cpi	r21, 0xFF	; 255
    13e2:	ec f3       	brlt	.-6      	; 0x13de <__mulsf3_pse+0x82>
    13e4:	98 3e       	cpi	r25, 0xE8	; 232
    13e6:	dc f3       	brlt	.-10     	; 0x13de <__mulsf3_pse+0x82>
    13e8:	86 95       	lsr	r24
    13ea:	77 95       	ror	r23
    13ec:	67 95       	ror	r22
    13ee:	b7 95       	ror	r27
    13f0:	f7 95       	ror	r31
    13f2:	e7 95       	ror	r30
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	c1 f7       	brne	.-16     	; 0x13e8 <__mulsf3_pse+0x8c>
    13f8:	fe 2b       	or	r31, r30
    13fa:	88 0f       	add	r24, r24
    13fc:	91 1d       	adc	r25, r1
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <printf>:
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e0       	ldi	r30, 0x09	; 9
    140c:	fa e0       	ldi	r31, 0x0A	; 10
    140e:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__prologue_saves__+0x20>
    1412:	fe 01       	movw	r30, r28
    1414:	35 96       	adiw	r30, 0x05	; 5
    1416:	61 91       	ld	r22, Z+
    1418:	71 91       	ld	r23, Z+
    141a:	af 01       	movw	r20, r30
    141c:	80 91 50 03 	lds	r24, 0x0350
    1420:	90 91 51 03 	lds	r25, 0x0351
    1424:	0e 94 44 0a 	call	0x1488	; 0x1488 <vfprintf>
    1428:	e2 e0       	ldi	r30, 0x02	; 2
    142a:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__epilogue_restores__+0x20>

0000142e <puts>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	e0 91 50 03 	lds	r30, 0x0350
    143a:	f0 91 51 03 	lds	r31, 0x0351
    143e:	23 81       	ldd	r18, Z+3	; 0x03
    1440:	21 ff       	sbrs	r18, 1
    1442:	1b c0       	rjmp	.+54     	; 0x147a <puts+0x4c>
    1444:	ec 01       	movw	r28, r24
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	89 91       	ld	r24, Y+
    144c:	60 91 50 03 	lds	r22, 0x0350
    1450:	70 91 51 03 	lds	r23, 0x0351
    1454:	db 01       	movw	r26, r22
    1456:	18 96       	adiw	r26, 0x08	; 8
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	19 97       	sbiw	r26, 0x09	; 9
    145e:	88 23       	and	r24, r24
    1460:	31 f0       	breq	.+12     	; 0x146e <puts+0x40>
    1462:	09 95       	icall
    1464:	89 2b       	or	r24, r25
    1466:	89 f3       	breq	.-30     	; 0x144a <puts+0x1c>
    1468:	0f ef       	ldi	r16, 0xFF	; 255
    146a:	1f ef       	ldi	r17, 0xFF	; 255
    146c:	ee cf       	rjmp	.-36     	; 0x144a <puts+0x1c>
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	09 95       	icall
    1472:	89 2b       	or	r24, r25
    1474:	11 f4       	brne	.+4      	; 0x147a <puts+0x4c>
    1476:	c8 01       	movw	r24, r16
    1478:	02 c0       	rjmp	.+4      	; 0x147e <puts+0x50>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <vfprintf>:
    1488:	ac e0       	ldi	r26, 0x0C	; 12
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ea e4       	ldi	r30, 0x4A	; 74
    148e:	fa e0       	ldi	r31, 0x0A	; 10
    1490:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__prologue_saves__>
    1494:	7c 01       	movw	r14, r24
    1496:	6b 01       	movw	r12, r22
    1498:	8a 01       	movw	r16, r20
    149a:	fc 01       	movw	r30, r24
    149c:	17 82       	std	Z+7, r1	; 0x07
    149e:	16 82       	std	Z+6, r1	; 0x06
    14a0:	83 81       	ldd	r24, Z+3	; 0x03
    14a2:	81 ff       	sbrs	r24, 1
    14a4:	bd c1       	rjmp	.+890    	; 0x1820 <vfprintf+0x398>
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	4c 01       	movw	r8, r24
    14ac:	f7 01       	movw	r30, r14
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	f6 01       	movw	r30, r12
    14b2:	93 fd       	sbrc	r25, 3
    14b4:	85 91       	lpm	r24, Z+
    14b6:	93 ff       	sbrs	r25, 3
    14b8:	81 91       	ld	r24, Z+
    14ba:	6f 01       	movw	r12, r30
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <vfprintf+0x3a>
    14c0:	ab c1       	rjmp	.+854    	; 0x1818 <vfprintf+0x390>
    14c2:	85 32       	cpi	r24, 0x25	; 37
    14c4:	39 f4       	brne	.+14     	; 0x14d4 <vfprintf+0x4c>
    14c6:	93 fd       	sbrc	r25, 3
    14c8:	85 91       	lpm	r24, Z+
    14ca:	93 ff       	sbrs	r25, 3
    14cc:	81 91       	ld	r24, Z+
    14ce:	6f 01       	movw	r12, r30
    14d0:	85 32       	cpi	r24, 0x25	; 37
    14d2:	29 f4       	brne	.+10     	; 0x14de <vfprintf+0x56>
    14d4:	b7 01       	movw	r22, r14
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    14dc:	e7 cf       	rjmp	.-50     	; 0x14ac <vfprintf+0x24>
    14de:	51 2c       	mov	r5, r1
    14e0:	31 2c       	mov	r3, r1
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	20 32       	cpi	r18, 0x20	; 32
    14e6:	a0 f4       	brcc	.+40     	; 0x1510 <vfprintf+0x88>
    14e8:	8b 32       	cpi	r24, 0x2B	; 43
    14ea:	69 f0       	breq	.+26     	; 0x1506 <vfprintf+0x7e>
    14ec:	30 f4       	brcc	.+12     	; 0x14fa <vfprintf+0x72>
    14ee:	80 32       	cpi	r24, 0x20	; 32
    14f0:	59 f0       	breq	.+22     	; 0x1508 <vfprintf+0x80>
    14f2:	83 32       	cpi	r24, 0x23	; 35
    14f4:	69 f4       	brne	.+26     	; 0x1510 <vfprintf+0x88>
    14f6:	20 61       	ori	r18, 0x10	; 16
    14f8:	2c c0       	rjmp	.+88     	; 0x1552 <vfprintf+0xca>
    14fa:	8d 32       	cpi	r24, 0x2D	; 45
    14fc:	39 f0       	breq	.+14     	; 0x150c <vfprintf+0x84>
    14fe:	80 33       	cpi	r24, 0x30	; 48
    1500:	39 f4       	brne	.+14     	; 0x1510 <vfprintf+0x88>
    1502:	21 60       	ori	r18, 0x01	; 1
    1504:	26 c0       	rjmp	.+76     	; 0x1552 <vfprintf+0xca>
    1506:	22 60       	ori	r18, 0x02	; 2
    1508:	24 60       	ori	r18, 0x04	; 4
    150a:	23 c0       	rjmp	.+70     	; 0x1552 <vfprintf+0xca>
    150c:	28 60       	ori	r18, 0x08	; 8
    150e:	21 c0       	rjmp	.+66     	; 0x1552 <vfprintf+0xca>
    1510:	27 fd       	sbrc	r18, 7
    1512:	27 c0       	rjmp	.+78     	; 0x1562 <vfprintf+0xda>
    1514:	30 ed       	ldi	r19, 0xD0	; 208
    1516:	38 0f       	add	r19, r24
    1518:	3a 30       	cpi	r19, 0x0A	; 10
    151a:	78 f4       	brcc	.+30     	; 0x153a <vfprintf+0xb2>
    151c:	26 ff       	sbrs	r18, 6
    151e:	06 c0       	rjmp	.+12     	; 0x152c <vfprintf+0xa4>
    1520:	fa e0       	ldi	r31, 0x0A	; 10
    1522:	5f 9e       	mul	r5, r31
    1524:	30 0d       	add	r19, r0
    1526:	11 24       	eor	r1, r1
    1528:	53 2e       	mov	r5, r19
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <vfprintf+0xca>
    152c:	8a e0       	ldi	r24, 0x0A	; 10
    152e:	38 9e       	mul	r3, r24
    1530:	30 0d       	add	r19, r0
    1532:	11 24       	eor	r1, r1
    1534:	33 2e       	mov	r3, r19
    1536:	20 62       	ori	r18, 0x20	; 32
    1538:	0c c0       	rjmp	.+24     	; 0x1552 <vfprintf+0xca>
    153a:	8e 32       	cpi	r24, 0x2E	; 46
    153c:	21 f4       	brne	.+8      	; 0x1546 <vfprintf+0xbe>
    153e:	26 fd       	sbrc	r18, 6
    1540:	6b c1       	rjmp	.+726    	; 0x1818 <vfprintf+0x390>
    1542:	20 64       	ori	r18, 0x40	; 64
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <vfprintf+0xca>
    1546:	8c 36       	cpi	r24, 0x6C	; 108
    1548:	11 f4       	brne	.+4      	; 0x154e <vfprintf+0xc6>
    154a:	20 68       	ori	r18, 0x80	; 128
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfprintf+0xca>
    154e:	88 36       	cpi	r24, 0x68	; 104
    1550:	41 f4       	brne	.+16     	; 0x1562 <vfprintf+0xda>
    1552:	f6 01       	movw	r30, r12
    1554:	93 fd       	sbrc	r25, 3
    1556:	85 91       	lpm	r24, Z+
    1558:	93 ff       	sbrs	r25, 3
    155a:	81 91       	ld	r24, Z+
    155c:	6f 01       	movw	r12, r30
    155e:	81 11       	cpse	r24, r1
    1560:	c1 cf       	rjmp	.-126    	; 0x14e4 <vfprintf+0x5c>
    1562:	98 2f       	mov	r25, r24
    1564:	9f 7d       	andi	r25, 0xDF	; 223
    1566:	95 54       	subi	r25, 0x45	; 69
    1568:	93 30       	cpi	r25, 0x03	; 3
    156a:	28 f4       	brcc	.+10     	; 0x1576 <vfprintf+0xee>
    156c:	0c 5f       	subi	r16, 0xFC	; 252
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	ff e3       	ldi	r31, 0x3F	; 63
    1572:	f9 83       	std	Y+1, r31	; 0x01
    1574:	0d c0       	rjmp	.+26     	; 0x1590 <vfprintf+0x108>
    1576:	83 36       	cpi	r24, 0x63	; 99
    1578:	31 f0       	breq	.+12     	; 0x1586 <vfprintf+0xfe>
    157a:	83 37       	cpi	r24, 0x73	; 115
    157c:	71 f0       	breq	.+28     	; 0x159a <vfprintf+0x112>
    157e:	83 35       	cpi	r24, 0x53	; 83
    1580:	09 f0       	breq	.+2      	; 0x1584 <vfprintf+0xfc>
    1582:	5b c0       	rjmp	.+182    	; 0x163a <vfprintf+0x1b2>
    1584:	22 c0       	rjmp	.+68     	; 0x15ca <vfprintf+0x142>
    1586:	f8 01       	movw	r30, r16
    1588:	80 81       	ld	r24, Z
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	0e 5f       	subi	r16, 0xFE	; 254
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	44 24       	eor	r4, r4
    1592:	43 94       	inc	r4
    1594:	51 2c       	mov	r5, r1
    1596:	54 01       	movw	r10, r8
    1598:	15 c0       	rjmp	.+42     	; 0x15c4 <vfprintf+0x13c>
    159a:	38 01       	movw	r6, r16
    159c:	f2 e0       	ldi	r31, 0x02	; 2
    159e:	6f 0e       	add	r6, r31
    15a0:	71 1c       	adc	r7, r1
    15a2:	f8 01       	movw	r30, r16
    15a4:	a0 80       	ld	r10, Z
    15a6:	b1 80       	ldd	r11, Z+1	; 0x01
    15a8:	26 ff       	sbrs	r18, 6
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <vfprintf+0x12a>
    15ac:	65 2d       	mov	r22, r5
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x12e>
    15b2:	6f ef       	ldi	r22, 0xFF	; 255
    15b4:	7f ef       	ldi	r23, 0xFF	; 255
    15b6:	c5 01       	movw	r24, r10
    15b8:	2c 87       	std	Y+12, r18	; 0x0c
    15ba:	0e 94 21 0c 	call	0x1842	; 0x1842 <strnlen>
    15be:	2c 01       	movw	r4, r24
    15c0:	83 01       	movw	r16, r6
    15c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15c4:	2f 77       	andi	r18, 0x7F	; 127
    15c6:	22 2e       	mov	r2, r18
    15c8:	17 c0       	rjmp	.+46     	; 0x15f8 <vfprintf+0x170>
    15ca:	38 01       	movw	r6, r16
    15cc:	f2 e0       	ldi	r31, 0x02	; 2
    15ce:	6f 0e       	add	r6, r31
    15d0:	71 1c       	adc	r7, r1
    15d2:	f8 01       	movw	r30, r16
    15d4:	a0 80       	ld	r10, Z
    15d6:	b1 80       	ldd	r11, Z+1	; 0x01
    15d8:	26 ff       	sbrs	r18, 6
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <vfprintf+0x15a>
    15dc:	65 2d       	mov	r22, r5
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0x15e>
    15e2:	6f ef       	ldi	r22, 0xFF	; 255
    15e4:	7f ef       	ldi	r23, 0xFF	; 255
    15e6:	c5 01       	movw	r24, r10
    15e8:	2c 87       	std	Y+12, r18	; 0x0c
    15ea:	0e 94 16 0c 	call	0x182c	; 0x182c <strnlen_P>
    15ee:	2c 01       	movw	r4, r24
    15f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f2:	20 68       	ori	r18, 0x80	; 128
    15f4:	22 2e       	mov	r2, r18
    15f6:	83 01       	movw	r16, r6
    15f8:	23 fc       	sbrc	r2, 3
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <vfprintf+0x1aa>
    15fc:	83 2d       	mov	r24, r3
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	48 16       	cp	r4, r24
    1602:	59 06       	cpc	r5, r25
    1604:	b0 f4       	brcc	.+44     	; 0x1632 <vfprintf+0x1aa>
    1606:	b7 01       	movw	r22, r14
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1610:	3a 94       	dec	r3
    1612:	f4 cf       	rjmp	.-24     	; 0x15fc <vfprintf+0x174>
    1614:	f5 01       	movw	r30, r10
    1616:	27 fc       	sbrc	r2, 7
    1618:	85 91       	lpm	r24, Z+
    161a:	27 fe       	sbrs	r2, 7
    161c:	81 91       	ld	r24, Z+
    161e:	5f 01       	movw	r10, r30
    1620:	b7 01       	movw	r22, r14
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1628:	31 10       	cpse	r3, r1
    162a:	3a 94       	dec	r3
    162c:	f1 e0       	ldi	r31, 0x01	; 1
    162e:	4f 1a       	sub	r4, r31
    1630:	51 08       	sbc	r5, r1
    1632:	41 14       	cp	r4, r1
    1634:	51 04       	cpc	r5, r1
    1636:	71 f7       	brne	.-36     	; 0x1614 <vfprintf+0x18c>
    1638:	e5 c0       	rjmp	.+458    	; 0x1804 <vfprintf+0x37c>
    163a:	84 36       	cpi	r24, 0x64	; 100
    163c:	11 f0       	breq	.+4      	; 0x1642 <vfprintf+0x1ba>
    163e:	89 36       	cpi	r24, 0x69	; 105
    1640:	39 f5       	brne	.+78     	; 0x1690 <vfprintf+0x208>
    1642:	f8 01       	movw	r30, r16
    1644:	27 ff       	sbrs	r18, 7
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x1ce>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0c 5f       	subi	r16, 0xFC	; 252
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <vfprintf+0x1de>
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	88 27       	eor	r24, r24
    165c:	77 fd       	sbrc	r23, 7
    165e:	80 95       	com	r24
    1660:	98 2f       	mov	r25, r24
    1662:	0e 5f       	subi	r16, 0xFE	; 254
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	2f 76       	andi	r18, 0x6F	; 111
    1668:	b2 2e       	mov	r11, r18
    166a:	97 ff       	sbrs	r25, 7
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <vfprintf+0x1f8>
    166e:	90 95       	com	r25
    1670:	80 95       	com	r24
    1672:	70 95       	com	r23
    1674:	61 95       	neg	r22
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	20 68       	ori	r18, 0x80	; 128
    167e:	b2 2e       	mov	r11, r18
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	a4 01       	movw	r20, r8
    1686:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__ultoa_invert>
    168a:	a8 2e       	mov	r10, r24
    168c:	a8 18       	sub	r10, r8
    168e:	44 c0       	rjmp	.+136    	; 0x1718 <vfprintf+0x290>
    1690:	85 37       	cpi	r24, 0x75	; 117
    1692:	29 f4       	brne	.+10     	; 0x169e <vfprintf+0x216>
    1694:	2f 7e       	andi	r18, 0xEF	; 239
    1696:	b2 2e       	mov	r11, r18
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	25 c0       	rjmp	.+74     	; 0x16e8 <vfprintf+0x260>
    169e:	f2 2f       	mov	r31, r18
    16a0:	f9 7f       	andi	r31, 0xF9	; 249
    16a2:	bf 2e       	mov	r11, r31
    16a4:	8f 36       	cpi	r24, 0x6F	; 111
    16a6:	c1 f0       	breq	.+48     	; 0x16d8 <vfprintf+0x250>
    16a8:	18 f4       	brcc	.+6      	; 0x16b0 <vfprintf+0x228>
    16aa:	88 35       	cpi	r24, 0x58	; 88
    16ac:	79 f0       	breq	.+30     	; 0x16cc <vfprintf+0x244>
    16ae:	b4 c0       	rjmp	.+360    	; 0x1818 <vfprintf+0x390>
    16b0:	80 37       	cpi	r24, 0x70	; 112
    16b2:	19 f0       	breq	.+6      	; 0x16ba <vfprintf+0x232>
    16b4:	88 37       	cpi	r24, 0x78	; 120
    16b6:	21 f0       	breq	.+8      	; 0x16c0 <vfprintf+0x238>
    16b8:	af c0       	rjmp	.+350    	; 0x1818 <vfprintf+0x390>
    16ba:	2f 2f       	mov	r18, r31
    16bc:	20 61       	ori	r18, 0x10	; 16
    16be:	b2 2e       	mov	r11, r18
    16c0:	b4 fe       	sbrs	r11, 4
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <vfprintf+0x256>
    16c4:	8b 2d       	mov	r24, r11
    16c6:	84 60       	ori	r24, 0x04	; 4
    16c8:	b8 2e       	mov	r11, r24
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vfprintf+0x256>
    16cc:	24 ff       	sbrs	r18, 4
    16ce:	0a c0       	rjmp	.+20     	; 0x16e4 <vfprintf+0x25c>
    16d0:	9f 2f       	mov	r25, r31
    16d2:	96 60       	ori	r25, 0x06	; 6
    16d4:	b9 2e       	mov	r11, r25
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x25c>
    16d8:	28 e0       	ldi	r18, 0x08	; 8
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <vfprintf+0x260>
    16de:	20 e1       	ldi	r18, 0x10	; 16
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x260>
    16e4:	20 e1       	ldi	r18, 0x10	; 16
    16e6:	32 e0       	ldi	r19, 0x02	; 2
    16e8:	f8 01       	movw	r30, r16
    16ea:	b7 fe       	sbrs	r11, 7
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x274>
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	0c 5f       	subi	r16, 0xFC	; 252
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <vfprintf+0x280>
    16fc:	60 81       	ld	r22, Z
    16fe:	71 81       	ldd	r23, Z+1	; 0x01
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 5f       	subi	r16, 0xFE	; 254
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	a4 01       	movw	r20, r8
    170a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__ultoa_invert>
    170e:	a8 2e       	mov	r10, r24
    1710:	a8 18       	sub	r10, r8
    1712:	fb 2d       	mov	r31, r11
    1714:	ff 77       	andi	r31, 0x7F	; 127
    1716:	bf 2e       	mov	r11, r31
    1718:	b6 fe       	sbrs	r11, 6
    171a:	0b c0       	rjmp	.+22     	; 0x1732 <vfprintf+0x2aa>
    171c:	2b 2d       	mov	r18, r11
    171e:	2e 7f       	andi	r18, 0xFE	; 254
    1720:	a5 14       	cp	r10, r5
    1722:	50 f4       	brcc	.+20     	; 0x1738 <vfprintf+0x2b0>
    1724:	b4 fe       	sbrs	r11, 4
    1726:	0a c0       	rjmp	.+20     	; 0x173c <vfprintf+0x2b4>
    1728:	b2 fc       	sbrc	r11, 2
    172a:	08 c0       	rjmp	.+16     	; 0x173c <vfprintf+0x2b4>
    172c:	2b 2d       	mov	r18, r11
    172e:	2e 7e       	andi	r18, 0xEE	; 238
    1730:	05 c0       	rjmp	.+10     	; 0x173c <vfprintf+0x2b4>
    1732:	7a 2c       	mov	r7, r10
    1734:	2b 2d       	mov	r18, r11
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x2b6>
    1738:	7a 2c       	mov	r7, r10
    173a:	01 c0       	rjmp	.+2      	; 0x173e <vfprintf+0x2b6>
    173c:	75 2c       	mov	r7, r5
    173e:	24 ff       	sbrs	r18, 4
    1740:	0d c0       	rjmp	.+26     	; 0x175c <vfprintf+0x2d4>
    1742:	fe 01       	movw	r30, r28
    1744:	ea 0d       	add	r30, r10
    1746:	f1 1d       	adc	r31, r1
    1748:	80 81       	ld	r24, Z
    174a:	80 33       	cpi	r24, 0x30	; 48
    174c:	11 f4       	brne	.+4      	; 0x1752 <vfprintf+0x2ca>
    174e:	29 7e       	andi	r18, 0xE9	; 233
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <vfprintf+0x2dc>
    1752:	22 ff       	sbrs	r18, 2
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x2da>
    1756:	73 94       	inc	r7
    1758:	73 94       	inc	r7
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <vfprintf+0x2dc>
    175c:	82 2f       	mov	r24, r18
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x2dc>
    1762:	73 94       	inc	r7
    1764:	23 fd       	sbrc	r18, 3
    1766:	13 c0       	rjmp	.+38     	; 0x178e <vfprintf+0x306>
    1768:	20 ff       	sbrs	r18, 0
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x2f0>
    176c:	5a 2c       	mov	r5, r10
    176e:	73 14       	cp	r7, r3
    1770:	18 f4       	brcc	.+6      	; 0x1778 <vfprintf+0x2f0>
    1772:	53 0c       	add	r5, r3
    1774:	57 18       	sub	r5, r7
    1776:	73 2c       	mov	r7, r3
    1778:	73 14       	cp	r7, r3
    177a:	68 f4       	brcc	.+26     	; 0x1796 <vfprintf+0x30e>
    177c:	b7 01       	movw	r22, r14
    177e:	80 e2       	ldi	r24, 0x20	; 32
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	2c 87       	std	Y+12, r18	; 0x0c
    1784:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1788:	73 94       	inc	r7
    178a:	2c 85       	ldd	r18, Y+12	; 0x0c
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <vfprintf+0x2f0>
    178e:	73 14       	cp	r7, r3
    1790:	10 f4       	brcc	.+4      	; 0x1796 <vfprintf+0x30e>
    1792:	37 18       	sub	r3, r7
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <vfprintf+0x310>
    1796:	31 2c       	mov	r3, r1
    1798:	24 ff       	sbrs	r18, 4
    179a:	12 c0       	rjmp	.+36     	; 0x17c0 <vfprintf+0x338>
    179c:	b7 01       	movw	r22, r14
    179e:	80 e3       	ldi	r24, 0x30	; 48
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	2c 87       	std	Y+12, r18	; 0x0c
    17a4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17aa:	22 ff       	sbrs	r18, 2
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <vfprintf+0x354>
    17ae:	21 ff       	sbrs	r18, 1
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <vfprintf+0x330>
    17b2:	88 e5       	ldi	r24, 0x58	; 88
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x334>
    17b8:	88 e7       	ldi	r24, 0x78	; 120
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	b7 01       	movw	r22, r14
    17be:	0c c0       	rjmp	.+24     	; 0x17d8 <vfprintf+0x350>
    17c0:	82 2f       	mov	r24, r18
    17c2:	86 78       	andi	r24, 0x86	; 134
    17c4:	59 f0       	breq	.+22     	; 0x17dc <vfprintf+0x354>
    17c6:	21 fd       	sbrc	r18, 1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x346>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x348>
    17ce:	8b e2       	ldi	r24, 0x2B	; 43
    17d0:	27 fd       	sbrc	r18, 7
    17d2:	8d e2       	ldi	r24, 0x2D	; 45
    17d4:	b7 01       	movw	r22, r14
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17dc:	a5 14       	cp	r10, r5
    17de:	38 f4       	brcc	.+14     	; 0x17ee <vfprintf+0x366>
    17e0:	b7 01       	movw	r22, r14
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17ea:	5a 94       	dec	r5
    17ec:	f7 cf       	rjmp	.-18     	; 0x17dc <vfprintf+0x354>
    17ee:	aa 94       	dec	r10
    17f0:	f4 01       	movw	r30, r8
    17f2:	ea 0d       	add	r30, r10
    17f4:	f1 1d       	adc	r31, r1
    17f6:	80 81       	ld	r24, Z
    17f8:	b7 01       	movw	r22, r14
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1800:	a1 10       	cpse	r10, r1
    1802:	f5 cf       	rjmp	.-22     	; 0x17ee <vfprintf+0x366>
    1804:	33 20       	and	r3, r3
    1806:	09 f4       	brne	.+2      	; 0x180a <vfprintf+0x382>
    1808:	51 ce       	rjmp	.-862    	; 0x14ac <vfprintf+0x24>
    180a:	b7 01       	movw	r22, r14
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1814:	3a 94       	dec	r3
    1816:	f6 cf       	rjmp	.-20     	; 0x1804 <vfprintf+0x37c>
    1818:	f7 01       	movw	r30, r14
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x39c>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	2c 96       	adiw	r28, 0x0c	; 12
    1826:	e2 e1       	ldi	r30, 0x12	; 18
    1828:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__epilogue_restores__>

0000182c <strnlen_P>:
    182c:	fc 01       	movw	r30, r24
    182e:	05 90       	lpm	r0, Z+
    1830:	61 50       	subi	r22, 0x01	; 1
    1832:	70 40       	sbci	r23, 0x00	; 0
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen_P+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <strnlen>:
    1842:	fc 01       	movw	r30, r24
    1844:	61 50       	subi	r22, 0x01	; 1
    1846:	70 40       	sbci	r23, 0x00	; 0
    1848:	01 90       	ld	r0, Z+
    184a:	01 10       	cpse	r0, r1
    184c:	d8 f7       	brcc	.-10     	; 0x1844 <strnlen+0x2>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	08 95       	ret

00001858 <fputc>:
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	18 2f       	mov	r17, r24
    1862:	09 2f       	mov	r16, r25
    1864:	eb 01       	movw	r28, r22
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	81 fd       	sbrc	r24, 1
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <fputc+0x1a>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	20 c0       	rjmp	.+64     	; 0x18b2 <fputc+0x5a>
    1872:	82 ff       	sbrs	r24, 2
    1874:	10 c0       	rjmp	.+32     	; 0x1896 <fputc+0x3e>
    1876:	4e 81       	ldd	r20, Y+6	; 0x06
    1878:	5f 81       	ldd	r21, Y+7	; 0x07
    187a:	2c 81       	ldd	r18, Y+4	; 0x04
    187c:	3d 81       	ldd	r19, Y+5	; 0x05
    187e:	42 17       	cp	r20, r18
    1880:	53 07       	cpc	r21, r19
    1882:	7c f4       	brge	.+30     	; 0x18a2 <fputc+0x4a>
    1884:	e8 81       	ld	r30, Y
    1886:	f9 81       	ldd	r31, Y+1	; 0x01
    1888:	9f 01       	movw	r18, r30
    188a:	2f 5f       	subi	r18, 0xFF	; 255
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	39 83       	std	Y+1, r19	; 0x01
    1890:	28 83       	st	Y, r18
    1892:	10 83       	st	Z, r17
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <fputc+0x4a>
    1896:	e8 85       	ldd	r30, Y+8	; 0x08
    1898:	f9 85       	ldd	r31, Y+9	; 0x09
    189a:	81 2f       	mov	r24, r17
    189c:	09 95       	icall
    189e:	89 2b       	or	r24, r25
    18a0:	29 f7       	brne	.-54     	; 0x186c <fputc+0x14>
    18a2:	2e 81       	ldd	r18, Y+6	; 0x06
    18a4:	3f 81       	ldd	r19, Y+7	; 0x07
    18a6:	2f 5f       	subi	r18, 0xFF	; 255
    18a8:	3f 4f       	sbci	r19, 0xFF	; 255
    18aa:	3f 83       	std	Y+7, r19	; 0x07
    18ac:	2e 83       	std	Y+6, r18	; 0x06
    18ae:	81 2f       	mov	r24, r17
    18b0:	90 2f       	mov	r25, r16
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	08 95       	ret

000018bc <__ultoa_invert>:
    18bc:	fa 01       	movw	r30, r20
    18be:	aa 27       	eor	r26, r26
    18c0:	28 30       	cpi	r18, 0x08	; 8
    18c2:	51 f1       	breq	.+84     	; 0x1918 <__ultoa_invert+0x5c>
    18c4:	20 31       	cpi	r18, 0x10	; 16
    18c6:	81 f1       	breq	.+96     	; 0x1928 <__ultoa_invert+0x6c>
    18c8:	e8 94       	clt
    18ca:	6f 93       	push	r22
    18cc:	6e 7f       	andi	r22, 0xFE	; 254
    18ce:	6e 5f       	subi	r22, 0xFE	; 254
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	af 4f       	sbci	r26, 0xFF	; 255
    18d8:	b1 e0       	ldi	r27, 0x01	; 1
    18da:	3e d0       	rcall	.+124    	; 0x1958 <__ultoa_invert+0x9c>
    18dc:	b4 e0       	ldi	r27, 0x04	; 4
    18de:	3c d0       	rcall	.+120    	; 0x1958 <__ultoa_invert+0x9c>
    18e0:	67 0f       	add	r22, r23
    18e2:	78 1f       	adc	r23, r24
    18e4:	89 1f       	adc	r24, r25
    18e6:	9a 1f       	adc	r25, r26
    18e8:	a1 1d       	adc	r26, r1
    18ea:	68 0f       	add	r22, r24
    18ec:	79 1f       	adc	r23, r25
    18ee:	8a 1f       	adc	r24, r26
    18f0:	91 1d       	adc	r25, r1
    18f2:	a1 1d       	adc	r26, r1
    18f4:	6a 0f       	add	r22, r26
    18f6:	71 1d       	adc	r23, r1
    18f8:	81 1d       	adc	r24, r1
    18fa:	91 1d       	adc	r25, r1
    18fc:	a1 1d       	adc	r26, r1
    18fe:	20 d0       	rcall	.+64     	; 0x1940 <__ultoa_invert+0x84>
    1900:	09 f4       	brne	.+2      	; 0x1904 <__ultoa_invert+0x48>
    1902:	68 94       	set
    1904:	3f 91       	pop	r19
    1906:	2a e0       	ldi	r18, 0x0A	; 10
    1908:	26 9f       	mul	r18, r22
    190a:	11 24       	eor	r1, r1
    190c:	30 19       	sub	r19, r0
    190e:	30 5d       	subi	r19, 0xD0	; 208
    1910:	31 93       	st	Z+, r19
    1912:	de f6       	brtc	.-74     	; 0x18ca <__ultoa_invert+0xe>
    1914:	cf 01       	movw	r24, r30
    1916:	08 95       	ret
    1918:	46 2f       	mov	r20, r22
    191a:	47 70       	andi	r20, 0x07	; 7
    191c:	40 5d       	subi	r20, 0xD0	; 208
    191e:	41 93       	st	Z+, r20
    1920:	b3 e0       	ldi	r27, 0x03	; 3
    1922:	0f d0       	rcall	.+30     	; 0x1942 <__ultoa_invert+0x86>
    1924:	c9 f7       	brne	.-14     	; 0x1918 <__ultoa_invert+0x5c>
    1926:	f6 cf       	rjmp	.-20     	; 0x1914 <__ultoa_invert+0x58>
    1928:	46 2f       	mov	r20, r22
    192a:	4f 70       	andi	r20, 0x0F	; 15
    192c:	40 5d       	subi	r20, 0xD0	; 208
    192e:	4a 33       	cpi	r20, 0x3A	; 58
    1930:	18 f0       	brcs	.+6      	; 0x1938 <__ultoa_invert+0x7c>
    1932:	49 5d       	subi	r20, 0xD9	; 217
    1934:	31 fd       	sbrc	r19, 1
    1936:	40 52       	subi	r20, 0x20	; 32
    1938:	41 93       	st	Z+, r20
    193a:	02 d0       	rcall	.+4      	; 0x1940 <__ultoa_invert+0x84>
    193c:	a9 f7       	brne	.-22     	; 0x1928 <__ultoa_invert+0x6c>
    193e:	ea cf       	rjmp	.-44     	; 0x1914 <__ultoa_invert+0x58>
    1940:	b4 e0       	ldi	r27, 0x04	; 4
    1942:	a6 95       	lsr	r26
    1944:	97 95       	ror	r25
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	ba 95       	dec	r27
    194e:	c9 f7       	brne	.-14     	; 0x1942 <__ultoa_invert+0x86>
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	61 05       	cpc	r22, r1
    1954:	71 05       	cpc	r23, r1
    1956:	08 95       	ret
    1958:	9b 01       	movw	r18, r22
    195a:	ac 01       	movw	r20, r24
    195c:	0a 2e       	mov	r0, r26
    195e:	06 94       	lsr	r0
    1960:	57 95       	ror	r21
    1962:	47 95       	ror	r20
    1964:	37 95       	ror	r19
    1966:	27 95       	ror	r18
    1968:	ba 95       	dec	r27
    196a:	c9 f7       	brne	.-14     	; 0x195e <__ultoa_invert+0xa2>
    196c:	62 0f       	add	r22, r18
    196e:	73 1f       	adc	r23, r19
    1970:	84 1f       	adc	r24, r20
    1972:	95 1f       	adc	r25, r21
    1974:	a0 1d       	adc	r26, r0
    1976:	08 95       	ret

00001978 <__prologue_saves__>:
    1978:	2f 92       	push	r2
    197a:	3f 92       	push	r3
    197c:	4f 92       	push	r4
    197e:	5f 92       	push	r5
    1980:	6f 92       	push	r6
    1982:	7f 92       	push	r7
    1984:	8f 92       	push	r8
    1986:	9f 92       	push	r9
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	ca 1b       	sub	r28, r26
    19a2:	db 0b       	sbc	r29, r27
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	09 94       	ijmp

000019b0 <__epilogue_restores__>:
    19b0:	2a 88       	ldd	r2, Y+18	; 0x12
    19b2:	39 88       	ldd	r3, Y+17	; 0x11
    19b4:	48 88       	ldd	r4, Y+16	; 0x10
    19b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    19b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    19bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    19be:	9b 84       	ldd	r9, Y+11	; 0x0b
    19c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    19c2:	b9 84       	ldd	r11, Y+9	; 0x09
    19c4:	c8 84       	ldd	r12, Y+8	; 0x08
    19c6:	df 80       	ldd	r13, Y+7	; 0x07
    19c8:	ee 80       	ldd	r14, Y+6	; 0x06
    19ca:	fd 80       	ldd	r15, Y+5	; 0x05
    19cc:	0c 81       	ldd	r16, Y+4	; 0x04
    19ce:	1b 81       	ldd	r17, Y+3	; 0x03
    19d0:	aa 81       	ldd	r26, Y+2	; 0x02
    19d2:	b9 81       	ldd	r27, Y+1	; 0x01
    19d4:	ce 0f       	add	r28, r30
    19d6:	d1 1d       	adc	r29, r1
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	ed 01       	movw	r28, r26
    19e4:	08 95       	ret

000019e6 <_exit>:
    19e6:	f8 94       	cli

000019e8 <__stop_program>:
    19e8:	ff cf       	rjmp	.-2      	; 0x19e8 <__stop_program>
