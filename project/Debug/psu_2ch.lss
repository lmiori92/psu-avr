
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000012e2  00001376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  0080016a  0080016a  000013e0  2**0
                  ALLOC
  3 .stab         000020ac  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ab  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 36       	cpi	r26, 0x6A	; 106
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e6       	ldi	r26, 0x6A	; 106
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 31       	cpi	r26, 0x16	; 22
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
      9e:	0c 94 6f 09 	jmp	0x12de	; 0x12de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      c8:	80 91 7a 01 	lds	r24, 0x017A
      cc:	88 23       	and	r24, r24
      ce:	c1 f0       	breq	.+48     	; 0x100 <__vector_21+0x5a>
        adc_mux_switch = true;
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
      d0:	10 92 7a 01 	sts	0x017A, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
      d4:	80 91 7a 00 	lds	r24, 0x007A
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 93 7a 00 	sts	0x007A, r24

}
      de:	ff 91       	pop	r31
      e0:	ef 91       	pop	r30
      e2:	bf 91       	pop	r27
      e4:	af 91       	pop	r26
      e6:	9f 91       	pop	r25
      e8:	8f 91       	pop	r24
      ea:	7f 91       	pop	r23
      ec:	6f 91       	pop	r22
      ee:	5f 91       	pop	r21
      f0:	4f 91       	pop	r20
      f2:	3f 91       	pop	r19
      f4:	2f 91       	pop	r18
      f6:	0f 90       	pop	r0
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
     100:	80 91 7b 01 	lds	r24, 0x017B
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	20 91 78 00 	lds	r18, 0x0078
     10a:	40 91 79 00 	lds	r20, 0x0079
     10e:	fc 01       	movw	r30, r24
     110:	ee 0f       	add	r30, r30
     112:	ff 1f       	adc	r31, r31
     114:	e2 59       	subi	r30, 0x92	; 146
     116:	fe 4f       	sbci	r31, 0xFE	; 254
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	34 2b       	or	r19, r20
     11c:	31 83       	std	Z+1, r19	; 0x01
     11e:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	0e 94 2c 04 	call	0x858	; 0x858 <__divmodhi4>
     12a:	80 93 7b 01 	sts	0x017B, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     12e:	80 91 7c 00 	lds	r24, 0x007C
     132:	80 7f       	andi	r24, 0xF0	; 240
     134:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adc_mux_index;
     138:	80 91 7c 00 	lds	r24, 0x007C
     13c:	90 91 7b 01 	lds	r25, 0x017B
     140:	89 2b       	or	r24, r25
     142:	80 93 7c 00 	sts	0x007C, r24
        adc_mux_switch = true;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 7a 01 	sts	0x017A, r24
     14c:	c3 cf       	rjmp	.-122    	; 0xd4 <__vector_21+0x2e>

0000014e <adc_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     14e:	ec e7       	ldi	r30, 0x7C	; 124
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 71       	andi	r24, 0x10	; 16
     156:	80 83       	st	Z, r24

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     168:	80 81       	ld	r24, Z
     16a:	8f 64       	ori	r24, 0x4F	; 79
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <adc_periodic>:
#endif

}

void adc_periodic(void)
{
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
    /* STUB */
    static uint32_t ts = 0;
    uint8_t i = 0;
    if (g_timestamp > (ts + 1000000))
     17c:	40 91 0c 02 	lds	r20, 0x020C
     180:	50 91 0d 02 	lds	r21, 0x020D
     184:	60 91 0e 02 	lds	r22, 0x020E
     188:	70 91 0f 02 	lds	r23, 0x020F
     18c:	80 91 6a 01 	lds	r24, 0x016A
     190:	90 91 6b 01 	lds	r25, 0x016B
     194:	a0 91 6c 01 	lds	r26, 0x016C
     198:	b0 91 6d 01 	lds	r27, 0x016D
     19c:	80 5c       	subi	r24, 0xC0	; 192
     19e:	9d 4b       	sbci	r25, 0xBD	; 189
     1a0:	a0 4f       	sbci	r26, 0xF0	; 240
     1a2:	bf 4f       	sbci	r27, 0xFF	; 255
     1a4:	84 17       	cp	r24, r20
     1a6:	95 07       	cpc	r25, r21
     1a8:	a6 07       	cpc	r26, r22
     1aa:	b7 07       	cpc	r27, r23
     1ac:	38 f5       	brcc	.+78     	; 0x1fc <adc_periodic+0x8c>
    {
        ts = g_timestamp;
     1ae:	40 93 6a 01 	sts	0x016A, r20
     1b2:	50 93 6b 01 	sts	0x016B, r21
     1b6:	60 93 6c 01 	sts	0x016C, r22
     1ba:	70 93 6d 01 	sts	0x016D, r23
     1be:	0e e6       	ldi	r16, 0x6E	; 110
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	c0 e0       	ldi	r28, 0x00	; 0
     1c4:	d0 e0       	ldi	r29, 0x00	; 0
        for (i = 0; i < ADC_NUM; i++)
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
     1c6:	4c e1       	ldi	r20, 0x1C	; 28
     1c8:	e4 2e       	mov	r14, r20
     1ca:	41 e0       	ldi	r20, 0x01	; 1
     1cc:	f4 2e       	mov	r15, r20
     1ce:	f8 01       	movw	r30, r16
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	0e 5f       	subi	r16, 0xFE	; 254
     1d6:	1f 4f       	sbci	r17, 0xFF	; 255
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	ff 92       	push	r15
     1e2:	ef 92       	push	r14
     1e4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printf>
     1e8:	21 96       	adiw	r28, 0x01	; 1
    static uint32_t ts = 0;
    uint8_t i = 0;
    if (g_timestamp > (ts + 1000000))
    {
        ts = g_timestamp;
        for (i = 0; i < ADC_NUM; i++)
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	c6 30       	cpi	r28, 0x06	; 6
     1f8:	d1 05       	cpc	r29, r1
     1fa:	49 f7       	brne	.-46     	; 0x1ce <adc_periodic+0x5e>
        {
            printf("%d: %d\r\n", i, adc_samples[i]);
        }
    }
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	08 95       	ret

0000020a <adc_get>:

uint16_t adc_get(e_adc_channel channel)
{
    return adc_samples[channel];
     20a:	e8 2f       	mov	r30, r24
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	e2 59       	subi	r30, 0x92	; 146
     214:	fe 4f       	sbci	r31, 0xFE	; 254
}
     216:	80 81       	ld	r24, Z
     218:	91 81       	ldd	r25, Z+1	; 0x01
     21a:	08 95       	ret

0000021c <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     21c:	08 95       	ret

0000021e <adc_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void adc_last_reset(void)
{
     21e:	08 95       	ret

00000220 <readVcc>:
  #elif defined (__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
    ADMUX = _BV(MUX5) | _BV(MUX0);
  #elif defined (__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
    ADMUX = _BV(MUX3) | _BV(MUX2);
  #else
    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
     220:	8e e4       	ldi	r24, 0x4E	; 78
     222:	80 93 7c 00 	sts	0x007C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	8f e3       	ldi	r24, 0x3F	; 63
     228:	9f e1       	ldi	r25, 0x1F	; 31
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <readVcc+0xa>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <readVcc+0x10>
     230:	00 00       	nop
  #endif

  _delay_ms(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
     232:	80 91 7a 00 	lds	r24, 0x007A
     236:	80 64       	ori	r24, 0x40	; 64
     238:	80 93 7a 00 	sts	0x007A, r24
  while (bit_is_set(ADCSRA,ADSC)); // measuring
     23c:	80 91 7a 00 	lds	r24, 0x007A
     240:	86 fd       	sbrc	r24, 6
     242:	fc cf       	rjmp	.-8      	; 0x23c <readVcc+0x1c>

  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH
     244:	20 91 78 00 	lds	r18, 0x0078
  uint8_t high = ADCH; // unlocks both
     248:	80 91 79 00 	lds	r24, 0x0079

  long result = (high<<8) | low;
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	38 2b       	or	r19, r24
     250:	44 27       	eor	r20, r20
     252:	37 fd       	sbrc	r19, 7
     254:	40 95       	com	r20
     256:	54 2f       	mov	r21, r20

  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
     258:	64 eb       	ldi	r22, 0xB4	; 180
     25a:	7b e2       	ldi	r23, 0x2B	; 43
     25c:	81 e1       	ldi	r24, 0x11	; 17
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 40 04 	call	0x880	; 0x880 <__divmodsi4>
  return result; // Vcc in millivolts
}
     264:	ca 01       	movw	r24, r20
     266:	b9 01       	movw	r22, r18
     268:	08 95       	ret

0000026a <lib_limit>:

/* GLOBALS */
static t_psu_channel psu_channels[PSU_CHANNEL_NUM];

void lib_limit(t_value *value, t_value_scale *scale)
{
     26a:	fc 01       	movw	r30, r24
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	db 01       	movw	r26, r22
     272:	12 96       	adiw	r26, 0x02	; 2
     274:	2d 91       	ld	r18, X+
     276:	3c 91       	ld	r19, X
     278:	13 97       	sbiw	r26, 0x03	; 3
     27a:	82 17       	cp	r24, r18
     27c:	93 07       	cpc	r25, r19
     27e:	10 f4       	brcc	.+4      	; 0x284 <lib_limit+0x1a>
     280:	33 83       	std	Z+3, r19	; 0x03
     282:	22 83       	std	Z+2, r18	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     284:	db 01       	movw	r26, r22
     286:	14 96       	adiw	r26, 0x04	; 4
     288:	2d 91       	ld	r18, X+
     28a:	3c 91       	ld	r19, X
     28c:	15 97       	sbiw	r26, 0x05	; 5
     28e:	28 17       	cp	r18, r24
     290:	39 07       	cpc	r19, r25
     292:	10 f4       	brcc	.+4      	; 0x298 <lib_limit+0x2e>
     294:	33 83       	std	Z+3, r19	; 0x03
     296:	22 83       	std	Z+2, r18	; 0x02
     298:	08 95       	ret

0000029a <lib_scale>:
}

void lib_scale(t_value *value, t_value_scale *scale)
{
     29a:	2f 92       	push	r2
     29c:	3f 92       	push	r3
     29e:	4f 92       	push	r4
     2a0:	5f 92       	push	r5
     2a2:	6f 92       	push	r6
     2a4:	7f 92       	push	r7
     2a6:	8f 92       	push	r8
     2a8:	9f 92       	push	r9
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <lib_scale+0x26>
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	3b 01       	movw	r6, r22
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     2ca:	fb 01       	movw	r30, r22
     2cc:	26 80       	ldd	r2, Z+6	; 0x06
     2ce:	37 80       	ldd	r3, Z+7	; 0x07
     2d0:	02 81       	ldd	r16, Z+2	; 0x02
     2d2:	13 81       	ldd	r17, Z+3	; 0x03

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     2d4:	fc 01       	movw	r30, r24
     2d6:	60 81       	ld	r22, Z
     2d8:	71 81       	ldd	r23, Z+1	; 0x01
     2da:	60 1b       	sub	r22, r16
     2dc:	71 0b       	sbc	r23, r17
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__floatunsisf>
     2e6:	6b 01       	movw	r12, r22
     2e8:	7c 01       	movw	r14, r24
}

void lib_scale(t_value *value, t_value_scale *scale)
{
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     2ea:	f3 01       	movw	r30, r6
     2ec:	60 85       	ldd	r22, Z+8	; 0x08
     2ee:	71 85       	ldd	r23, Z+9	; 0x09
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__floatunsisf>
     2f8:	4b 01       	movw	r8, r22
     2fa:	5c 01       	movw	r10, r24
     2fc:	b1 01       	movw	r22, r2
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__floatunsisf>
     306:	9b 01       	movw	r18, r22
     308:	ac 01       	movw	r20, r24
     30a:	c5 01       	movw	r24, r10
     30c:	b4 01       	movw	r22, r8
     30e:	0e 94 95 04 	call	0x92a	; 0x92a <__subsf3>
     312:	4b 01       	movw	r8, r22
     314:	5c 01       	movw	r10, r24
     316:	f3 01       	movw	r30, r6
     318:	64 81       	ldd	r22, Z+4	; 0x04
     31a:	75 81       	ldd	r23, Z+5	; 0x05
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__floatunsisf>
     324:	2b 01       	movw	r4, r22
     326:	3c 01       	movw	r6, r24
     328:	b8 01       	movw	r22, r16
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__floatunsisf>
     332:	9b 01       	movw	r18, r22
     334:	ac 01       	movw	r20, r24
     336:	c3 01       	movw	r24, r6
     338:	b2 01       	movw	r22, r4
     33a:	0e 94 95 04 	call	0x92a	; 0x92a <__subsf3>
     33e:	9b 01       	movw	r18, r22
     340:	ac 01       	movw	r20, r24
     342:	c5 01       	movw	r24, r10
     344:	b4 01       	movw	r22, r8
     346:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__divsf3>
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     34e:	c7 01       	movw	r24, r14
     350:	b6 01       	movw	r22, r12
     352:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
     356:	0e 94 62 05 	call	0xac4	; 0xac4 <__fixunssfsi>
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     35a:	62 0d       	add	r22, r2
     35c:	73 1d       	adc	r23, r3
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     35e:	e9 81       	ldd	r30, Y+1	; 0x01
     360:	fa 81       	ldd	r31, Y+2	; 0x02
     362:	73 83       	std	Z+3, r23	; 0x03
     364:	62 83       	std	Z+2, r22	; 0x02
}
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	6f 90       	pop	r6
     386:	5f 90       	pop	r5
     388:	4f 90       	pop	r4
     38a:	3f 90       	pop	r3
     38c:	2f 90       	pop	r2
     38e:	08 95       	ret

00000390 <main>:

int main(void)
{

    /* System init */
    system_init();
     390:	0e 94 92 03 	call	0x724	; 0x724 <system_init>
}

static void init_io(void)
{

    cli();
     394:	f8 94       	cli

    /* UART */
    uart_init();
     396:	0e 94 ff 03 	call	0x7fe	; 0x7fe <uart_init>
    stdout = &uart_output;
     39a:	8e e0       	ldi	r24, 0x0E	; 14
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	90 93 13 02 	sts	0x0213, r25
     3a2:	80 93 12 02 	sts	0x0212, r24
    stdin  = &uart_input;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	90 93 11 02 	sts	0x0211, r25
     3ae:	80 93 10 02 	sts	0x0210, r24

    /* ADC */
    adc_init();
     3b2:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>

    /* PWM */
    pwm_init();
     3b6:	0e 94 0f 03 	call	0x61e	; 0x61e <pwm_init>

    /* System timer */
    timer_init();
     3ba:	0e 94 95 03 	call	0x72a	; 0x72a <timer_init>

    sei();
     3be:	78 94       	sei
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->voltage_adc_channel = ADC_0;
     3c0:	10 92 98 01 	sts	0x0198, r1
            channel->current_adc_channel = ADC_1;
     3c4:	dd 24       	eor	r13, r13
     3c6:	d3 94       	inc	r13
     3c8:	d0 92 b6 01 	sts	0x01B6, r13
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     3cc:	10 92 99 01 	sts	0x0199, r1
            channel->current_pwm_channel = PWM_CHANNEL_2;
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	c8 2e       	mov	r12, r24
     3d4:	c0 92 b7 01 	sts	0x01B7, r12
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     3d8:	10 92 8d 01 	sts	0x018D, r1
     3dc:	10 92 8c 01 	sts	0x018C, r1
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     3e0:	0f ef       	ldi	r16, 0xFF	; 255
     3e2:	13 e0       	ldi	r17, 0x03	; 3
     3e4:	10 93 8f 01 	sts	0x018F, r17
     3e8:	00 93 8e 01 	sts	0x018E, r16
    channel->voltage_readout.scale.min_scaled = 0;
     3ec:	10 92 91 01 	sts	0x0191, r1
     3f0:	10 92 90 01 	sts	0x0190, r1
    channel->voltage_readout.scale.max_scaled = 28500;//25575;  /* Voltage */
     3f4:	c4 e5       	ldi	r28, 0x54	; 84
     3f6:	df e6       	ldi	r29, 0x6F	; 111
     3f8:	d0 93 93 01 	sts	0x0193, r29
     3fc:	c0 93 92 01 	sts	0x0192, r28

    channel->current_readout.scale.min = 0;
     400:	10 92 ab 01 	sts	0x01AB, r1
     404:	10 92 aa 01 	sts	0x01AA, r1
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     408:	10 93 ad 01 	sts	0x01AD, r17
     40c:	00 93 ac 01 	sts	0x01AC, r16
    channel->current_readout.scale.min_scaled = 0;
     410:	10 92 af 01 	sts	0x01AF, r1
     414:	10 92 ae 01 	sts	0x01AE, r1
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     418:	e1 2c       	mov	r14, r1
     41a:	98 e0       	ldi	r25, 0x08	; 8
     41c:	f9 2e       	mov	r15, r25
     41e:	f0 92 b1 01 	sts	0x01B1, r15
     422:	e0 92 b0 01 	sts	0x01B0, r14

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     426:	10 92 7f 01 	sts	0x017F, r1
     42a:	10 92 7e 01 	sts	0x017E, r1
    channel->voltage_setpoint.scale.max = 28500;
     42e:	d0 93 81 01 	sts	0x0181, r29
     432:	c0 93 80 01 	sts	0x0180, r28
    channel->voltage_setpoint.scale.min_scaled = 0;
     436:	10 92 83 01 	sts	0x0183, r1
     43a:	10 92 82 01 	sts	0x0182, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pwm_get_resolution>
     444:	90 93 85 01 	sts	0x0185, r25
     448:	80 93 84 01 	sts	0x0184, r24

    channel->current_setpoint.scale.min = 0;
     44c:	10 92 9d 01 	sts	0x019D, r1
     450:	10 92 9c 01 	sts	0x019C, r1
    channel->current_setpoint.scale.max = 28500;
     454:	d0 93 9f 01 	sts	0x019F, r29
     458:	c0 93 9e 01 	sts	0x019E, r28
    channel->current_setpoint.scale.min_scaled = 0;
     45c:	10 92 a1 01 	sts	0x01A1, r1
     460:	10 92 a0 01 	sts	0x01A0, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     464:	80 91 b7 01 	lds	r24, 0x01B7
     468:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pwm_get_resolution>
     46c:	90 93 a3 01 	sts	0x01A3, r25
     470:	80 93 a2 01 	sts	0x01A2, r24
            channel->current_adc_channel = ADC_1;
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
            channel->current_pwm_channel = PWM_CHANNEL_2;
            break;
        case PSU_CHANNEL_1:
            channel->voltage_adc_channel = ADC_2;
     474:	c0 92 d4 01 	sts	0x01D4, r12
            channel->current_adc_channel = ADC_3;
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	80 93 f2 01 	sts	0x01F2, r24
            channel->voltage_pwm_channel = PWM_CHANNEL_1;
     47e:	d0 92 d5 01 	sts	0x01D5, r13
            channel->current_pwm_channel = PWM_CHANNEL_3;
     482:	80 93 f3 01 	sts	0x01F3, r24
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     486:	10 92 c9 01 	sts	0x01C9, r1
     48a:	10 92 c8 01 	sts	0x01C8, r1
    channel->voltage_readout.scale.max = 1023;  /* ADC steps */
     48e:	10 93 cb 01 	sts	0x01CB, r17
     492:	00 93 ca 01 	sts	0x01CA, r16
    channel->voltage_readout.scale.min_scaled = 0;
     496:	10 92 cd 01 	sts	0x01CD, r1
     49a:	10 92 cc 01 	sts	0x01CC, r1
    channel->voltage_readout.scale.max_scaled = 28500;//25575;  /* Voltage */
     49e:	d0 93 cf 01 	sts	0x01CF, r29
     4a2:	c0 93 ce 01 	sts	0x01CE, r28

    channel->current_readout.scale.min = 0;
     4a6:	10 92 e7 01 	sts	0x01E7, r1
     4aa:	10 92 e6 01 	sts	0x01E6, r1
    channel->current_readout.scale.max = 1023;  /* ADC steps */
     4ae:	10 93 e9 01 	sts	0x01E9, r17
     4b2:	00 93 e8 01 	sts	0x01E8, r16
    channel->current_readout.scale.min_scaled = 0;
     4b6:	10 92 eb 01 	sts	0x01EB, r1
     4ba:	10 92 ea 01 	sts	0x01EA, r1
    channel->current_readout.scale.max_scaled = 2048;  /* Voltage */
     4be:	f0 92 ed 01 	sts	0x01ED, r15
     4c2:	e0 92 ec 01 	sts	0x01EC, r14

    channel->voltage_setpoint.scale.min = channel->voltage_readout.scale.min_scaled;
     4c6:	10 92 bb 01 	sts	0x01BB, r1
     4ca:	10 92 ba 01 	sts	0x01BA, r1
    channel->voltage_setpoint.scale.max = 28500;
     4ce:	d0 93 bd 01 	sts	0x01BD, r29
     4d2:	c0 93 bc 01 	sts	0x01BC, r28
    channel->voltage_setpoint.scale.min_scaled = 0;
     4d6:	10 92 bf 01 	sts	0x01BF, r1
     4da:	10 92 be 01 	sts	0x01BE, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pwm_get_resolution>
     4e4:	90 93 c1 01 	sts	0x01C1, r25
     4e8:	80 93 c0 01 	sts	0x01C0, r24

    channel->current_setpoint.scale.min = 0;
     4ec:	10 92 d9 01 	sts	0x01D9, r1
     4f0:	10 92 d8 01 	sts	0x01D8, r1
    channel->current_setpoint.scale.max = 28500;
     4f4:	d0 93 db 01 	sts	0x01DB, r29
     4f8:	c0 93 da 01 	sts	0x01DA, r28
    channel->current_setpoint.scale.min_scaled = 0;
     4fc:	10 92 dd 01 	sts	0x01DD, r1
     500:	10 92 dc 01 	sts	0x01DC, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     504:	80 91 f3 01 	lds	r24, 0x01F3
     508:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <pwm_get_resolution>
     50c:	90 93 df 01 	sts	0x01DF, r25
     510:	80 93 de 01 	sts	0x01DE, r24
    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/

    printf("Starting the main loop\r\n");
     514:	85 e2       	ldi	r24, 0x25	; 37
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 93 06 	call	0xd26	; 0xd26 <puts>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     51c:	10 e0       	ldi	r17, 0x00	; 0
    {
        //DBG_LOW;
        /* Periodic functions */
        //adc_periodic();
        input_processing();
        printf("%d (%d)\r\n", psu_channels[PSU_CHANNEL_0].voltage_readout.value.scaled, psu_channels[PSU_CHANNEL_0].voltage_readout.value.raw);
     51e:	2d e3       	ldi	r18, 0x3D	; 61
     520:	e2 2e       	mov	r14, r18
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	f2 2e       	mov	r15, r18
        _delay_ms(500);
        /** DEBUG PERIODIC FUNCS **/
        psu_channels[0].voltage_setpoint.value.raw = 19856; // observed an offset error of about 50mV
     526:	30 e9       	ldi	r19, 0x90	; 144
     528:	a3 2e       	mov	r10, r19
     52a:	3d e4       	ldi	r19, 0x4D	; 77
     52c:	b3 2e       	mov	r11, r19
      //  if (psu_channels[0].voltage_setpoint.value.raw > 7500) psu_channels[0].voltage_setpoint.value.raw = 0;
        // note that the prototype breadboard does not have a separatly filtered and regulated 5V supply
        psu_channels[0].current_setpoint.value.raw = 1500;// = 2047; // observed an offset error of about 40mV
     52e:	4c ed       	ldi	r20, 0xDC	; 220
     530:	c4 2e       	mov	r12, r20
     532:	45 e0       	ldi	r20, 0x05	; 5
     534:	d4 2e       	mov	r13, r20

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        adc_processing(&psu_channels[i]);
     536:	5c e3       	ldi	r21, 0x3C	; 60
     538:	95 2e       	mov	r9, r21
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     53a:	12 30       	cpi	r17, 0x02	; 2
     53c:	08 f4       	brcc	.+2      	; 0x540 <main+0x1b0>
     53e:	4d c0       	rjmp	.+154    	; 0x5da <main+0x24a>
    {
        //DBG_LOW;
        /* Periodic functions */
        //adc_periodic();
        input_processing();
        printf("%d (%d)\r\n", psu_channels[PSU_CHANNEL_0].voltage_readout.value.scaled, psu_channels[PSU_CHANNEL_0].voltage_readout.value.raw);
     540:	80 91 95 01 	lds	r24, 0x0195
     544:	8f 93       	push	r24
     546:	80 91 94 01 	lds	r24, 0x0194
     54a:	8f 93       	push	r24
     54c:	80 91 97 01 	lds	r24, 0x0197
     550:	8f 93       	push	r24
     552:	80 91 96 01 	lds	r24, 0x0196
     556:	8f 93       	push	r24
     558:	ff 92       	push	r15
     55a:	ef 92       	push	r14
     55c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printf>
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	89 e6       	ldi	r24, 0x69	; 105
     564:	98 e1       	ldi	r25, 0x18	; 24
     566:	21 50       	subi	r18, 0x01	; 1
     568:	80 40       	sbci	r24, 0x00	; 0
     56a:	90 40       	sbci	r25, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x1d6>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x1e0>
     570:	00 00       	nop
        _delay_ms(500);
        /** DEBUG PERIODIC FUNCS **/
        psu_channels[0].voltage_setpoint.value.raw = 19856; // observed an offset error of about 50mV
     572:	b0 92 87 01 	sts	0x0187, r11
     576:	a0 92 86 01 	sts	0x0186, r10
      //  if (psu_channels[0].voltage_setpoint.value.raw > 7500) psu_channels[0].voltage_setpoint.value.raw = 0;
        // note that the prototype breadboard does not have a separatly filtered and regulated 5V supply
        psu_channels[0].current_setpoint.value.raw = 1500;// = 2047; // observed an offset error of about 40mV
     57a:	d0 92 a5 01 	sts	0x01A5, r13
     57e:	c0 92 a4 01 	sts	0x01A4, r12

        // to-do / to analyze: 1) absolute offset calibration
        //                     2) non linear behaviour correction (do measurements)

        /* Debug the timer */
        timer_debug();
     582:	0e 94 a0 03 	call	0x740	; 0x740 <timer_debug>
     586:	cc e7       	ldi	r28, 0x7C	; 124
     588:	d1 e0       	ldi	r29, 0x01	; 1
     58a:	04 ea       	ldi	r16, 0xA4	; 164
     58c:	11 e0       	ldi	r17, 0x01	; 1
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0

static void pwm_processing(t_psu_channel *channel)
{

    /* Voltage */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     59a:	be 01       	movw	r22, r28
     59c:	ce 01       	movw	r24, r28
     59e:	0a 96       	adiw	r24, 0x0a	; 10
     5a0:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>
    pwm_set_duty(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     5a4:	6c 85       	ldd	r22, Y+12	; 0x0c
     5a6:	7d 85       	ldd	r23, Y+13	; 0x0d
     5a8:	f8 01       	movw	r30, r16
     5aa:	3b 97       	sbiw	r30, 0x0b	; 11
     5ac:	80 81       	ld	r24, Z
     5ae:	0e 94 46 03 	call	0x68c	; 0x68c <pwm_set_duty>
     5b2:	be 01       	movw	r22, r28
     5b4:	62 5e       	subi	r22, 0xE2	; 226
     5b6:	7f 4f       	sbci	r23, 0xFF	; 255

    /* Current */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     5b8:	c8 01       	movw	r24, r16
     5ba:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>
    pwm_set_duty(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     5be:	f8 01       	movw	r30, r16
     5c0:	62 81       	ldd	r22, Z+2	; 0x02
     5c2:	73 81       	ldd	r23, Z+3	; 0x03
     5c4:	8b ad       	ldd	r24, Y+59	; 0x3b
     5c6:	0e 94 46 03 	call	0x68c	; 0x68c <pwm_set_duty>
     5ca:	ec 96       	adiw	r28, 0x3c	; 60
     5cc:	04 5c       	subi	r16, 0xC4	; 196
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	c4 3f       	cpi	r28, 0xF4	; 244
     5d4:	df 07       	cpc	r29, r31
     5d6:	09 f7       	brne	.-62     	; 0x59a <main+0x20a>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     5d8:	10 e0       	ldi	r17, 0x00	; 0
    {
        adc_processing(&psu_channels[i]);
     5da:	91 9e       	mul	r9, r17
     5dc:	e0 01       	movw	r28, r0
     5de:	11 24       	eor	r1, r1
     5e0:	c4 58       	subi	r28, 0x84	; 132
     5e2:	de 4f       	sbci	r29, 0xFE	; 254

static void adc_processing(t_psu_channel *channel)
{

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     5e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5e6:	0e 94 05 01 	call	0x20a	; 0x20a <adc_get>
     5ea:	99 8f       	std	Y+25, r25	; 0x19
     5ec:	88 8f       	std	Y+24, r24	; 0x18
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     5ee:	be 01       	movw	r22, r28
     5f0:	62 5f       	subi	r22, 0xF2	; 242
     5f2:	7f 4f       	sbci	r23, 0xFF	; 255
     5f4:	ce 01       	movw	r24, r28
     5f6:	48 96       	adiw	r24, 0x18	; 24
     5f8:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     5fc:	8a ad       	ldd	r24, Y+58	; 0x3a
     5fe:	0e 94 05 01 	call	0x20a	; 0x20a <adc_get>
     602:	9f ab       	std	Y+55, r25	; 0x37
     604:	8e ab       	std	Y+54, r24	; 0x36
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     606:	be 01       	movw	r22, r28
     608:	64 5d       	subi	r22, 0xD4	; 212
     60a:	7f 4f       	sbci	r23, 0xFF	; 255
     60c:	ce 01       	movw	r24, r28
     60e:	c6 96       	adiw	r24, 0x36	; 54
     610:	0e 94 4d 01 	call	0x29a	; 0x29a <lib_scale>
static void input_processing(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     614:	1f 5f       	subi	r17, 0xFF	; 255
     616:	12 30       	cpi	r17, 0x02	; 2
     618:	08 f0       	brcs	.+2      	; 0x61c <main+0x28c>
     61a:	92 cf       	rjmp	.-220    	; 0x540 <main+0x1b0>
     61c:	de cf       	rjmp	.-68     	; 0x5da <main+0x24a>

0000061e <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     61e:	e4 ef       	ldi	r30, 0xF4	; 244
     620:	f1 e0       	ldi	r31, 0x01	; 1

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     622:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Reset values, just in case */
        pwm_channels[i].duty = 0;
     624:	14 82       	std	Z+4, r1	; 0x04
     626:	13 82       	std	Z+3, r1	; 0x03
        pwm_channels[i].resolution = 0;
     628:	12 82       	std	Z+2, r1	; 0x02
     62a:	11 82       	std	Z+1, r1	; 0x01
        pwm_channels[i].channel = i;
     62c:	80 83       	st	Z, r24
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     62e:	8f 5f       	subi	r24, 0xFF	; 255
     630:	35 96       	adiw	r30, 0x05	; 5
     632:	84 30       	cpi	r24, 0x04	; 4
     634:	b9 f7       	brne	.-18     	; 0x624 <pwm_init+0x6>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1));
     636:	82 ea       	ldi	r24, 0xA2	; 162
     638:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = ((PWM_MODE << 3) | (1 << WGM13) | (1 << CS10));
     63c:	89 e1       	ldi	r24, 0x19	; 25
     63e:	80 93 81 00 	sts	0x0081, r24
    ICR1H = (PWM_FREQ >> 8);
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	80 93 87 00 	sts	0x0087, r24
    ICR1L = (PWM_FREQ & 0xff);
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	80 93 86 00 	sts	0x0086, r24

    pwm_channels[PWM_CHANNEL_0].resolution = PWM_FREQ;
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	90 93 f6 01 	sts	0x01F6, r25
     656:	80 93 f5 01 	sts	0x01F5, r24
    pwm_channels[PWM_CHANNEL_1].resolution = PWM_FREQ;
     65a:	90 93 fb 01 	sts	0x01FB, r25
     65e:	80 93 fa 01 	sts	0x01FA, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     662:	81 ea       	ldi	r24, 0xA1	; 161
     664:	80 93 b0 00 	sts	0x00B0, r24
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	80 93 b1 00 	sts	0x00B1, r24

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     66e:	84 b1       	in	r24, 0x04	; 4
     670:	8e 60       	ori	r24, 0x0E	; 14
     672:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIN3);
     674:	53 9a       	sbi	0x0a, 3	; 10

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	90 93 00 02 	sts	0x0200, r25
     67e:	80 93 ff 01 	sts	0x01FF, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     682:	90 93 05 02 	sts	0x0205, r25
     686:	80 93 04 02 	sts	0x0204, r24
     68a:	08 95       	ret

0000068c <pwm_set_duty>:
}

void pwm_set_duty(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;
     68c:	28 2f       	mov	r18, r24
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	f9 01       	movw	r30, r18
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e2 0f       	add	r30, r18
     69c:	f3 1f       	adc	r31, r19
     69e:	ec 50       	subi	r30, 0x0C	; 12
     6a0:	fe 4f       	sbci	r31, 0xFE	; 254
     6a2:	63 83       	std	Z+3, r22	; 0x03
     6a4:	74 83       	std	Z+4, r23	; 0x04

    switch(pwm_channel)
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	89 f0       	breq	.+34     	; 0x6cc <pwm_set_duty+0x40>
     6aa:	58 f0       	brcs	.+22     	; 0x6c2 <pwm_set_duty+0x36>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	19 f0       	breq	.+6      	; 0x6b6 <pwm_set_duty+0x2a>
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	21 f0       	breq	.+8      	; 0x6bc <pwm_set_duty+0x30>
     6b4:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
        OCR1BL = duty;
        break;
    case PWM_CHANNEL_2:
        OCR2A = duty;
     6b6:	60 93 b3 00 	sts	0x00B3, r22
        break;
     6ba:	08 95       	ret
    case PWM_CHANNEL_3:
        OCR2B = duty;
     6bc:	60 93 b4 00 	sts	0x00B4, r22
     6c0:	08 95       	ret
    pwm_channels[pwm_channel].duty = duty;

    switch(pwm_channel)
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     6c2:	70 93 89 00 	sts	0x0089, r23
        OCR1AL = duty;
     6c6:	60 93 88 00 	sts	0x0088, r22
        break;
     6ca:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     6cc:	70 93 8b 00 	sts	0x008B, r23
        OCR1BL = duty;
     6d0:	60 93 8a 00 	sts	0x008A, r22
        break;
     6d4:	08 95       	ret

000006d6 <pwm_get_resolution>:
    }
}

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
    return pwm_channels[channel].resolution;
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	e8 0f       	add	r30, r24
     6e4:	f9 1f       	adc	r31, r25
     6e6:	ec 50       	subi	r30, 0x0C	; 12
     6e8:	fe 4f       	sbci	r31, 0xFE	; 254
}
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	92 81       	ldd	r25, Z+2	; 0x02
     6ee:	08 95       	ret

000006f0 <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
    printf("no ISR!\r\n");
     6fa:	87 e4       	ldi	r24, 0x47	; 71
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 93 06 	call	0xd26	; 0xd26 <puts>
     702:	ff cf       	rjmp	.-2      	; 0x702 <__vector_default+0x12>

00000704 <system_fatal>:
    for(;;);
}

void system_fatal(char *str)
{
    printf("%s", str);
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	80 e5       	ldi	r24, 0x50	; 80
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printf>
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	ff cf       	rjmp	.-2      	; 0x71c <system_fatal+0x18>

0000071e <system_reset>:

void system_reset(void)
{
    /* start at zero! */
    void (*start)(void) = 0;
    start();
     71e:	e0 e0       	ldi	r30, 0x00	; 0
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	09 94       	ijmp

00000724 <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     724:	84 b7       	in	r24, 0x34	; 52

    /* Reset state for the next proper detection */
    MCUSR = 0;
     726:	14 be       	out	0x34, r1	; 52

    return t;
}
     728:	08 95       	ret

0000072a <timer_init>:
 */
void timer_init(void)
{

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	84 bd       	out	0x24, r24	; 36
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     72e:	85 bd       	out	0x25, r24	; 37

    /* initialize counter */
    OCR0A = 200;
     730:	88 ec       	ldi	r24, 0xC8	; 200
     732:	87 bd       	out	0x27, r24	; 39

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     734:	ee e6       	ldi	r30, 0x6E	; 110
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	82 60       	ori	r24, 0x02	; 2
     73c:	80 83       	st	Z, r24
     73e:	08 95       	ret

00000740 <timer_debug>:
#ifdef TIMER_DEBUG
#include "stdio.h"
void timer_debug(void)
{
    static uint32_t ts = 0;
    if (g_timestamp > (ts + 1000000L))
     740:	40 91 0c 02 	lds	r20, 0x020C
     744:	50 91 0d 02 	lds	r21, 0x020D
     748:	60 91 0e 02 	lds	r22, 0x020E
     74c:	70 91 0f 02 	lds	r23, 0x020F
     750:	80 91 08 02 	lds	r24, 0x0208
     754:	90 91 09 02 	lds	r25, 0x0209
     758:	a0 91 0a 02 	lds	r26, 0x020A
     75c:	b0 91 0b 02 	lds	r27, 0x020B
     760:	80 5c       	subi	r24, 0xC0	; 192
     762:	9d 4b       	sbci	r25, 0xBD	; 189
     764:	a0 4f       	sbci	r26, 0xF0	; 240
     766:	bf 4f       	sbci	r27, 0xFF	; 255
     768:	84 17       	cp	r24, r20
     76a:	95 07       	cpc	r25, r21
     76c:	a6 07       	cpc	r26, r22
     76e:	b7 07       	cpc	r27, r23
     770:	08 f0       	brcs	.+2      	; 0x774 <timer_debug+0x34>
     772:	08 95       	ret
    {
        ts = g_timestamp;
     774:	80 91 0c 02 	lds	r24, 0x020C
     778:	90 91 0d 02 	lds	r25, 0x020D
     77c:	a0 91 0e 02 	lds	r26, 0x020E
     780:	b0 91 0f 02 	lds	r27, 0x020F
     784:	80 93 08 02 	sts	0x0208, r24
     788:	90 93 09 02 	sts	0x0209, r25
     78c:	a0 93 0a 02 	sts	0x020A, r26
     790:	b0 93 0b 02 	sts	0x020B, r27
        printf("%s\r\n", "1 second trigger");
     794:	83 e5       	ldi	r24, 0x53	; 83
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	84 e6       	ldi	r24, 0x64	; 100
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <printf>
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	08 95       	ret

000007b2 <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
     7c4:	80 91 0c 02 	lds	r24, 0x020C
     7c8:	90 91 0d 02 	lds	r25, 0x020D
     7cc:	a0 91 0e 02 	lds	r26, 0x020E
     7d0:	b0 91 0f 02 	lds	r27, 0x020F
     7d4:	8c 59       	subi	r24, 0x9C	; 156
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	af 4f       	sbci	r26, 0xFF	; 255
     7da:	bf 4f       	sbci	r27, 0xFF	; 255
     7dc:	80 93 0c 02 	sts	0x020C, r24
     7e0:	90 93 0d 02 	sts	0x020D, r25
     7e4:	a0 93 0e 02 	sts	0x020E, r26
     7e8:	b0 93 0f 02 	sts	0x020F, r27
}
     7ec:	bf 91       	pop	r27
     7ee:	af 91       	pop	r26
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <uart_init>:
#define    UCSZ0    UCSZ00

void uart_init(void) {

    /* Enable UART power */
    power_usart0_enable();
     7fe:	e4 e6       	ldi	r30, 0x64	; 100
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	8d 7f       	andi	r24, 0xFD	; 253
     806:	80 83       	st	Z, r24

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
     808:	e0 ec       	ldi	r30, 0xC0	; 192
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	82 60       	ori	r24, 0x02	; 2
     810:	80 83       	st	Z, r24
    #else
        UCSRA &= ~(_BV(U2X0));
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
     812:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
     816:	80 e1       	ldi	r24, 0x10	; 16
     818:	80 93 c4 00 	sts	0x00C4, r24

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	80 93 c2 00 	sts	0x00C2, r24


    // rx/tx enable
    UCSR0B = _BV(RXEN) | _BV(TXEN);
     822:	88 e1       	ldi	r24, 0x18	; 24
     824:	80 93 c1 00 	sts	0x00C1, r24
     828:	08 95       	ret

0000082a <uart_putchar>:



}

void uart_putchar(char c, FILE *stream) {
     82a:	cf 93       	push	r28
     82c:	c8 2f       	mov	r28, r24
    if (c == '\n') {
     82e:	8a 30       	cpi	r24, 0x0A	; 10
     830:	41 f0       	breq	.+16     	; 0x842 <uart_putchar+0x18>
        uart_putchar('\r', stream);
    }
    loop_until_bit_is_set(UCSRA, UDRE);
     832:	90 91 c0 00 	lds	r25, 0x00C0
     836:	95 ff       	sbrs	r25, 5
     838:	fc cf       	rjmp	.-8      	; 0x832 <uart_putchar+0x8>
    UDR = c;
     83a:	c0 93 c6 00 	sts	0x00C6, r28
}
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

}

void uart_putchar(char c, FILE *stream) {
    if (c == '\n') {
        uart_putchar('\r', stream);
     842:	8d e0       	ldi	r24, 0x0D	; 13
     844:	0e 94 15 04 	call	0x82a	; 0x82a <uart_putchar>
     848:	f4 cf       	rjmp	.-24     	; 0x832 <uart_putchar+0x8>

0000084a <uart_getchar>:
    loop_until_bit_is_set(UCSRA, UDRE);
    UDR = c;
}

char uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSRA, RXC);
     84a:	80 91 c0 00 	lds	r24, 0x00C0
     84e:	87 ff       	sbrs	r24, 7
     850:	fc cf       	rjmp	.-8      	; 0x84a <uart_getchar>
    return UDR;
     852:	80 91 c6 00 	lds	r24, 0x00C6
}
     856:	08 95       	ret

00000858 <__divmodhi4>:
     858:	97 fb       	bst	r25, 7
     85a:	07 2e       	mov	r0, r23
     85c:	16 f4       	brtc	.+4      	; 0x862 <__divmodhi4+0xa>
     85e:	00 94       	com	r0
     860:	07 d0       	rcall	.+14     	; 0x870 <__divmodhi4_neg1>
     862:	77 fd       	sbrc	r23, 7
     864:	09 d0       	rcall	.+18     	; 0x878 <__divmodhi4_neg2>
     866:	0e 94 5f 04 	call	0x8be	; 0x8be <__udivmodhi4>
     86a:	07 fc       	sbrc	r0, 7
     86c:	05 d0       	rcall	.+10     	; 0x878 <__divmodhi4_neg2>
     86e:	3e f4       	brtc	.+14     	; 0x87e <__divmodhi4_exit>

00000870 <__divmodhi4_neg1>:
     870:	90 95       	com	r25
     872:	81 95       	neg	r24
     874:	9f 4f       	sbci	r25, 0xFF	; 255
     876:	08 95       	ret

00000878 <__divmodhi4_neg2>:
     878:	70 95       	com	r23
     87a:	61 95       	neg	r22
     87c:	7f 4f       	sbci	r23, 0xFF	; 255

0000087e <__divmodhi4_exit>:
     87e:	08 95       	ret

00000880 <__divmodsi4>:
     880:	05 2e       	mov	r0, r21
     882:	97 fb       	bst	r25, 7
     884:	1e f4       	brtc	.+6      	; 0x88c <__divmodsi4+0xc>
     886:	00 94       	com	r0
     888:	0e 94 57 04 	call	0x8ae	; 0x8ae <__negsi2>
     88c:	57 fd       	sbrc	r21, 7
     88e:	07 d0       	rcall	.+14     	; 0x89e <__divmodsi4_neg2>
     890:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__udivmodsi4>
     894:	07 fc       	sbrc	r0, 7
     896:	03 d0       	rcall	.+6      	; 0x89e <__divmodsi4_neg2>
     898:	4e f4       	brtc	.+18     	; 0x8ac <__divmodsi4_exit>
     89a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__negsi2>

0000089e <__divmodsi4_neg2>:
     89e:	50 95       	com	r21
     8a0:	40 95       	com	r20
     8a2:	30 95       	com	r19
     8a4:	21 95       	neg	r18
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	4f 4f       	sbci	r20, 0xFF	; 255
     8aa:	5f 4f       	sbci	r21, 0xFF	; 255

000008ac <__divmodsi4_exit>:
     8ac:	08 95       	ret

000008ae <__negsi2>:
     8ae:	90 95       	com	r25
     8b0:	80 95       	com	r24
     8b2:	70 95       	com	r23
     8b4:	61 95       	neg	r22
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	8f 4f       	sbci	r24, 0xFF	; 255
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	08 95       	ret

000008be <__udivmodhi4>:
     8be:	aa 1b       	sub	r26, r26
     8c0:	bb 1b       	sub	r27, r27
     8c2:	51 e1       	ldi	r21, 0x11	; 17
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <__udivmodhi4_ep>

000008c6 <__udivmodhi4_loop>:
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	a6 17       	cp	r26, r22
     8cc:	b7 07       	cpc	r27, r23
     8ce:	10 f0       	brcs	.+4      	; 0x8d4 <__udivmodhi4_ep>
     8d0:	a6 1b       	sub	r26, r22
     8d2:	b7 0b       	sbc	r27, r23

000008d4 <__udivmodhi4_ep>:
     8d4:	88 1f       	adc	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	5a 95       	dec	r21
     8da:	a9 f7       	brne	.-22     	; 0x8c6 <__udivmodhi4_loop>
     8dc:	80 95       	com	r24
     8de:	90 95       	com	r25
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	08 95       	ret

000008e6 <__udivmodsi4>:
     8e6:	a1 e2       	ldi	r26, 0x21	; 33
     8e8:	1a 2e       	mov	r1, r26
     8ea:	aa 1b       	sub	r26, r26
     8ec:	bb 1b       	sub	r27, r27
     8ee:	fd 01       	movw	r30, r26
     8f0:	0d c0       	rjmp	.+26     	; 0x90c <__udivmodsi4_ep>

000008f2 <__udivmodsi4_loop>:
     8f2:	aa 1f       	adc	r26, r26
     8f4:	bb 1f       	adc	r27, r27
     8f6:	ee 1f       	adc	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	a2 17       	cp	r26, r18
     8fc:	b3 07       	cpc	r27, r19
     8fe:	e4 07       	cpc	r30, r20
     900:	f5 07       	cpc	r31, r21
     902:	20 f0       	brcs	.+8      	; 0x90c <__udivmodsi4_ep>
     904:	a2 1b       	sub	r26, r18
     906:	b3 0b       	sbc	r27, r19
     908:	e4 0b       	sbc	r30, r20
     90a:	f5 0b       	sbc	r31, r21

0000090c <__udivmodsi4_ep>:
     90c:	66 1f       	adc	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	88 1f       	adc	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	1a 94       	dec	r1
     916:	69 f7       	brne	.-38     	; 0x8f2 <__udivmodsi4_loop>
     918:	60 95       	com	r22
     91a:	70 95       	com	r23
     91c:	80 95       	com	r24
     91e:	90 95       	com	r25
     920:	9b 01       	movw	r18, r22
     922:	ac 01       	movw	r20, r24
     924:	bd 01       	movw	r22, r26
     926:	cf 01       	movw	r24, r30
     928:	08 95       	ret

0000092a <__subsf3>:
     92a:	50 58       	subi	r21, 0x80	; 128

0000092c <__addsf3>:
     92c:	bb 27       	eor	r27, r27
     92e:	aa 27       	eor	r26, r26
     930:	0e d0       	rcall	.+28     	; 0x94e <__addsf3x>
     932:	48 c1       	rjmp	.+656    	; 0xbc4 <__fp_round>
     934:	39 d1       	rcall	.+626    	; 0xba8 <__fp_pscA>
     936:	30 f0       	brcs	.+12     	; 0x944 <__addsf3+0x18>
     938:	3e d1       	rcall	.+636    	; 0xbb6 <__fp_pscB>
     93a:	20 f0       	brcs	.+8      	; 0x944 <__addsf3+0x18>
     93c:	31 f4       	brne	.+12     	; 0x94a <__addsf3+0x1e>
     93e:	9f 3f       	cpi	r25, 0xFF	; 255
     940:	11 f4       	brne	.+4      	; 0x946 <__addsf3+0x1a>
     942:	1e f4       	brtc	.+6      	; 0x94a <__addsf3+0x1e>
     944:	2e c1       	rjmp	.+604    	; 0xba2 <__fp_nan>
     946:	0e f4       	brtc	.+2      	; 0x94a <__addsf3+0x1e>
     948:	e0 95       	com	r30
     94a:	e7 fb       	bst	r30, 7
     94c:	24 c1       	rjmp	.+584    	; 0xb96 <__fp_inf>

0000094e <__addsf3x>:
     94e:	e9 2f       	mov	r30, r25
     950:	4a d1       	rcall	.+660    	; 0xbe6 <__fp_split3>
     952:	80 f3       	brcs	.-32     	; 0x934 <__addsf3+0x8>
     954:	ba 17       	cp	r27, r26
     956:	62 07       	cpc	r22, r18
     958:	73 07       	cpc	r23, r19
     95a:	84 07       	cpc	r24, r20
     95c:	95 07       	cpc	r25, r21
     95e:	18 f0       	brcs	.+6      	; 0x966 <__addsf3x+0x18>
     960:	71 f4       	brne	.+28     	; 0x97e <__addsf3x+0x30>
     962:	9e f5       	brtc	.+102    	; 0x9ca <__addsf3x+0x7c>
     964:	62 c1       	rjmp	.+708    	; 0xc2a <__fp_zero>
     966:	0e f4       	brtc	.+2      	; 0x96a <__addsf3x+0x1c>
     968:	e0 95       	com	r30
     96a:	0b 2e       	mov	r0, r27
     96c:	ba 2f       	mov	r27, r26
     96e:	a0 2d       	mov	r26, r0
     970:	0b 01       	movw	r0, r22
     972:	b9 01       	movw	r22, r18
     974:	90 01       	movw	r18, r0
     976:	0c 01       	movw	r0, r24
     978:	ca 01       	movw	r24, r20
     97a:	a0 01       	movw	r20, r0
     97c:	11 24       	eor	r1, r1
     97e:	ff 27       	eor	r31, r31
     980:	59 1b       	sub	r21, r25
     982:	99 f0       	breq	.+38     	; 0x9aa <__addsf3x+0x5c>
     984:	59 3f       	cpi	r21, 0xF9	; 249
     986:	50 f4       	brcc	.+20     	; 0x99c <__addsf3x+0x4e>
     988:	50 3e       	cpi	r21, 0xE0	; 224
     98a:	68 f1       	brcs	.+90     	; 0x9e6 <__addsf3x+0x98>
     98c:	1a 16       	cp	r1, r26
     98e:	f0 40       	sbci	r31, 0x00	; 0
     990:	a2 2f       	mov	r26, r18
     992:	23 2f       	mov	r18, r19
     994:	34 2f       	mov	r19, r20
     996:	44 27       	eor	r20, r20
     998:	58 5f       	subi	r21, 0xF8	; 248
     99a:	f3 cf       	rjmp	.-26     	; 0x982 <__addsf3x+0x34>
     99c:	46 95       	lsr	r20
     99e:	37 95       	ror	r19
     9a0:	27 95       	ror	r18
     9a2:	a7 95       	ror	r26
     9a4:	f0 40       	sbci	r31, 0x00	; 0
     9a6:	53 95       	inc	r21
     9a8:	c9 f7       	brne	.-14     	; 0x99c <__addsf3x+0x4e>
     9aa:	7e f4       	brtc	.+30     	; 0x9ca <__addsf3x+0x7c>
     9ac:	1f 16       	cp	r1, r31
     9ae:	ba 0b       	sbc	r27, r26
     9b0:	62 0b       	sbc	r22, r18
     9b2:	73 0b       	sbc	r23, r19
     9b4:	84 0b       	sbc	r24, r20
     9b6:	ba f0       	brmi	.+46     	; 0x9e6 <__addsf3x+0x98>
     9b8:	91 50       	subi	r25, 0x01	; 1
     9ba:	a1 f0       	breq	.+40     	; 0x9e4 <__addsf3x+0x96>
     9bc:	ff 0f       	add	r31, r31
     9be:	bb 1f       	adc	r27, r27
     9c0:	66 1f       	adc	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	88 1f       	adc	r24, r24
     9c6:	c2 f7       	brpl	.-16     	; 0x9b8 <__addsf3x+0x6a>
     9c8:	0e c0       	rjmp	.+28     	; 0x9e6 <__addsf3x+0x98>
     9ca:	ba 0f       	add	r27, r26
     9cc:	62 1f       	adc	r22, r18
     9ce:	73 1f       	adc	r23, r19
     9d0:	84 1f       	adc	r24, r20
     9d2:	48 f4       	brcc	.+18     	; 0x9e6 <__addsf3x+0x98>
     9d4:	87 95       	ror	r24
     9d6:	77 95       	ror	r23
     9d8:	67 95       	ror	r22
     9da:	b7 95       	ror	r27
     9dc:	f7 95       	ror	r31
     9de:	9e 3f       	cpi	r25, 0xFE	; 254
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <__addsf3x+0x96>
     9e2:	b3 cf       	rjmp	.-154    	; 0x94a <__addsf3+0x1e>
     9e4:	93 95       	inc	r25
     9e6:	88 0f       	add	r24, r24
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <__addsf3x+0x9e>
     9ea:	99 27       	eor	r25, r25
     9ec:	ee 0f       	add	r30, r30
     9ee:	97 95       	ror	r25
     9f0:	87 95       	ror	r24
     9f2:	08 95       	ret

000009f4 <__divsf3>:
     9f4:	0c d0       	rcall	.+24     	; 0xa0e <__divsf3x>
     9f6:	e6 c0       	rjmp	.+460    	; 0xbc4 <__fp_round>
     9f8:	de d0       	rcall	.+444    	; 0xbb6 <__fp_pscB>
     9fa:	40 f0       	brcs	.+16     	; 0xa0c <__divsf3+0x18>
     9fc:	d5 d0       	rcall	.+426    	; 0xba8 <__fp_pscA>
     9fe:	30 f0       	brcs	.+12     	; 0xa0c <__divsf3+0x18>
     a00:	21 f4       	brne	.+8      	; 0xa0a <__divsf3+0x16>
     a02:	5f 3f       	cpi	r21, 0xFF	; 255
     a04:	19 f0       	breq	.+6      	; 0xa0c <__divsf3+0x18>
     a06:	c7 c0       	rjmp	.+398    	; 0xb96 <__fp_inf>
     a08:	51 11       	cpse	r21, r1
     a0a:	10 c1       	rjmp	.+544    	; 0xc2c <__fp_szero>
     a0c:	ca c0       	rjmp	.+404    	; 0xba2 <__fp_nan>

00000a0e <__divsf3x>:
     a0e:	eb d0       	rcall	.+470    	; 0xbe6 <__fp_split3>
     a10:	98 f3       	brcs	.-26     	; 0x9f8 <__divsf3+0x4>

00000a12 <__divsf3_pse>:
     a12:	99 23       	and	r25, r25
     a14:	c9 f3       	breq	.-14     	; 0xa08 <__divsf3+0x14>
     a16:	55 23       	and	r21, r21
     a18:	b1 f3       	breq	.-20     	; 0xa06 <__divsf3+0x12>
     a1a:	95 1b       	sub	r25, r21
     a1c:	55 0b       	sbc	r21, r21
     a1e:	bb 27       	eor	r27, r27
     a20:	aa 27       	eor	r26, r26
     a22:	62 17       	cp	r22, r18
     a24:	73 07       	cpc	r23, r19
     a26:	84 07       	cpc	r24, r20
     a28:	38 f0       	brcs	.+14     	; 0xa38 <__divsf3_pse+0x26>
     a2a:	9f 5f       	subi	r25, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	44 1f       	adc	r20, r20
     a34:	aa 1f       	adc	r26, r26
     a36:	a9 f3       	breq	.-22     	; 0xa22 <__divsf3_pse+0x10>
     a38:	33 d0       	rcall	.+102    	; 0xaa0 <__divsf3_pse+0x8e>
     a3a:	0e 2e       	mov	r0, r30
     a3c:	3a f0       	brmi	.+14     	; 0xa4c <__divsf3_pse+0x3a>
     a3e:	e0 e8       	ldi	r30, 0x80	; 128
     a40:	30 d0       	rcall	.+96     	; 0xaa2 <__divsf3_pse+0x90>
     a42:	91 50       	subi	r25, 0x01	; 1
     a44:	50 40       	sbci	r21, 0x00	; 0
     a46:	e6 95       	lsr	r30
     a48:	00 1c       	adc	r0, r0
     a4a:	ca f7       	brpl	.-14     	; 0xa3e <__divsf3_pse+0x2c>
     a4c:	29 d0       	rcall	.+82     	; 0xaa0 <__divsf3_pse+0x8e>
     a4e:	fe 2f       	mov	r31, r30
     a50:	27 d0       	rcall	.+78     	; 0xaa0 <__divsf3_pse+0x8e>
     a52:	66 0f       	add	r22, r22
     a54:	77 1f       	adc	r23, r23
     a56:	88 1f       	adc	r24, r24
     a58:	bb 1f       	adc	r27, r27
     a5a:	26 17       	cp	r18, r22
     a5c:	37 07       	cpc	r19, r23
     a5e:	48 07       	cpc	r20, r24
     a60:	ab 07       	cpc	r26, r27
     a62:	b0 e8       	ldi	r27, 0x80	; 128
     a64:	09 f0       	breq	.+2      	; 0xa68 <__divsf3_pse+0x56>
     a66:	bb 0b       	sbc	r27, r27
     a68:	80 2d       	mov	r24, r0
     a6a:	bf 01       	movw	r22, r30
     a6c:	ff 27       	eor	r31, r31
     a6e:	93 58       	subi	r25, 0x83	; 131
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	2a f0       	brmi	.+10     	; 0xa7e <__divsf3_pse+0x6c>
     a74:	9e 3f       	cpi	r25, 0xFE	; 254
     a76:	51 05       	cpc	r21, r1
     a78:	68 f0       	brcs	.+26     	; 0xa94 <__divsf3_pse+0x82>
     a7a:	8d c0       	rjmp	.+282    	; 0xb96 <__fp_inf>
     a7c:	d7 c0       	rjmp	.+430    	; 0xc2c <__fp_szero>
     a7e:	5f 3f       	cpi	r21, 0xFF	; 255
     a80:	ec f3       	brlt	.-6      	; 0xa7c <__divsf3_pse+0x6a>
     a82:	98 3e       	cpi	r25, 0xE8	; 232
     a84:	dc f3       	brlt	.-10     	; 0xa7c <__divsf3_pse+0x6a>
     a86:	86 95       	lsr	r24
     a88:	77 95       	ror	r23
     a8a:	67 95       	ror	r22
     a8c:	b7 95       	ror	r27
     a8e:	f7 95       	ror	r31
     a90:	9f 5f       	subi	r25, 0xFF	; 255
     a92:	c9 f7       	brne	.-14     	; 0xa86 <__divsf3_pse+0x74>
     a94:	88 0f       	add	r24, r24
     a96:	91 1d       	adc	r25, r1
     a98:	96 95       	lsr	r25
     a9a:	87 95       	ror	r24
     a9c:	97 f9       	bld	r25, 7
     a9e:	08 95       	ret
     aa0:	e1 e0       	ldi	r30, 0x01	; 1
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	bb 1f       	adc	r27, r27
     aaa:	62 17       	cp	r22, r18
     aac:	73 07       	cpc	r23, r19
     aae:	84 07       	cpc	r24, r20
     ab0:	ba 07       	cpc	r27, r26
     ab2:	20 f0       	brcs	.+8      	; 0xabc <__divsf3_pse+0xaa>
     ab4:	62 1b       	sub	r22, r18
     ab6:	73 0b       	sbc	r23, r19
     ab8:	84 0b       	sbc	r24, r20
     aba:	ba 0b       	sbc	r27, r26
     abc:	ee 1f       	adc	r30, r30
     abe:	88 f7       	brcc	.-30     	; 0xaa2 <__divsf3_pse+0x90>
     ac0:	e0 95       	com	r30
     ac2:	08 95       	ret

00000ac4 <__fixunssfsi>:
     ac4:	98 d0       	rcall	.+304    	; 0xbf6 <__fp_splitA>
     ac6:	88 f0       	brcs	.+34     	; 0xaea <__fixunssfsi+0x26>
     ac8:	9f 57       	subi	r25, 0x7F	; 127
     aca:	90 f0       	brcs	.+36     	; 0xaf0 <__fixunssfsi+0x2c>
     acc:	b9 2f       	mov	r27, r25
     ace:	99 27       	eor	r25, r25
     ad0:	b7 51       	subi	r27, 0x17	; 23
     ad2:	a0 f0       	brcs	.+40     	; 0xafc <__fixunssfsi+0x38>
     ad4:	d1 f0       	breq	.+52     	; 0xb0a <__fixunssfsi+0x46>
     ad6:	66 0f       	add	r22, r22
     ad8:	77 1f       	adc	r23, r23
     ada:	88 1f       	adc	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	1a f0       	brmi	.+6      	; 0xae6 <__fixunssfsi+0x22>
     ae0:	ba 95       	dec	r27
     ae2:	c9 f7       	brne	.-14     	; 0xad6 <__fixunssfsi+0x12>
     ae4:	12 c0       	rjmp	.+36     	; 0xb0a <__fixunssfsi+0x46>
     ae6:	b1 30       	cpi	r27, 0x01	; 1
     ae8:	81 f0       	breq	.+32     	; 0xb0a <__fixunssfsi+0x46>
     aea:	9f d0       	rcall	.+318    	; 0xc2a <__fp_zero>
     aec:	b1 e0       	ldi	r27, 0x01	; 1
     aee:	08 95       	ret
     af0:	9c c0       	rjmp	.+312    	; 0xc2a <__fp_zero>
     af2:	67 2f       	mov	r22, r23
     af4:	78 2f       	mov	r23, r24
     af6:	88 27       	eor	r24, r24
     af8:	b8 5f       	subi	r27, 0xF8	; 248
     afa:	39 f0       	breq	.+14     	; 0xb0a <__fixunssfsi+0x46>
     afc:	b9 3f       	cpi	r27, 0xF9	; 249
     afe:	cc f3       	brlt	.-14     	; 0xaf2 <__fixunssfsi+0x2e>
     b00:	86 95       	lsr	r24
     b02:	77 95       	ror	r23
     b04:	67 95       	ror	r22
     b06:	b3 95       	inc	r27
     b08:	d9 f7       	brne	.-10     	; 0xb00 <__fixunssfsi+0x3c>
     b0a:	3e f4       	brtc	.+14     	; 0xb1a <__fixunssfsi+0x56>
     b0c:	90 95       	com	r25
     b0e:	80 95       	com	r24
     b10:	70 95       	com	r23
     b12:	61 95       	neg	r22
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	8f 4f       	sbci	r24, 0xFF	; 255
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	08 95       	ret

00000b1c <__floatunsisf>:
     b1c:	e8 94       	clt
     b1e:	09 c0       	rjmp	.+18     	; 0xb32 <__floatsisf+0x12>

00000b20 <__floatsisf>:
     b20:	97 fb       	bst	r25, 7
     b22:	3e f4       	brtc	.+14     	; 0xb32 <__floatsisf+0x12>
     b24:	90 95       	com	r25
     b26:	80 95       	com	r24
     b28:	70 95       	com	r23
     b2a:	61 95       	neg	r22
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	8f 4f       	sbci	r24, 0xFF	; 255
     b30:	9f 4f       	sbci	r25, 0xFF	; 255
     b32:	99 23       	and	r25, r25
     b34:	a9 f0       	breq	.+42     	; 0xb60 <__floatsisf+0x40>
     b36:	f9 2f       	mov	r31, r25
     b38:	96 e9       	ldi	r25, 0x96	; 150
     b3a:	bb 27       	eor	r27, r27
     b3c:	93 95       	inc	r25
     b3e:	f6 95       	lsr	r31
     b40:	87 95       	ror	r24
     b42:	77 95       	ror	r23
     b44:	67 95       	ror	r22
     b46:	b7 95       	ror	r27
     b48:	f1 11       	cpse	r31, r1
     b4a:	f8 cf       	rjmp	.-16     	; 0xb3c <__floatsisf+0x1c>
     b4c:	fa f4       	brpl	.+62     	; 0xb8c <__floatsisf+0x6c>
     b4e:	bb 0f       	add	r27, r27
     b50:	11 f4       	brne	.+4      	; 0xb56 <__floatsisf+0x36>
     b52:	60 ff       	sbrs	r22, 0
     b54:	1b c0       	rjmp	.+54     	; 0xb8c <__floatsisf+0x6c>
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	8f 4f       	sbci	r24, 0xFF	; 255
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	16 c0       	rjmp	.+44     	; 0xb8c <__floatsisf+0x6c>
     b60:	88 23       	and	r24, r24
     b62:	11 f0       	breq	.+4      	; 0xb68 <__floatsisf+0x48>
     b64:	96 e9       	ldi	r25, 0x96	; 150
     b66:	11 c0       	rjmp	.+34     	; 0xb8a <__floatsisf+0x6a>
     b68:	77 23       	and	r23, r23
     b6a:	21 f0       	breq	.+8      	; 0xb74 <__floatsisf+0x54>
     b6c:	9e e8       	ldi	r25, 0x8E	; 142
     b6e:	87 2f       	mov	r24, r23
     b70:	76 2f       	mov	r23, r22
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <__floatsisf+0x5e>
     b74:	66 23       	and	r22, r22
     b76:	71 f0       	breq	.+28     	; 0xb94 <__floatsisf+0x74>
     b78:	96 e8       	ldi	r25, 0x86	; 134
     b7a:	86 2f       	mov	r24, r22
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	2a f0       	brmi	.+10     	; 0xb8c <__floatsisf+0x6c>
     b82:	9a 95       	dec	r25
     b84:	66 0f       	add	r22, r22
     b86:	77 1f       	adc	r23, r23
     b88:	88 1f       	adc	r24, r24
     b8a:	da f7       	brpl	.-10     	; 0xb82 <__floatsisf+0x62>
     b8c:	88 0f       	add	r24, r24
     b8e:	96 95       	lsr	r25
     b90:	87 95       	ror	r24
     b92:	97 f9       	bld	r25, 7
     b94:	08 95       	ret

00000b96 <__fp_inf>:
     b96:	97 f9       	bld	r25, 7
     b98:	9f 67       	ori	r25, 0x7F	; 127
     b9a:	80 e8       	ldi	r24, 0x80	; 128
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	08 95       	ret

00000ba2 <__fp_nan>:
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	80 ec       	ldi	r24, 0xC0	; 192
     ba6:	08 95       	ret

00000ba8 <__fp_pscA>:
     ba8:	00 24       	eor	r0, r0
     baa:	0a 94       	dec	r0
     bac:	16 16       	cp	r1, r22
     bae:	17 06       	cpc	r1, r23
     bb0:	18 06       	cpc	r1, r24
     bb2:	09 06       	cpc	r0, r25
     bb4:	08 95       	ret

00000bb6 <__fp_pscB>:
     bb6:	00 24       	eor	r0, r0
     bb8:	0a 94       	dec	r0
     bba:	12 16       	cp	r1, r18
     bbc:	13 06       	cpc	r1, r19
     bbe:	14 06       	cpc	r1, r20
     bc0:	05 06       	cpc	r0, r21
     bc2:	08 95       	ret

00000bc4 <__fp_round>:
     bc4:	09 2e       	mov	r0, r25
     bc6:	03 94       	inc	r0
     bc8:	00 0c       	add	r0, r0
     bca:	11 f4       	brne	.+4      	; 0xbd0 <__fp_round+0xc>
     bcc:	88 23       	and	r24, r24
     bce:	52 f0       	brmi	.+20     	; 0xbe4 <__fp_round+0x20>
     bd0:	bb 0f       	add	r27, r27
     bd2:	40 f4       	brcc	.+16     	; 0xbe4 <__fp_round+0x20>
     bd4:	bf 2b       	or	r27, r31
     bd6:	11 f4       	brne	.+4      	; 0xbdc <__fp_round+0x18>
     bd8:	60 ff       	sbrs	r22, 0
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <__fp_round+0x20>
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	8f 4f       	sbci	r24, 0xFF	; 255
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	08 95       	ret

00000be6 <__fp_split3>:
     be6:	57 fd       	sbrc	r21, 7
     be8:	90 58       	subi	r25, 0x80	; 128
     bea:	44 0f       	add	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	59 f0       	breq	.+22     	; 0xc06 <__fp_splitA+0x10>
     bf0:	5f 3f       	cpi	r21, 0xFF	; 255
     bf2:	71 f0       	breq	.+28     	; 0xc10 <__fp_splitA+0x1a>
     bf4:	47 95       	ror	r20

00000bf6 <__fp_splitA>:
     bf6:	88 0f       	add	r24, r24
     bf8:	97 fb       	bst	r25, 7
     bfa:	99 1f       	adc	r25, r25
     bfc:	61 f0       	breq	.+24     	; 0xc16 <__fp_splitA+0x20>
     bfe:	9f 3f       	cpi	r25, 0xFF	; 255
     c00:	79 f0       	breq	.+30     	; 0xc20 <__fp_splitA+0x2a>
     c02:	87 95       	ror	r24
     c04:	08 95       	ret
     c06:	12 16       	cp	r1, r18
     c08:	13 06       	cpc	r1, r19
     c0a:	14 06       	cpc	r1, r20
     c0c:	55 1f       	adc	r21, r21
     c0e:	f2 cf       	rjmp	.-28     	; 0xbf4 <__fp_split3+0xe>
     c10:	46 95       	lsr	r20
     c12:	f1 df       	rcall	.-30     	; 0xbf6 <__fp_splitA>
     c14:	08 c0       	rjmp	.+16     	; 0xc26 <__fp_splitA+0x30>
     c16:	16 16       	cp	r1, r22
     c18:	17 06       	cpc	r1, r23
     c1a:	18 06       	cpc	r1, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	f1 cf       	rjmp	.-30     	; 0xc02 <__fp_splitA+0xc>
     c20:	86 95       	lsr	r24
     c22:	71 05       	cpc	r23, r1
     c24:	61 05       	cpc	r22, r1
     c26:	08 94       	sec
     c28:	08 95       	ret

00000c2a <__fp_zero>:
     c2a:	e8 94       	clt

00000c2c <__fp_szero>:
     c2c:	bb 27       	eor	r27, r27
     c2e:	66 27       	eor	r22, r22
     c30:	77 27       	eor	r23, r23
     c32:	cb 01       	movw	r24, r22
     c34:	97 f9       	bld	r25, 7
     c36:	08 95       	ret

00000c38 <__mulsf3>:
     c38:	0b d0       	rcall	.+22     	; 0xc50 <__mulsf3x>
     c3a:	c4 cf       	rjmp	.-120    	; 0xbc4 <__fp_round>
     c3c:	b5 df       	rcall	.-150    	; 0xba8 <__fp_pscA>
     c3e:	28 f0       	brcs	.+10     	; 0xc4a <__mulsf3+0x12>
     c40:	ba df       	rcall	.-140    	; 0xbb6 <__fp_pscB>
     c42:	18 f0       	brcs	.+6      	; 0xc4a <__mulsf3+0x12>
     c44:	95 23       	and	r25, r21
     c46:	09 f0       	breq	.+2      	; 0xc4a <__mulsf3+0x12>
     c48:	a6 cf       	rjmp	.-180    	; 0xb96 <__fp_inf>
     c4a:	ab cf       	rjmp	.-170    	; 0xba2 <__fp_nan>
     c4c:	11 24       	eor	r1, r1
     c4e:	ee cf       	rjmp	.-36     	; 0xc2c <__fp_szero>

00000c50 <__mulsf3x>:
     c50:	ca df       	rcall	.-108    	; 0xbe6 <__fp_split3>
     c52:	a0 f3       	brcs	.-24     	; 0xc3c <__mulsf3+0x4>

00000c54 <__mulsf3_pse>:
     c54:	95 9f       	mul	r25, r21
     c56:	d1 f3       	breq	.-12     	; 0xc4c <__mulsf3+0x14>
     c58:	95 0f       	add	r25, r21
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	55 1f       	adc	r21, r21
     c5e:	62 9f       	mul	r22, r18
     c60:	f0 01       	movw	r30, r0
     c62:	72 9f       	mul	r23, r18
     c64:	bb 27       	eor	r27, r27
     c66:	f0 0d       	add	r31, r0
     c68:	b1 1d       	adc	r27, r1
     c6a:	63 9f       	mul	r22, r19
     c6c:	aa 27       	eor	r26, r26
     c6e:	f0 0d       	add	r31, r0
     c70:	b1 1d       	adc	r27, r1
     c72:	aa 1f       	adc	r26, r26
     c74:	64 9f       	mul	r22, r20
     c76:	66 27       	eor	r22, r22
     c78:	b0 0d       	add	r27, r0
     c7a:	a1 1d       	adc	r26, r1
     c7c:	66 1f       	adc	r22, r22
     c7e:	82 9f       	mul	r24, r18
     c80:	22 27       	eor	r18, r18
     c82:	b0 0d       	add	r27, r0
     c84:	a1 1d       	adc	r26, r1
     c86:	62 1f       	adc	r22, r18
     c88:	73 9f       	mul	r23, r19
     c8a:	b0 0d       	add	r27, r0
     c8c:	a1 1d       	adc	r26, r1
     c8e:	62 1f       	adc	r22, r18
     c90:	83 9f       	mul	r24, r19
     c92:	a0 0d       	add	r26, r0
     c94:	61 1d       	adc	r22, r1
     c96:	22 1f       	adc	r18, r18
     c98:	74 9f       	mul	r23, r20
     c9a:	33 27       	eor	r19, r19
     c9c:	a0 0d       	add	r26, r0
     c9e:	61 1d       	adc	r22, r1
     ca0:	23 1f       	adc	r18, r19
     ca2:	84 9f       	mul	r24, r20
     ca4:	60 0d       	add	r22, r0
     ca6:	21 1d       	adc	r18, r1
     ca8:	82 2f       	mov	r24, r18
     caa:	76 2f       	mov	r23, r22
     cac:	6a 2f       	mov	r22, r26
     cae:	11 24       	eor	r1, r1
     cb0:	9f 57       	subi	r25, 0x7F	; 127
     cb2:	50 40       	sbci	r21, 0x00	; 0
     cb4:	8a f0       	brmi	.+34     	; 0xcd8 <__mulsf3_pse+0x84>
     cb6:	e1 f0       	breq	.+56     	; 0xcf0 <__mulsf3_pse+0x9c>
     cb8:	88 23       	and	r24, r24
     cba:	4a f0       	brmi	.+18     	; 0xcce <__mulsf3_pse+0x7a>
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	bb 1f       	adc	r27, r27
     cc2:	66 1f       	adc	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	91 50       	subi	r25, 0x01	; 1
     cca:	50 40       	sbci	r21, 0x00	; 0
     ccc:	a9 f7       	brne	.-22     	; 0xcb8 <__mulsf3_pse+0x64>
     cce:	9e 3f       	cpi	r25, 0xFE	; 254
     cd0:	51 05       	cpc	r21, r1
     cd2:	70 f0       	brcs	.+28     	; 0xcf0 <__mulsf3_pse+0x9c>
     cd4:	60 cf       	rjmp	.-320    	; 0xb96 <__fp_inf>
     cd6:	aa cf       	rjmp	.-172    	; 0xc2c <__fp_szero>
     cd8:	5f 3f       	cpi	r21, 0xFF	; 255
     cda:	ec f3       	brlt	.-6      	; 0xcd6 <__mulsf3_pse+0x82>
     cdc:	98 3e       	cpi	r25, 0xE8	; 232
     cde:	dc f3       	brlt	.-10     	; 0xcd6 <__mulsf3_pse+0x82>
     ce0:	86 95       	lsr	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	b7 95       	ror	r27
     ce8:	f7 95       	ror	r31
     cea:	e7 95       	ror	r30
     cec:	9f 5f       	subi	r25, 0xFF	; 255
     cee:	c1 f7       	brne	.-16     	; 0xce0 <__mulsf3_pse+0x8c>
     cf0:	fe 2b       	or	r31, r30
     cf2:	88 0f       	add	r24, r24
     cf4:	91 1d       	adc	r25, r1
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	97 f9       	bld	r25, 7
     cfc:	08 95       	ret

00000cfe <printf>:
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e8       	ldi	r30, 0x85	; 133
     d04:	f6 e0       	ldi	r31, 0x06	; 6
     d06:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__prologue_saves__+0x20>
     d0a:	fe 01       	movw	r30, r28
     d0c:	35 96       	adiw	r30, 0x05	; 5
     d0e:	61 91       	ld	r22, Z+
     d10:	71 91       	ld	r23, Z+
     d12:	af 01       	movw	r20, r30
     d14:	80 91 12 02 	lds	r24, 0x0212
     d18:	90 91 13 02 	lds	r25, 0x0213
     d1c:	0e 94 c0 06 	call	0xd80	; 0xd80 <vfprintf>
     d20:	e2 e0       	ldi	r30, 0x02	; 2
     d22:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__epilogue_restores__+0x20>

00000d26 <puts>:
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	e0 91 12 02 	lds	r30, 0x0212
     d32:	f0 91 13 02 	lds	r31, 0x0213
     d36:	23 81       	ldd	r18, Z+3	; 0x03
     d38:	21 ff       	sbrs	r18, 1
     d3a:	1b c0       	rjmp	.+54     	; 0xd72 <puts+0x4c>
     d3c:	ec 01       	movw	r28, r24
     d3e:	00 e0       	ldi	r16, 0x00	; 0
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	89 91       	ld	r24, Y+
     d44:	60 91 12 02 	lds	r22, 0x0212
     d48:	70 91 13 02 	lds	r23, 0x0213
     d4c:	db 01       	movw	r26, r22
     d4e:	18 96       	adiw	r26, 0x08	; 8
     d50:	ed 91       	ld	r30, X+
     d52:	fc 91       	ld	r31, X
     d54:	19 97       	sbiw	r26, 0x09	; 9
     d56:	88 23       	and	r24, r24
     d58:	31 f0       	breq	.+12     	; 0xd66 <puts+0x40>
     d5a:	09 95       	icall
     d5c:	89 2b       	or	r24, r25
     d5e:	89 f3       	breq	.-30     	; 0xd42 <puts+0x1c>
     d60:	0f ef       	ldi	r16, 0xFF	; 255
     d62:	1f ef       	ldi	r17, 0xFF	; 255
     d64:	ee cf       	rjmp	.-36     	; 0xd42 <puts+0x1c>
     d66:	8a e0       	ldi	r24, 0x0A	; 10
     d68:	09 95       	icall
     d6a:	89 2b       	or	r24, r25
     d6c:	11 f4       	brne	.+4      	; 0xd72 <puts+0x4c>
     d6e:	c8 01       	movw	r24, r16
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <puts+0x50>
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <vfprintf>:
     d80:	ac e0       	ldi	r26, 0x0C	; 12
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 ec       	ldi	r30, 0xC6	; 198
     d86:	f6 e0       	ldi	r31, 0x06	; 6
     d88:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__prologue_saves__>
     d8c:	7c 01       	movw	r14, r24
     d8e:	6b 01       	movw	r12, r22
     d90:	8a 01       	movw	r16, r20
     d92:	fc 01       	movw	r30, r24
     d94:	17 82       	std	Z+7, r1	; 0x07
     d96:	16 82       	std	Z+6, r1	; 0x06
     d98:	83 81       	ldd	r24, Z+3	; 0x03
     d9a:	81 ff       	sbrs	r24, 1
     d9c:	bd c1       	rjmp	.+890    	; 0x1118 <vfprintf+0x398>
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	4c 01       	movw	r8, r24
     da4:	f7 01       	movw	r30, r14
     da6:	93 81       	ldd	r25, Z+3	; 0x03
     da8:	f6 01       	movw	r30, r12
     daa:	93 fd       	sbrc	r25, 3
     dac:	85 91       	lpm	r24, Z+
     dae:	93 ff       	sbrs	r25, 3
     db0:	81 91       	ld	r24, Z+
     db2:	6f 01       	movw	r12, r30
     db4:	88 23       	and	r24, r24
     db6:	09 f4       	brne	.+2      	; 0xdba <vfprintf+0x3a>
     db8:	ab c1       	rjmp	.+854    	; 0x1110 <vfprintf+0x390>
     dba:	85 32       	cpi	r24, 0x25	; 37
     dbc:	39 f4       	brne	.+14     	; 0xdcc <vfprintf+0x4c>
     dbe:	93 fd       	sbrc	r25, 3
     dc0:	85 91       	lpm	r24, Z+
     dc2:	93 ff       	sbrs	r25, 3
     dc4:	81 91       	ld	r24, Z+
     dc6:	6f 01       	movw	r12, r30
     dc8:	85 32       	cpi	r24, 0x25	; 37
     dca:	29 f4       	brne	.+10     	; 0xdd6 <vfprintf+0x56>
     dcc:	b7 01       	movw	r22, r14
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
     dd4:	e7 cf       	rjmp	.-50     	; 0xda4 <vfprintf+0x24>
     dd6:	51 2c       	mov	r5, r1
     dd8:	31 2c       	mov	r3, r1
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	20 32       	cpi	r18, 0x20	; 32
     dde:	a0 f4       	brcc	.+40     	; 0xe08 <vfprintf+0x88>
     de0:	8b 32       	cpi	r24, 0x2B	; 43
     de2:	69 f0       	breq	.+26     	; 0xdfe <vfprintf+0x7e>
     de4:	30 f4       	brcc	.+12     	; 0xdf2 <vfprintf+0x72>
     de6:	80 32       	cpi	r24, 0x20	; 32
     de8:	59 f0       	breq	.+22     	; 0xe00 <vfprintf+0x80>
     dea:	83 32       	cpi	r24, 0x23	; 35
     dec:	69 f4       	brne	.+26     	; 0xe08 <vfprintf+0x88>
     dee:	20 61       	ori	r18, 0x10	; 16
     df0:	2c c0       	rjmp	.+88     	; 0xe4a <vfprintf+0xca>
     df2:	8d 32       	cpi	r24, 0x2D	; 45
     df4:	39 f0       	breq	.+14     	; 0xe04 <vfprintf+0x84>
     df6:	80 33       	cpi	r24, 0x30	; 48
     df8:	39 f4       	brne	.+14     	; 0xe08 <vfprintf+0x88>
     dfa:	21 60       	ori	r18, 0x01	; 1
     dfc:	26 c0       	rjmp	.+76     	; 0xe4a <vfprintf+0xca>
     dfe:	22 60       	ori	r18, 0x02	; 2
     e00:	24 60       	ori	r18, 0x04	; 4
     e02:	23 c0       	rjmp	.+70     	; 0xe4a <vfprintf+0xca>
     e04:	28 60       	ori	r18, 0x08	; 8
     e06:	21 c0       	rjmp	.+66     	; 0xe4a <vfprintf+0xca>
     e08:	27 fd       	sbrc	r18, 7
     e0a:	27 c0       	rjmp	.+78     	; 0xe5a <vfprintf+0xda>
     e0c:	30 ed       	ldi	r19, 0xD0	; 208
     e0e:	38 0f       	add	r19, r24
     e10:	3a 30       	cpi	r19, 0x0A	; 10
     e12:	78 f4       	brcc	.+30     	; 0xe32 <vfprintf+0xb2>
     e14:	26 ff       	sbrs	r18, 6
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0xa4>
     e18:	fa e0       	ldi	r31, 0x0A	; 10
     e1a:	5f 9e       	mul	r5, r31
     e1c:	30 0d       	add	r19, r0
     e1e:	11 24       	eor	r1, r1
     e20:	53 2e       	mov	r5, r19
     e22:	13 c0       	rjmp	.+38     	; 0xe4a <vfprintf+0xca>
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	38 9e       	mul	r3, r24
     e28:	30 0d       	add	r19, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	33 2e       	mov	r3, r19
     e2e:	20 62       	ori	r18, 0x20	; 32
     e30:	0c c0       	rjmp	.+24     	; 0xe4a <vfprintf+0xca>
     e32:	8e 32       	cpi	r24, 0x2E	; 46
     e34:	21 f4       	brne	.+8      	; 0xe3e <vfprintf+0xbe>
     e36:	26 fd       	sbrc	r18, 6
     e38:	6b c1       	rjmp	.+726    	; 0x1110 <vfprintf+0x390>
     e3a:	20 64       	ori	r18, 0x40	; 64
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <vfprintf+0xca>
     e3e:	8c 36       	cpi	r24, 0x6C	; 108
     e40:	11 f4       	brne	.+4      	; 0xe46 <vfprintf+0xc6>
     e42:	20 68       	ori	r18, 0x80	; 128
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0xca>
     e46:	88 36       	cpi	r24, 0x68	; 104
     e48:	41 f4       	brne	.+16     	; 0xe5a <vfprintf+0xda>
     e4a:	f6 01       	movw	r30, r12
     e4c:	93 fd       	sbrc	r25, 3
     e4e:	85 91       	lpm	r24, Z+
     e50:	93 ff       	sbrs	r25, 3
     e52:	81 91       	ld	r24, Z+
     e54:	6f 01       	movw	r12, r30
     e56:	81 11       	cpse	r24, r1
     e58:	c1 cf       	rjmp	.-126    	; 0xddc <vfprintf+0x5c>
     e5a:	98 2f       	mov	r25, r24
     e5c:	9f 7d       	andi	r25, 0xDF	; 223
     e5e:	95 54       	subi	r25, 0x45	; 69
     e60:	93 30       	cpi	r25, 0x03	; 3
     e62:	28 f4       	brcc	.+10     	; 0xe6e <vfprintf+0xee>
     e64:	0c 5f       	subi	r16, 0xFC	; 252
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	ff e3       	ldi	r31, 0x3F	; 63
     e6a:	f9 83       	std	Y+1, r31	; 0x01
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <vfprintf+0x108>
     e6e:	83 36       	cpi	r24, 0x63	; 99
     e70:	31 f0       	breq	.+12     	; 0xe7e <vfprintf+0xfe>
     e72:	83 37       	cpi	r24, 0x73	; 115
     e74:	71 f0       	breq	.+28     	; 0xe92 <vfprintf+0x112>
     e76:	83 35       	cpi	r24, 0x53	; 83
     e78:	09 f0       	breq	.+2      	; 0xe7c <vfprintf+0xfc>
     e7a:	5b c0       	rjmp	.+182    	; 0xf32 <vfprintf+0x1b2>
     e7c:	22 c0       	rjmp	.+68     	; 0xec2 <vfprintf+0x142>
     e7e:	f8 01       	movw	r30, r16
     e80:	80 81       	ld	r24, Z
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	0e 5f       	subi	r16, 0xFE	; 254
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	44 24       	eor	r4, r4
     e8a:	43 94       	inc	r4
     e8c:	51 2c       	mov	r5, r1
     e8e:	54 01       	movw	r10, r8
     e90:	15 c0       	rjmp	.+42     	; 0xebc <vfprintf+0x13c>
     e92:	38 01       	movw	r6, r16
     e94:	f2 e0       	ldi	r31, 0x02	; 2
     e96:	6f 0e       	add	r6, r31
     e98:	71 1c       	adc	r7, r1
     e9a:	f8 01       	movw	r30, r16
     e9c:	a0 80       	ld	r10, Z
     e9e:	b1 80       	ldd	r11, Z+1	; 0x01
     ea0:	26 ff       	sbrs	r18, 6
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <vfprintf+0x12a>
     ea4:	65 2d       	mov	r22, r5
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0x12e>
     eaa:	6f ef       	ldi	r22, 0xFF	; 255
     eac:	7f ef       	ldi	r23, 0xFF	; 255
     eae:	c5 01       	movw	r24, r10
     eb0:	2c 87       	std	Y+12, r18	; 0x0c
     eb2:	0e 94 9d 08 	call	0x113a	; 0x113a <strnlen>
     eb6:	2c 01       	movw	r4, r24
     eb8:	83 01       	movw	r16, r6
     eba:	2c 85       	ldd	r18, Y+12	; 0x0c
     ebc:	2f 77       	andi	r18, 0x7F	; 127
     ebe:	22 2e       	mov	r2, r18
     ec0:	17 c0       	rjmp	.+46     	; 0xef0 <vfprintf+0x170>
     ec2:	38 01       	movw	r6, r16
     ec4:	f2 e0       	ldi	r31, 0x02	; 2
     ec6:	6f 0e       	add	r6, r31
     ec8:	71 1c       	adc	r7, r1
     eca:	f8 01       	movw	r30, r16
     ecc:	a0 80       	ld	r10, Z
     ece:	b1 80       	ldd	r11, Z+1	; 0x01
     ed0:	26 ff       	sbrs	r18, 6
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x15a>
     ed4:	65 2d       	mov	r22, r5
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x15e>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	c5 01       	movw	r24, r10
     ee0:	2c 87       	std	Y+12, r18	; 0x0c
     ee2:	0e 94 92 08 	call	0x1124	; 0x1124 <strnlen_P>
     ee6:	2c 01       	movw	r4, r24
     ee8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eea:	20 68       	ori	r18, 0x80	; 128
     eec:	22 2e       	mov	r2, r18
     eee:	83 01       	movw	r16, r6
     ef0:	23 fc       	sbrc	r2, 3
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <vfprintf+0x1aa>
     ef4:	83 2d       	mov	r24, r3
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	48 16       	cp	r4, r24
     efa:	59 06       	cpc	r5, r25
     efc:	b0 f4       	brcc	.+44     	; 0xf2a <vfprintf+0x1aa>
     efe:	b7 01       	movw	r22, r14
     f00:	80 e2       	ldi	r24, 0x20	; 32
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
     f08:	3a 94       	dec	r3
     f0a:	f4 cf       	rjmp	.-24     	; 0xef4 <vfprintf+0x174>
     f0c:	f5 01       	movw	r30, r10
     f0e:	27 fc       	sbrc	r2, 7
     f10:	85 91       	lpm	r24, Z+
     f12:	27 fe       	sbrs	r2, 7
     f14:	81 91       	ld	r24, Z+
     f16:	5f 01       	movw	r10, r30
     f18:	b7 01       	movw	r22, r14
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
     f20:	31 10       	cpse	r3, r1
     f22:	3a 94       	dec	r3
     f24:	f1 e0       	ldi	r31, 0x01	; 1
     f26:	4f 1a       	sub	r4, r31
     f28:	51 08       	sbc	r5, r1
     f2a:	41 14       	cp	r4, r1
     f2c:	51 04       	cpc	r5, r1
     f2e:	71 f7       	brne	.-36     	; 0xf0c <vfprintf+0x18c>
     f30:	e5 c0       	rjmp	.+458    	; 0x10fc <vfprintf+0x37c>
     f32:	84 36       	cpi	r24, 0x64	; 100
     f34:	11 f0       	breq	.+4      	; 0xf3a <vfprintf+0x1ba>
     f36:	89 36       	cpi	r24, 0x69	; 105
     f38:	39 f5       	brne	.+78     	; 0xf88 <vfprintf+0x208>
     f3a:	f8 01       	movw	r30, r16
     f3c:	27 ff       	sbrs	r18, 7
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <vfprintf+0x1ce>
     f40:	60 81       	ld	r22, Z
     f42:	71 81       	ldd	r23, Z+1	; 0x01
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	0c 5f       	subi	r16, 0xFC	; 252
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <vfprintf+0x1de>
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	88 27       	eor	r24, r24
     f54:	77 fd       	sbrc	r23, 7
     f56:	80 95       	com	r24
     f58:	98 2f       	mov	r25, r24
     f5a:	0e 5f       	subi	r16, 0xFE	; 254
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	2f 76       	andi	r18, 0x6F	; 111
     f60:	b2 2e       	mov	r11, r18
     f62:	97 ff       	sbrs	r25, 7
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <vfprintf+0x1f8>
     f66:	90 95       	com	r25
     f68:	80 95       	com	r24
     f6a:	70 95       	com	r23
     f6c:	61 95       	neg	r22
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	b2 2e       	mov	r11, r18
     f78:	2a e0       	ldi	r18, 0x0A	; 10
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	a4 01       	movw	r20, r8
     f7e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__ultoa_invert>
     f82:	a8 2e       	mov	r10, r24
     f84:	a8 18       	sub	r10, r8
     f86:	44 c0       	rjmp	.+136    	; 0x1010 <vfprintf+0x290>
     f88:	85 37       	cpi	r24, 0x75	; 117
     f8a:	29 f4       	brne	.+10     	; 0xf96 <vfprintf+0x216>
     f8c:	2f 7e       	andi	r18, 0xEF	; 239
     f8e:	b2 2e       	mov	r11, r18
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	25 c0       	rjmp	.+74     	; 0xfe0 <vfprintf+0x260>
     f96:	f2 2f       	mov	r31, r18
     f98:	f9 7f       	andi	r31, 0xF9	; 249
     f9a:	bf 2e       	mov	r11, r31
     f9c:	8f 36       	cpi	r24, 0x6F	; 111
     f9e:	c1 f0       	breq	.+48     	; 0xfd0 <vfprintf+0x250>
     fa0:	18 f4       	brcc	.+6      	; 0xfa8 <vfprintf+0x228>
     fa2:	88 35       	cpi	r24, 0x58	; 88
     fa4:	79 f0       	breq	.+30     	; 0xfc4 <vfprintf+0x244>
     fa6:	b4 c0       	rjmp	.+360    	; 0x1110 <vfprintf+0x390>
     fa8:	80 37       	cpi	r24, 0x70	; 112
     faa:	19 f0       	breq	.+6      	; 0xfb2 <vfprintf+0x232>
     fac:	88 37       	cpi	r24, 0x78	; 120
     fae:	21 f0       	breq	.+8      	; 0xfb8 <vfprintf+0x238>
     fb0:	af c0       	rjmp	.+350    	; 0x1110 <vfprintf+0x390>
     fb2:	2f 2f       	mov	r18, r31
     fb4:	20 61       	ori	r18, 0x10	; 16
     fb6:	b2 2e       	mov	r11, r18
     fb8:	b4 fe       	sbrs	r11, 4
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <vfprintf+0x256>
     fbc:	8b 2d       	mov	r24, r11
     fbe:	84 60       	ori	r24, 0x04	; 4
     fc0:	b8 2e       	mov	r11, r24
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x256>
     fc4:	24 ff       	sbrs	r18, 4
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <vfprintf+0x25c>
     fc8:	9f 2f       	mov	r25, r31
     fca:	96 60       	ori	r25, 0x06	; 6
     fcc:	b9 2e       	mov	r11, r25
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <vfprintf+0x25c>
     fd0:	28 e0       	ldi	r18, 0x08	; 8
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <vfprintf+0x260>
     fd6:	20 e1       	ldi	r18, 0x10	; 16
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <vfprintf+0x260>
     fdc:	20 e1       	ldi	r18, 0x10	; 16
     fde:	32 e0       	ldi	r19, 0x02	; 2
     fe0:	f8 01       	movw	r30, r16
     fe2:	b7 fe       	sbrs	r11, 7
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <vfprintf+0x274>
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	0c 5f       	subi	r16, 0xFC	; 252
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x280>
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 5f       	subi	r16, 0xFE	; 254
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	a4 01       	movw	r20, r8
    1002:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__ultoa_invert>
    1006:	a8 2e       	mov	r10, r24
    1008:	a8 18       	sub	r10, r8
    100a:	fb 2d       	mov	r31, r11
    100c:	ff 77       	andi	r31, 0x7F	; 127
    100e:	bf 2e       	mov	r11, r31
    1010:	b6 fe       	sbrs	r11, 6
    1012:	0b c0       	rjmp	.+22     	; 0x102a <vfprintf+0x2aa>
    1014:	2b 2d       	mov	r18, r11
    1016:	2e 7f       	andi	r18, 0xFE	; 254
    1018:	a5 14       	cp	r10, r5
    101a:	50 f4       	brcc	.+20     	; 0x1030 <vfprintf+0x2b0>
    101c:	b4 fe       	sbrs	r11, 4
    101e:	0a c0       	rjmp	.+20     	; 0x1034 <vfprintf+0x2b4>
    1020:	b2 fc       	sbrc	r11, 2
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <vfprintf+0x2b4>
    1024:	2b 2d       	mov	r18, r11
    1026:	2e 7e       	andi	r18, 0xEE	; 238
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <vfprintf+0x2b4>
    102a:	7a 2c       	mov	r7, r10
    102c:	2b 2d       	mov	r18, r11
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <vfprintf+0x2b6>
    1030:	7a 2c       	mov	r7, r10
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <vfprintf+0x2b6>
    1034:	75 2c       	mov	r7, r5
    1036:	24 ff       	sbrs	r18, 4
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <vfprintf+0x2d4>
    103a:	fe 01       	movw	r30, r28
    103c:	ea 0d       	add	r30, r10
    103e:	f1 1d       	adc	r31, r1
    1040:	80 81       	ld	r24, Z
    1042:	80 33       	cpi	r24, 0x30	; 48
    1044:	11 f4       	brne	.+4      	; 0x104a <vfprintf+0x2ca>
    1046:	29 7e       	andi	r18, 0xE9	; 233
    1048:	09 c0       	rjmp	.+18     	; 0x105c <vfprintf+0x2dc>
    104a:	22 ff       	sbrs	r18, 2
    104c:	06 c0       	rjmp	.+12     	; 0x105a <vfprintf+0x2da>
    104e:	73 94       	inc	r7
    1050:	73 94       	inc	r7
    1052:	04 c0       	rjmp	.+8      	; 0x105c <vfprintf+0x2dc>
    1054:	82 2f       	mov	r24, r18
    1056:	86 78       	andi	r24, 0x86	; 134
    1058:	09 f0       	breq	.+2      	; 0x105c <vfprintf+0x2dc>
    105a:	73 94       	inc	r7
    105c:	23 fd       	sbrc	r18, 3
    105e:	13 c0       	rjmp	.+38     	; 0x1086 <vfprintf+0x306>
    1060:	20 ff       	sbrs	r18, 0
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <vfprintf+0x2f0>
    1064:	5a 2c       	mov	r5, r10
    1066:	73 14       	cp	r7, r3
    1068:	18 f4       	brcc	.+6      	; 0x1070 <vfprintf+0x2f0>
    106a:	53 0c       	add	r5, r3
    106c:	57 18       	sub	r5, r7
    106e:	73 2c       	mov	r7, r3
    1070:	73 14       	cp	r7, r3
    1072:	68 f4       	brcc	.+26     	; 0x108e <vfprintf+0x30e>
    1074:	b7 01       	movw	r22, r14
    1076:	80 e2       	ldi	r24, 0x20	; 32
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	2c 87       	std	Y+12, r18	; 0x0c
    107c:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    1080:	73 94       	inc	r7
    1082:	2c 85       	ldd	r18, Y+12	; 0x0c
    1084:	f5 cf       	rjmp	.-22     	; 0x1070 <vfprintf+0x2f0>
    1086:	73 14       	cp	r7, r3
    1088:	10 f4       	brcc	.+4      	; 0x108e <vfprintf+0x30e>
    108a:	37 18       	sub	r3, r7
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <vfprintf+0x310>
    108e:	31 2c       	mov	r3, r1
    1090:	24 ff       	sbrs	r18, 4
    1092:	12 c0       	rjmp	.+36     	; 0x10b8 <vfprintf+0x338>
    1094:	b7 01       	movw	r22, r14
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	2c 87       	std	Y+12, r18	; 0x0c
    109c:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a2:	22 ff       	sbrs	r18, 2
    10a4:	17 c0       	rjmp	.+46     	; 0x10d4 <vfprintf+0x354>
    10a6:	21 ff       	sbrs	r18, 1
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <vfprintf+0x330>
    10aa:	88 e5       	ldi	r24, 0x58	; 88
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x334>
    10b0:	88 e7       	ldi	r24, 0x78	; 120
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b7 01       	movw	r22, r14
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <vfprintf+0x350>
    10b8:	82 2f       	mov	r24, r18
    10ba:	86 78       	andi	r24, 0x86	; 134
    10bc:	59 f0       	breq	.+22     	; 0x10d4 <vfprintf+0x354>
    10be:	21 fd       	sbrc	r18, 1
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x346>
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <vfprintf+0x348>
    10c6:	8b e2       	ldi	r24, 0x2B	; 43
    10c8:	27 fd       	sbrc	r18, 7
    10ca:	8d e2       	ldi	r24, 0x2D	; 45
    10cc:	b7 01       	movw	r22, r14
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10d4:	a5 14       	cp	r10, r5
    10d6:	38 f4       	brcc	.+14     	; 0x10e6 <vfprintf+0x366>
    10d8:	b7 01       	movw	r22, r14
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10e2:	5a 94       	dec	r5
    10e4:	f7 cf       	rjmp	.-18     	; 0x10d4 <vfprintf+0x354>
    10e6:	aa 94       	dec	r10
    10e8:	f4 01       	movw	r30, r8
    10ea:	ea 0d       	add	r30, r10
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	b7 01       	movw	r22, r14
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    10f8:	a1 10       	cpse	r10, r1
    10fa:	f5 cf       	rjmp	.-22     	; 0x10e6 <vfprintf+0x366>
    10fc:	33 20       	and	r3, r3
    10fe:	09 f4       	brne	.+2      	; 0x1102 <vfprintf+0x382>
    1100:	51 ce       	rjmp	.-862    	; 0xda4 <vfprintf+0x24>
    1102:	b7 01       	movw	r22, r14
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 a8 08 	call	0x1150	; 0x1150 <fputc>
    110c:	3a 94       	dec	r3
    110e:	f6 cf       	rjmp	.-20     	; 0x10fc <vfprintf+0x37c>
    1110:	f7 01       	movw	r30, r14
    1112:	86 81       	ldd	r24, Z+6	; 0x06
    1114:	97 81       	ldd	r25, Z+7	; 0x07
    1116:	02 c0       	rjmp	.+4      	; 0x111c <vfprintf+0x39c>
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	2c 96       	adiw	r28, 0x0c	; 12
    111e:	e2 e1       	ldi	r30, 0x12	; 18
    1120:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__epilogue_restores__>

00001124 <strnlen_P>:
    1124:	fc 01       	movw	r30, r24
    1126:	05 90       	lpm	r0, Z+
    1128:	61 50       	subi	r22, 0x01	; 1
    112a:	70 40       	sbci	r23, 0x00	; 0
    112c:	01 10       	cpse	r0, r1
    112e:	d8 f7       	brcc	.-10     	; 0x1126 <strnlen_P+0x2>
    1130:	80 95       	com	r24
    1132:	90 95       	com	r25
    1134:	8e 0f       	add	r24, r30
    1136:	9f 1f       	adc	r25, r31
    1138:	08 95       	ret

0000113a <strnlen>:
    113a:	fc 01       	movw	r30, r24
    113c:	61 50       	subi	r22, 0x01	; 1
    113e:	70 40       	sbci	r23, 0x00	; 0
    1140:	01 90       	ld	r0, Z+
    1142:	01 10       	cpse	r0, r1
    1144:	d8 f7       	brcc	.-10     	; 0x113c <strnlen+0x2>
    1146:	80 95       	com	r24
    1148:	90 95       	com	r25
    114a:	8e 0f       	add	r24, r30
    114c:	9f 1f       	adc	r25, r31
    114e:	08 95       	ret

00001150 <fputc>:
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	18 2f       	mov	r17, r24
    115a:	09 2f       	mov	r16, r25
    115c:	eb 01       	movw	r28, r22
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 fd       	sbrc	r24, 1
    1162:	03 c0       	rjmp	.+6      	; 0x116a <fputc+0x1a>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	9f ef       	ldi	r25, 0xFF	; 255
    1168:	20 c0       	rjmp	.+64     	; 0x11aa <fputc+0x5a>
    116a:	82 ff       	sbrs	r24, 2
    116c:	10 c0       	rjmp	.+32     	; 0x118e <fputc+0x3e>
    116e:	4e 81       	ldd	r20, Y+6	; 0x06
    1170:	5f 81       	ldd	r21, Y+7	; 0x07
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	42 17       	cp	r20, r18
    1178:	53 07       	cpc	r21, r19
    117a:	7c f4       	brge	.+30     	; 0x119a <fputc+0x4a>
    117c:	e8 81       	ld	r30, Y
    117e:	f9 81       	ldd	r31, Y+1	; 0x01
    1180:	9f 01       	movw	r18, r30
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	39 83       	std	Y+1, r19	; 0x01
    1188:	28 83       	st	Y, r18
    118a:	10 83       	st	Z, r17
    118c:	06 c0       	rjmp	.+12     	; 0x119a <fputc+0x4a>
    118e:	e8 85       	ldd	r30, Y+8	; 0x08
    1190:	f9 85       	ldd	r31, Y+9	; 0x09
    1192:	81 2f       	mov	r24, r17
    1194:	09 95       	icall
    1196:	89 2b       	or	r24, r25
    1198:	29 f7       	brne	.-54     	; 0x1164 <fputc+0x14>
    119a:	2e 81       	ldd	r18, Y+6	; 0x06
    119c:	3f 81       	ldd	r19, Y+7	; 0x07
    119e:	2f 5f       	subi	r18, 0xFF	; 255
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	3f 83       	std	Y+7, r19	; 0x07
    11a4:	2e 83       	std	Y+6, r18	; 0x06
    11a6:	81 2f       	mov	r24, r17
    11a8:	90 2f       	mov	r25, r16
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <__ultoa_invert>:
    11b4:	fa 01       	movw	r30, r20
    11b6:	aa 27       	eor	r26, r26
    11b8:	28 30       	cpi	r18, 0x08	; 8
    11ba:	51 f1       	breq	.+84     	; 0x1210 <__ultoa_invert+0x5c>
    11bc:	20 31       	cpi	r18, 0x10	; 16
    11be:	81 f1       	breq	.+96     	; 0x1220 <__ultoa_invert+0x6c>
    11c0:	e8 94       	clt
    11c2:	6f 93       	push	r22
    11c4:	6e 7f       	andi	r22, 0xFE	; 254
    11c6:	6e 5f       	subi	r22, 0xFE	; 254
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	af 4f       	sbci	r26, 0xFF	; 255
    11d0:	b1 e0       	ldi	r27, 0x01	; 1
    11d2:	3e d0       	rcall	.+124    	; 0x1250 <__ultoa_invert+0x9c>
    11d4:	b4 e0       	ldi	r27, 0x04	; 4
    11d6:	3c d0       	rcall	.+120    	; 0x1250 <__ultoa_invert+0x9c>
    11d8:	67 0f       	add	r22, r23
    11da:	78 1f       	adc	r23, r24
    11dc:	89 1f       	adc	r24, r25
    11de:	9a 1f       	adc	r25, r26
    11e0:	a1 1d       	adc	r26, r1
    11e2:	68 0f       	add	r22, r24
    11e4:	79 1f       	adc	r23, r25
    11e6:	8a 1f       	adc	r24, r26
    11e8:	91 1d       	adc	r25, r1
    11ea:	a1 1d       	adc	r26, r1
    11ec:	6a 0f       	add	r22, r26
    11ee:	71 1d       	adc	r23, r1
    11f0:	81 1d       	adc	r24, r1
    11f2:	91 1d       	adc	r25, r1
    11f4:	a1 1d       	adc	r26, r1
    11f6:	20 d0       	rcall	.+64     	; 0x1238 <__ultoa_invert+0x84>
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__ultoa_invert+0x48>
    11fa:	68 94       	set
    11fc:	3f 91       	pop	r19
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	26 9f       	mul	r18, r22
    1202:	11 24       	eor	r1, r1
    1204:	30 19       	sub	r19, r0
    1206:	30 5d       	subi	r19, 0xD0	; 208
    1208:	31 93       	st	Z+, r19
    120a:	de f6       	brtc	.-74     	; 0x11c2 <__ultoa_invert+0xe>
    120c:	cf 01       	movw	r24, r30
    120e:	08 95       	ret
    1210:	46 2f       	mov	r20, r22
    1212:	47 70       	andi	r20, 0x07	; 7
    1214:	40 5d       	subi	r20, 0xD0	; 208
    1216:	41 93       	st	Z+, r20
    1218:	b3 e0       	ldi	r27, 0x03	; 3
    121a:	0f d0       	rcall	.+30     	; 0x123a <__ultoa_invert+0x86>
    121c:	c9 f7       	brne	.-14     	; 0x1210 <__ultoa_invert+0x5c>
    121e:	f6 cf       	rjmp	.-20     	; 0x120c <__ultoa_invert+0x58>
    1220:	46 2f       	mov	r20, r22
    1222:	4f 70       	andi	r20, 0x0F	; 15
    1224:	40 5d       	subi	r20, 0xD0	; 208
    1226:	4a 33       	cpi	r20, 0x3A	; 58
    1228:	18 f0       	brcs	.+6      	; 0x1230 <__ultoa_invert+0x7c>
    122a:	49 5d       	subi	r20, 0xD9	; 217
    122c:	31 fd       	sbrc	r19, 1
    122e:	40 52       	subi	r20, 0x20	; 32
    1230:	41 93       	st	Z+, r20
    1232:	02 d0       	rcall	.+4      	; 0x1238 <__ultoa_invert+0x84>
    1234:	a9 f7       	brne	.-22     	; 0x1220 <__ultoa_invert+0x6c>
    1236:	ea cf       	rjmp	.-44     	; 0x120c <__ultoa_invert+0x58>
    1238:	b4 e0       	ldi	r27, 0x04	; 4
    123a:	a6 95       	lsr	r26
    123c:	97 95       	ror	r25
    123e:	87 95       	ror	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	ba 95       	dec	r27
    1246:	c9 f7       	brne	.-14     	; 0x123a <__ultoa_invert+0x86>
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	61 05       	cpc	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	08 95       	ret
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	0a 2e       	mov	r0, r26
    1256:	06 94       	lsr	r0
    1258:	57 95       	ror	r21
    125a:	47 95       	ror	r20
    125c:	37 95       	ror	r19
    125e:	27 95       	ror	r18
    1260:	ba 95       	dec	r27
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__ultoa_invert+0xa2>
    1264:	62 0f       	add	r22, r18
    1266:	73 1f       	adc	r23, r19
    1268:	84 1f       	adc	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	a0 1d       	adc	r26, r0
    126e:	08 95       	ret

00001270 <__prologue_saves__>:
    1270:	2f 92       	push	r2
    1272:	3f 92       	push	r3
    1274:	4f 92       	push	r4
    1276:	5f 92       	push	r5
    1278:	6f 92       	push	r6
    127a:	7f 92       	push	r7
    127c:	8f 92       	push	r8
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	ca 1b       	sub	r28, r26
    129a:	db 0b       	sbc	r29, r27
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	09 94       	ijmp

000012a8 <__epilogue_restores__>:
    12a8:	2a 88       	ldd	r2, Y+18	; 0x12
    12aa:	39 88       	ldd	r3, Y+17	; 0x11
    12ac:	48 88       	ldd	r4, Y+16	; 0x10
    12ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    12b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    12b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ba:	b9 84       	ldd	r11, Y+9	; 0x09
    12bc:	c8 84       	ldd	r12, Y+8	; 0x08
    12be:	df 80       	ldd	r13, Y+7	; 0x07
    12c0:	ee 80       	ldd	r14, Y+6	; 0x06
    12c2:	fd 80       	ldd	r15, Y+5	; 0x05
    12c4:	0c 81       	ldd	r16, Y+4	; 0x04
    12c6:	1b 81       	ldd	r17, Y+3	; 0x03
    12c8:	aa 81       	ldd	r26, Y+2	; 0x02
    12ca:	b9 81       	ldd	r27, Y+1	; 0x01
    12cc:	ce 0f       	add	r28, r30
    12ce:	d1 1d       	adc	r29, r1
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	ed 01       	movw	r28, r26
    12dc:	08 95       	ret

000012de <_exit>:
    12de:	f8 94       	cli

000012e0 <__stop_program>:
    12e0:	ff cf       	rjmp	.-2      	; 0x12e0 <__stop_program>
