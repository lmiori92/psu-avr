
psu_2ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00001b1a  00001bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000278  008001d8  008001d8  00001c86  2**0
                  ALLOC
  3 .stab         00003f0c  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000266d  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e1       	ldi	r30, 0x1A	; 26
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 3d       	cpi	r26, 0xD8	; 216
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a8 ed       	ldi	r26, 0xD8	; 216
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 35       	cpi	r26, 0x50	; 80
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 97 03 	call	0x72e	; 0x72e <main>
      9e:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__vector_default>

000000a6 <__vector_21>:
 *        Keep it as small as possible to avoid jitter and lower
 *        sampling rate.
 *
 */
ISR(ADC_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	7f 93       	push	r23
      bc:	8f 93       	push	r24
      be:	9f 93       	push	r25
      c0:	af 93       	push	r26
      c2:	bf 93       	push	r27
      c4:	ef 93       	push	r30
      c6:	ff 93       	push	r31
    capture[capture_index] = last_captureS;
    /* HARDWARE NOISE DEBUG */
    if (last_captureS > adc_maxS) adc_maxS = last_captureS;
    if (last_captureS < adc_minS) adc_minS = last_captureS;
#else
    if (adc_mux_switch == false)
      c8:	80 91 e4 01 	lds	r24, 0x01E4
      cc:	81 11       	cpse	r24, r1
      ce:	27 c0       	rjmp	.+78     	; 0x11e <__vector_21+0x78>
    {
        /* Store the value */
        adc_samples[adc_mux_index] = (ADCL | (ADCH << 8U));
      d0:	80 91 e5 01 	lds	r24, 0x01E5
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	20 91 78 00 	lds	r18, 0x0078
      da:	40 91 79 00 	lds	r20, 0x0079
      de:	fc 01       	movw	r30, r24
      e0:	ee 0f       	add	r30, r30
      e2:	ff 1f       	adc	r31, r31
      e4:	e8 52       	subi	r30, 0x28	; 40
      e6:	fe 4f       	sbci	r31, 0xFE	; 254
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	34 2b       	or	r19, r20
      ec:	31 83       	std	Z+1, r19	; 0x01
      ee:	20 83       	st	Z, r18
        /* Advance the MUX index */
        adc_mux_index = (adc_mux_index + 1) % ADC_NUM;
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	66 e0       	ldi	r22, 0x06	; 6
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	0e 94 83 08 	call	0x1106	; 0x1106 <__divmodhi4>
      fa:	80 93 e5 01 	sts	0x01E5, r24
        /* Update the ADC MUX register */
        ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
      fe:	80 91 7c 00 	lds	r24, 0x007C
     102:	80 7f       	andi	r24, 0xF0	; 240
     104:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adc_mux_index;
     108:	80 91 7c 00 	lds	r24, 0x007C
     10c:	90 91 e5 01 	lds	r25, 0x01E5
     110:	89 2b       	or	r24, r25
     112:	80 93 7c 00 	sts	0x007C, r24
        adc_mux_switch = true;
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	80 93 e4 01 	sts	0x01E4, r24
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__vector_21+0x7c>
    }
    else
    {
        /* creates jitter, but we don't care here */
        adc_mux_switch = false;
     11e:	10 92 e4 01 	sts	0x01E4, r1
    DBG_HIGH;
#endif

    /* Kick-in another conversion */
    /* Set ADSC in ADCSRA (0x7A) to start another ADC conversion */
    ADCSRA |= (1 << ADSC);
     122:	80 91 7a 00 	lds	r24, 0x007A
     126:	80 64       	ori	r24, 0x40	; 64
     128:	80 93 7a 00 	sts	0x007A, r24

}
     12c:	ff 91       	pop	r31
     12e:	ef 91       	pop	r30
     130:	bf 91       	pop	r27
     132:	af 91       	pop	r26
     134:	9f 91       	pop	r25
     136:	8f 91       	pop	r24
     138:	7f 91       	pop	r23
     13a:	6f 91       	pop	r22
     13c:	5f 91       	pop	r21
     13e:	4f 91       	pop	r20
     140:	3f 91       	pop	r19
     142:	2f 91       	pop	r18
     144:	0f 90       	pop	r0
     146:	0f be       	out	0x3f, r0	; 63
     148:	0f 90       	pop	r0
     14a:	1f 90       	pop	r1
     14c:	18 95       	reti

0000014e <adc_init>:

    /* clear ADLAR in ADMUX (0x7C) to right-adjust the result */
    /* ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits) */
    /* Set REFS1..0 in ADMUX to change reference voltage */
    /* Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog channel */
    ADMUX &= ~((1 << ADLAR) | (1 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
     14e:	ec e7       	ldi	r30, 0x7C	; 124
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	80 71       	andi	r24, 0x10	; 16
     156:	80 83       	st	Z, r24

    /* Set the AVcc reference */
    ADMUX |= ((0 << REFS1) | (1 << REFS0));
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24

    /* Set ADEN in ADCSRA (0x7A) to enable the ADC.
       Note, this instruction takes 12 ADC clocks to execute
     */
    ADCSRA |= (1 << ADEN);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24

    /* Disable Free Running Mode (we want to change channel in the ISR) */
    //ADCSRA &= ~(1 << ADFR);

    /* Set the Prescaler to 128 */
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) |
     168:	80 81       	ld	r24, Z
     16a:	8f 64       	ori	r24, 0x4F	; 79
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <adc_get>:
/* nothing */
#endif

uint16_t adc_get(e_adc_channel channel)
{
    return adc_samples[channel];
     170:	e8 2f       	mov	r30, r24
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	e8 52       	subi	r30, 0x28	; 40
     17a:	fe 4f       	sbci	r31, 0xFE	; 254
}
     17c:	80 81       	ld	r24, Z
     17e:	91 81       	ldd	r25, Z+1	; 0x01
     180:	08 95       	ret

00000182 <adc_last_capture>:
 * @param   adc_max         pointer to the variable to store the maximum value
 * @return the value for the last capture
 *
 */
void adc_last_capture(uint16_t *last_capture, uint16_t *adc_min, uint16_t *adc_max)
{
     182:	08 95       	ret

00000184 <adc_last_reset>:
    *adc_max = adc_maxS;
#endif
}

void adc_last_reset(void)
{
     184:	08 95       	ret

00000186 <display_init>:
static t_display_status display_status;
static t_display_elem   display_buffer[DISPLAY_LINE_NUM][DISPLAY_CHAR_NUM];

void display_init(void)
{
    display_hal_init();
     186:	0e 94 74 01 	call	0x2e8	; 0x2e8 <display_hal_init>

}

void display_set_cursor(uint8_t line, uint8_t chr)
{
    display_status.line_n = (line < DISPLAY_LINE_NUM) ? line : (DISPLAY_LINE_NUM - 1U);
     18a:	10 92 46 02 	sts	0x0246, r1
    display_status.char_n = (chr  < DISPLAY_CHAR_NUM) ? chr  : (DISPLAY_CHAR_NUM - 1U);
     18e:	10 92 47 02 	sts	0x0247, r1
     192:	08 95       	ret

00000194 <display_clear>:
    display_hal_init();
    display_set_cursor(0, 0);
}

void display_clear(uint8_t lines)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
    uint8_t i;
    for (i = 0; i < DISPLAY_LINE_NUM; i++)
    {
        if (((lines >> i) & 0x1U) == 0x1U)
     198:	c8 2f       	mov	r28, r24
     19a:	80 ff       	sbrs	r24, 0
     19c:	08 c0       	rjmp	.+16     	; 0x1ae <display_clear+0x1a>
        {
            memset(display_buffer[i], (uint8_t)' ', DISPLAY_CHAR_NUM);
     19e:	40 e1       	ldi	r20, 0x10	; 16
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e2       	ldi	r22, 0x20	; 32
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	92 e0       	ldi	r25, 0x02	; 2
     1aa:	0e 94 95 0a 	call	0x152a	; 0x152a <memset>
void display_clear(uint8_t lines)
{
    uint8_t i;
    for (i = 0; i < DISPLAY_LINE_NUM; i++)
    {
        if (((lines >> i) & 0x1U) == 0x1U)
     1ae:	c1 ff       	sbrs	r28, 1
     1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <display_clear+0x32>
        {
            memset(display_buffer[i], (uint8_t)' ', DISPLAY_CHAR_NUM);
     1b2:	40 e1       	ldi	r20, 0x10	; 16
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e2       	ldi	r22, 0x20	; 32
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	86 e2       	ldi	r24, 0x26	; 38
     1bc:	92 e0       	ldi	r25, 0x02	; 2
        }
    }
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
    uint8_t i;
    for (i = 0; i < DISPLAY_LINE_NUM; i++)
    {
        if (((lines >> i) & 0x1U) == 0x1U)
        {
            memset(display_buffer[i], (uint8_t)' ', DISPLAY_CHAR_NUM);
     1c2:	0c 94 95 0a 	jmp	0x152a	; 0x152a <memset>
        }
    }
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <display_clear_all>:

void display_clear_all(void)
{
    display_clear(0xFFU);
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	0c 94 ca 00 	jmp	0x194	; 0x194 <display_clear>

000001d2 <display_periodic>:
}

void display_periodic(void)
{
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	86 e0       	ldi	r24, 0x06	; 6
     1e4:	e8 2e       	mov	r14, r24
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	f8 2e       	mov	r15, r24
    uint8_t i, j;

    for (i = 0; i < DISPLAY_LINE_NUM; i++)
     1ea:	d1 2c       	mov	r13, r1
{
    display_clear(0xFFU);
}

void display_periodic(void)
{
     1ec:	00 e0       	ldi	r16, 0x00	; 0
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c1 2c       	mov	r12, r1
     1f2:	e7 01       	movw	r28, r14
     1f4:	c0 0f       	add	r28, r16
     1f6:	d1 1f       	adc	r29, r17

    for (i = 0; i < DISPLAY_LINE_NUM; i++)
    {
        for (j = 0; j < DISPLAY_CHAR_NUM; j++)
        {
            if (display_buffer[i][j].character != display_buffer[i][j].character_prev)
     1f8:	88 81       	ld	r24, Y
     1fa:	99 81       	ldd	r25, Y+1	; 0x01
     1fc:	89 17       	cp	r24, r25
     1fe:	41 f0       	breq	.+16     	; 0x210 <display_periodic+0x3e>
            {
                display_buffer[i][j].character_prev = display_buffer[i][j].character;
     200:	89 83       	std	Y+1, r24	; 0x01
                display_hal_set_cursor(i, j);
     202:	6c 2d       	mov	r22, r12
     204:	8d 2d       	mov	r24, r13
     206:	0e 94 78 01 	call	0x2f0	; 0x2f0 <display_hal_set_cursor>
                display_hal_write_char(display_buffer[i][j].character);
     20a:	88 81       	ld	r24, Y
     20c:	0e 94 8e 01 	call	0x31c	; 0x31c <display_hal_write_char>
{
    uint8_t i, j;

    for (i = 0; i < DISPLAY_LINE_NUM; i++)
    {
        for (j = 0; j < DISPLAY_CHAR_NUM; j++)
     210:	c3 94       	inc	r12
     212:	0e 5f       	subi	r16, 0xFE	; 254
     214:	1f 4f       	sbci	r17, 0xFF	; 255
     216:	00 32       	cpi	r16, 0x20	; 32
     218:	11 05       	cpc	r17, r1
     21a:	59 f7       	brne	.-42     	; 0x1f2 <display_periodic+0x20>

void display_periodic(void)
{
    uint8_t i, j;

    for (i = 0; i < DISPLAY_LINE_NUM; i++)
     21c:	d3 94       	inc	r13
     21e:	80 e2       	ldi	r24, 0x20	; 32
     220:	e8 0e       	add	r14, r24
     222:	f1 1c       	adc	r15, r1
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	d8 12       	cpse	r13, r24
     228:	e1 cf       	rjmp	.-62     	; 0x1ec <display_periodic+0x1a>
                display_hal_write_char(display_buffer[i][j].character);
           }
        }
    }

}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	cf 90       	pop	r12
     23a:	08 95       	ret

0000023c <display_set_cursor>:

void display_set_cursor(uint8_t line, uint8_t chr)
{
    display_status.line_n = (line < DISPLAY_LINE_NUM) ? line : (DISPLAY_LINE_NUM - 1U);
     23c:	81 11       	cpse	r24, r1
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 46 02 	sts	0x0246, r24
    display_status.char_n = (chr  < DISPLAY_CHAR_NUM) ? chr  : (DISPLAY_CHAR_NUM - 1U);
     244:	60 31       	cpi	r22, 0x10	; 16
     246:	08 f0       	brcs	.+2      	; 0x24a <display_set_cursor+0xe>
     248:	6f e0       	ldi	r22, 0x0F	; 15
     24a:	60 93 47 02 	sts	0x0247, r22
     24e:	08 95       	ret

00000250 <display_advance_cursor>:
{
    uint8_t tmp;
    uint8_t dline;
    uint8_t dchar;

    tmp = (display_status.line_n * DISPLAY_CHAR_NUM) + display_status.char_n + num;
     250:	20 91 46 02 	lds	r18, 0x0246
     254:	90 91 47 02 	lds	r25, 0x0247
     258:	30 e1       	ldi	r19, 0x10	; 16
     25a:	23 9f       	mul	r18, r19
     25c:	90 0d       	add	r25, r0
     25e:	11 24       	eor	r1, r1
     260:	98 0f       	add	r25, r24
    if (tmp >= (DISPLAY_CHAR_NUM * DISPLAY_LINE_NUM))
     262:	90 32       	cpi	r25, 0x20	; 32
     264:	30 f4       	brcc	.+12     	; 0x272 <display_advance_cursor+0x22>
        dchar = DISPLAY_CHAR_NUM - 1U;
        dline = DISPLAY_LINE_NUM - 1U;
    }
    else
    {
        dchar = tmp % DISPLAY_CHAR_NUM;
     266:	69 2f       	mov	r22, r25
     268:	6f 70       	andi	r22, 0x0F	; 15
        dline = tmp / DISPLAY_CHAR_NUM;
     26a:	89 2f       	mov	r24, r25
     26c:	82 95       	swap	r24
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	02 c0       	rjmp	.+4      	; 0x276 <display_advance_cursor+0x26>
    uint8_t dchar;

    tmp = (display_status.line_n * DISPLAY_CHAR_NUM) + display_status.char_n + num;
    if (tmp >= (DISPLAY_CHAR_NUM * DISPLAY_LINE_NUM))
    {
        dchar = DISPLAY_CHAR_NUM - 1U;
     272:	6f e0       	ldi	r22, 0x0F	; 15
        dline = DISPLAY_LINE_NUM - 1U;
     274:	81 e0       	ldi	r24, 0x01	; 1
    {
        dchar = tmp % DISPLAY_CHAR_NUM;
        dline = tmp / DISPLAY_CHAR_NUM;
    }

    display_set_cursor(dline, dchar);
     276:	0c 94 1e 01 	jmp	0x23c	; 0x23c <display_set_cursor>

0000027a <display_hide_cursor>:

}

void display_hide_cursor()
{
    display_hal_cursor_visibility(false);
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0c 94 92 01 	jmp	0x324	; 0x324 <display_hal_cursor_visibility>

00000280 <display_write_char>:
}

void display_write_char(uint8_t chr)
{
    /* add char to buffer */
    display_buffer[display_status.line_n][display_status.char_n].character = chr;
     280:	90 91 47 02 	lds	r25, 0x0247
     284:	e0 91 46 02 	lds	r30, 0x0246
     288:	20 e1       	ldi	r18, 0x10	; 16
     28a:	e2 9f       	mul	r30, r18
     28c:	f0 01       	movw	r30, r0
     28e:	11 24       	eor	r1, r1
     290:	e9 0f       	add	r30, r25
     292:	f1 1d       	adc	r31, r1
     294:	ee 0f       	add	r30, r30
     296:	ff 1f       	adc	r31, r31
     298:	ea 5f       	subi	r30, 0xFA	; 250
     29a:	fd 4f       	sbci	r31, 0xFD	; 253
     29c:	80 83       	st	Z, r24
    /* advance the cursor */
    display_advance_cursor(1U);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0c 94 28 01 	jmp	0x250	; 0x250 <display_advance_cursor>

000002a4 <display_write_string>:
}

void display_write_string(char *str)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	ec 01       	movw	r28, r24
    while (*str != '\0')
     2aa:	89 91       	ld	r24, Y+
     2ac:	88 23       	and	r24, r24
     2ae:	19 f0       	breq	.+6      	; 0x2b6 <display_write_string+0x12>
    {
        display_write_char(*str);
     2b0:	0e 94 40 01 	call	0x280	; 0x280 <display_write_char>
     2b4:	fa cf       	rjmp	.-12     	; 0x2aa <display_write_string+0x6>
        str++;
    }
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <display_write_stringf>:

static char snprintf_buf[DISPLAY_CHAR_NUM*DISPLAY_LINE_NUM];
void display_write_stringf(char *fmt, ...)
{
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	fe 01       	movw	r30, r28
     2c6:	35 96       	adiw	r30, 0x05	; 5
     2c8:	41 91       	ld	r20, Z+
     2ca:	51 91       	ld	r21, Z+
    va_list va;
    va_start(va,fmt);
    vsnprintf(snprintf_buf, sizeof(snprintf_buf), fmt, va);
     2cc:	9f 01       	movw	r18, r30
     2ce:	60 e2       	ldi	r22, 0x20	; 32
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	86 ee       	ldi	r24, 0xE6	; 230
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <vsnprintf>
    va_end(va);
    display_write_string(snprintf_buf);
     2da:	86 ee       	ldi	r24, 0xE6	; 230
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 52 01 	call	0x2a4	; 0x2a4 <display_write_string>
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <display_hal_init>:
#include <stdbool.h>
#include <stdio.h>  // could be also removed and simplified

void display_hal_init(void)
{
    uart_putstring("\x1B[2J\x1B[H");
     2e8:	8c e1       	ldi	r24, 0x1C	; 28
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <uart_putstring>

000002f0 <display_hal_set_cursor>:
}

void display_hal_set_cursor(uint8_t line, uint8_t chr)
{
    /* Line 0 is 1 in UART; Line 1 is 2 in UART and so on ... */
    printf("\x1B[%d;%dH", line + 1U, chr + 1U);
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	6f 5f       	subi	r22, 0xFF	; 255
     2f4:	7f 4f       	sbci	r23, 0xFF	; 255
     2f6:	7f 93       	push	r23
     2f8:	6f 93       	push	r22
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	84 e2       	ldi	r24, 0x24	; 36
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <printf>
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	08 95       	ret

0000031c <display_hal_write_char>:
}

void display_hal_write_char(uint8_t chr)
{
    uart_putchar(chr, NULL);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0c 94 1d 08 	jmp	0x103a	; 0x103a <uart_putchar>

00000324 <display_hal_cursor_visibility>:
}

void display_hal_cursor_visibility(bool visible)
{
    if (visible == false)
     324:	81 11       	cpse	r24, r1
     326:	03 c0       	rjmp	.+6      	; 0x32e <display_hal_cursor_visibility+0xa>
        uart_putstring("\x1B[?25l");
     328:	8d e2       	ldi	r24, 0x2D	; 45
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	02 c0       	rjmp	.+4      	; 0x332 <display_hal_cursor_visibility+0xe>
    else
        uart_putstring("\x1B[?25h");
     32e:	84 e3       	ldi	r24, 0x34	; 52
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <uart_putstring>

00000336 <encoder_init>:
 */
void encoder_init(void)
{

    /* Logic initialization */
    g_encoder[ENC_HW_0].pin_A = PIN6;
     336:	86 e0       	ldi	r24, 0x06	; 6
     338:	80 93 48 02 	sts	0x0248, r24
    g_encoder[ENC_HW_0].pin_B = PIN7;
     33c:	87 e0       	ldi	r24, 0x07	; 7
     33e:	80 93 49 02 	sts	0x0249, r24
    g_encoder[ENC_HW_0].tick = g_timestamp;
     342:	80 91 46 04 	lds	r24, 0x0446
     346:	90 91 47 04 	lds	r25, 0x0447
     34a:	a0 91 48 04 	lds	r26, 0x0448
     34e:	b0 91 49 04 	lds	r27, 0x0449
     352:	80 93 4d 02 	sts	0x024D, r24
     356:	90 93 4e 02 	sts	0x024E, r25
     35a:	a0 93 4f 02 	sts	0x024F, r26
     35e:	b0 93 50 02 	sts	0x0250, r27

    /* Inputs */
    ENC_DDR &= ~(1<<PIN7);
     362:	57 98       	cbi	0x0a, 7	; 10
    ENC_DDR &= ~(1<<PIN6);
     364:	56 98       	cbi	0x0a, 6	; 10
    DDRB &= ~(1<<PIN0);
     366:	20 98       	cbi	0x04, 0	; 4

    /* Turn on pull-ups (encoder switches to GND) */
    ENC_PORT |= (1<<PIN7) | (1 << PIN6);
     368:	8b b1       	in	r24, 0x0b	; 11
     36a:	80 6c       	ori	r24, 0xC0	; 192
     36c:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 1<<PIN0;
     36e:	28 9a       	sbi	0x05, 0	; 5

    /* Enable interrupts on the encoder pins */
    PCMSK0 |= (1 << PCINT0 );                  /* click */
     370:	eb e6       	ldi	r30, 0x6B	; 107
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	81 60       	ori	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
    PCMSK2 |= (1 << PCINT23 ) | (1 << PCINT22); /* wheel */
     37a:	ed e6       	ldi	r30, 0x6D	; 109
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	80 6c       	ori	r24, 0xC0	; 192
     382:	80 83       	st	Z, r24

    /* Enable Pin Change subsystem (interrupts) */
    PCICR |= (1<< PCIE0);
     384:	e8 e6       	ldi	r30, 0x68	; 104
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	80 83       	st	Z, r24
    PCICR |= (1<< PCIE2);
     38e:	80 81       	ld	r24, Z
     390:	84 60       	ori	r24, 0x04	; 4
     392:	80 83       	st	Z, r24
     394:	08 95       	ret

00000396 <encoder_set_callback>:
/**
 * Set the encoder event callback
 */
void encoder_set_callback(e_enc_hw index, t_enc_cb event_cb)
{
    g_encoder[index].evt_cb = event_cb;
     396:	9f e0       	ldi	r25, 0x0F	; 15
     398:	89 9f       	mul	r24, r25
     39a:	f0 01       	movw	r30, r0
     39c:	11 24       	eor	r1, r1
     39e:	e8 5b       	subi	r30, 0xB8	; 184
     3a0:	fd 4f       	sbci	r31, 0xFD	; 253
     3a2:	76 87       	std	Z+14, r23	; 0x0e
     3a4:	65 87       	std	Z+13, r22	; 0x0d
     3a6:	08 95       	ret

000003a8 <__vector_3>:
}

ISR(PCINT0_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
    /* TODO generate the appropriate event */
}
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_5>:
 * Best case execution time: 10us
 * Worst case execution time: 20us
 * => both well below the 100us system tick timer
 */
ISR(PCINT2_vect)
{
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31

    uint8_t i = 0;  /* left for a future multiple encoder implementation */

    {
        /* Shift the old values */
        g_encoder[i].pin_raw <<= 2;
     3e6:	90 91 4a 02 	lds	r25, 0x024A
     3ea:	99 0f       	add	r25, r25
     3ec:	99 0f       	add	r25, r25
     3ee:	90 93 4a 02 	sts	0x024A, r25
        /* Store the new values */
        g_encoder[i].pin_raw |= ((ENC_PIN >> g_encoder[i].pin_A) & 0x1U) | (((ENC_PIN >> g_encoder[i].pin_B) & 0x1U) << 1U);
     3f2:	e9 b1       	in	r30, 0x09	; 9
     3f4:	89 b1       	in	r24, 0x09	; 9
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	00 90 48 02 	lds	r0, 0x0248
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__vector_5+0x46>
     3fe:	f5 95       	asr	r31
     400:	e7 95       	ror	r30
     402:	0a 94       	dec	r0
     404:	e2 f7       	brpl	.-8      	; 0x3fe <__vector_5+0x42>
     406:	e1 70       	andi	r30, 0x01	; 1
     408:	e9 2b       	or	r30, r25
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	00 90 49 02 	lds	r0, 0x0249
     410:	02 c0       	rjmp	.+4      	; 0x416 <__vector_5+0x5a>
     412:	95 95       	asr	r25
     414:	87 95       	ror	r24
     416:	0a 94       	dec	r0
     418:	e2 f7       	brpl	.-8      	; 0x412 <__vector_5+0x56>
     41a:	81 70       	andi	r24, 0x01	; 1
     41c:	88 0f       	add	r24, r24
     41e:	e8 2b       	or	r30, r24
     420:	e0 93 4a 02 	sts	0x024A, r30
        /* Increment value by the lookup table value */
        g_encoder[i].raw += enc_lookup[g_encoder[0].pin_raw & 0x0FU];
     424:	ef 70       	andi	r30, 0x0F	; 15
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	e5 5c       	subi	r30, 0xC5	; 197
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	20 81       	ld	r18, Z
     42e:	80 91 4b 02 	lds	r24, 0x024B
     432:	28 0f       	add	r18, r24
     434:	20 93 4b 02 	sts	0x024B, r18
        if ((g_timestamp - g_encoder[i].tick) > ENC_TIMEOUT)
     438:	80 91 46 04 	lds	r24, 0x0446
     43c:	90 91 47 04 	lds	r25, 0x0447
     440:	a0 91 48 04 	lds	r26, 0x0448
     444:	b0 91 49 04 	lds	r27, 0x0449
     448:	40 91 4d 02 	lds	r20, 0x024D
     44c:	50 91 4e 02 	lds	r21, 0x024E
     450:	60 91 4f 02 	lds	r22, 0x024F
     454:	70 91 50 02 	lds	r23, 0x0250
     458:	7c 01       	movw	r14, r24
     45a:	8d 01       	movw	r16, r26
     45c:	e4 1a       	sub	r14, r20
     45e:	f5 0a       	sbc	r15, r21
     460:	06 0b       	sbc	r16, r22
     462:	17 0b       	sbc	r17, r23
     464:	b8 01       	movw	r22, r16
     466:	a7 01       	movw	r20, r14
     468:	41 32       	cpi	r20, 0x21	; 33
     46a:	01 ea       	ldi	r16, 0xA1	; 161
     46c:	50 07       	cpc	r21, r16
     46e:	07 e0       	ldi	r16, 0x07	; 7
     470:	60 07       	cpc	r22, r16
     472:	71 05       	cpc	r23, r1
     474:	68 f0       	brcs	.+26     	; 0x490 <__vector_5+0xd4>
        {
            /* Timeout */
            g_encoder[i].raw = 0;
     476:	10 92 4b 02 	sts	0x024B, r1
            g_encoder[i].pin_raw = 0;
     47a:	10 92 4a 02 	sts	0x024A, r1
            g_encoder[i].tick = g_timestamp;
     47e:	80 93 4d 02 	sts	0x024D, r24
     482:	90 93 4e 02 	sts	0x024E, r25
     486:	a0 93 4f 02 	sts	0x024F, r26
     48a:	b0 93 50 02 	sts	0x0250, r27
     48e:	3e c0       	rjmp	.+124    	; 0x50c <__vector_5+0x150>
        }
        else if (g_encoder[i].raw > 2)
     490:	23 30       	cpi	r18, 0x03	; 3
     492:	ec f0       	brlt	.+58     	; 0x4ce <__vector_5+0x112>
        {
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     494:	40 93 51 02 	sts	0x0251, r20
     498:	50 93 52 02 	sts	0x0252, r21
     49c:	60 93 53 02 	sts	0x0253, r22
     4a0:	70 93 54 02 	sts	0x0254, r23
            g_encoder[i].value++;
     4a4:	20 91 4c 02 	lds	r18, 0x024C
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	20 93 4c 02 	sts	0x024C, r18
            g_encoder[i].raw = 0;
     4ae:	10 92 4b 02 	sts	0x024B, r1
            g_encoder[i].tick = g_timestamp;
     4b2:	80 93 4d 02 	sts	0x024D, r24
     4b6:	90 93 4e 02 	sts	0x024E, r25
     4ba:	a0 93 4f 02 	sts	0x024F, r26
     4be:	b0 93 50 02 	sts	0x0250, r27
            g_encoder[i].evt_cb(ENC_EVT_RIGHT, g_encoder[i].delta_t);
     4c2:	e0 91 55 02 	lds	r30, 0x0255
     4c6:	f0 91 56 02 	lds	r31, 0x0256
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	1e c0       	rjmp	.+60     	; 0x50a <__vector_5+0x14e>
        }
        else if (g_encoder[i].raw < -2)
     4ce:	2e 3f       	cpi	r18, 0xFE	; 254
     4d0:	ec f4       	brge	.+58     	; 0x50c <__vector_5+0x150>
        {
            g_encoder[i].delta_t = g_timestamp - g_encoder[i].tick;
     4d2:	40 93 51 02 	sts	0x0251, r20
     4d6:	50 93 52 02 	sts	0x0252, r21
     4da:	60 93 53 02 	sts	0x0253, r22
     4de:	70 93 54 02 	sts	0x0254, r23
            g_encoder[i].value--;
     4e2:	20 91 4c 02 	lds	r18, 0x024C
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	20 93 4c 02 	sts	0x024C, r18
            g_encoder[i].raw = 0;
     4ec:	10 92 4b 02 	sts	0x024B, r1
            g_encoder[i].tick = g_timestamp;
     4f0:	80 93 4d 02 	sts	0x024D, r24
     4f4:	90 93 4e 02 	sts	0x024E, r25
     4f8:	a0 93 4f 02 	sts	0x024F, r26
     4fc:	b0 93 50 02 	sts	0x0250, r27
            g_encoder[i].evt_cb(ENC_EVT_LEFT, g_encoder[i].delta_t);
     500:	e0 91 55 02 	lds	r30, 0x0255
     504:	f0 91 56 02 	lds	r31, 0x0256
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	09 95       	icall
        }
    }

}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <uart_received>:
/* Remote application level buffers */
static t_remote_datagram_buffer remote_dgram_rcv_copy;

void uart_received(uint8_t byte)
{
    DBG_HIGH;
     536:	5a 9a       	sbi	0x0b, 2	; 11
     538:	00 00       	nop
    /* NOTE: interrupt callback. Pay attention to execution time... */

    /* Call the state machine with a single byte... */
    remote_buffer_to_datagram(byte);
     53a:	0e 94 a0 06 	call	0xd40	; 0xd40 <remote_buffer_to_datagram>
DBG_LOW;
     53e:	5a 98       	cbi	0x0b, 2	; 11
     540:	00 00       	nop
     542:	08 95       	ret

00000544 <psu_get_channel_from_node_id>:
        channel->state = PSU_STATE_OPERATIONAL;
    }
}

t_psu_channel* psu_get_channel_from_node_id(uint8_t node_id)
{
     544:	28 2f       	mov	r18, r24

    t_psu_channel* ret = NULL;

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     546:	80 91 77 02 	lds	r24, 0x0277
     54a:	82 17       	cp	r24, r18
     54c:	19 f0       	breq	.+6      	; 0x554 <psu_get_channel_from_node_id+0x10>

t_psu_channel* psu_get_channel_from_node_id(uint8_t node_id)
{
    uint16_t i = 0;

    t_psu_channel* ret = NULL;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <psu_get_channel_from_node_id+0x14>

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
        {
            ret = &psu_channels[i];
     554:	87 e7       	ldi	r24, 0x77	; 119
     556:	92 e0       	ldi	r25, 0x02	; 2

    t_psu_channel* ret = NULL;

    for (i = 0; i < PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == node_id)
     558:	30 91 ad 02 	lds	r19, 0x02AD
     55c:	32 13       	cpse	r19, r18
     55e:	02 c0       	rjmp	.+4      	; 0x564 <psu_get_channel_from_node_id+0x20>
        {
            ret = &psu_channels[i];
     560:	8d ea       	ldi	r24, 0xAD	; 173
     562:	92 e0       	ldi	r25, 0x02	; 2
        }
    }

    return ret;
}
     564:	08 95       	ret

00000566 <lib_sum>:
    output |= (uint8_t)(hi << 8U);
    return output;
}

void lib_sum(uint16_t *value, uint16_t limit, uint16_t diff)
{
     566:	fc 01       	movw	r30, r24
    if (limit < *value)
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	68 17       	cp	r22, r24
     56e:	79 07       	cpc	r23, r25
     570:	18 f4       	brcc	.+6      	; 0x578 <lib_sum+0x12>
    {
        *value = limit;
     572:	71 83       	std	Z+1, r23	; 0x01
     574:	60 83       	st	Z, r22
     576:	08 95       	ret
    }
    else
    {
        if ((limit - *value) > diff) *value  += diff;
     578:	9b 01       	movw	r18, r22
     57a:	28 1b       	sub	r18, r24
     57c:	39 0b       	sbc	r19, r25
     57e:	42 17       	cp	r20, r18
     580:	53 07       	cpc	r21, r19
     582:	b8 f7       	brcc	.-18     	; 0x572 <lib_sum+0xc>
     584:	84 0f       	add	r24, r20
     586:	95 1f       	adc	r25, r21
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret

0000058e <lib_diff>:
        else                          *value  = limit;
    }
}

void lib_diff(uint16_t *value, uint16_t diff)
{
     58e:	fc 01       	movw	r30, r24
    if (*value > diff) *value -= diff;
     590:	80 81       	ld	r24, Z
     592:	91 81       	ldd	r25, Z+1	; 0x01
     594:	68 17       	cp	r22, r24
     596:	79 07       	cpc	r23, r25
     598:	28 f4       	brcc	.+10     	; 0x5a4 <lib_diff+0x16>
     59a:	86 1b       	sub	r24, r22
     59c:	97 0b       	sbc	r25, r23
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	80 83       	st	Z, r24
     5a2:	08 95       	ret
    else               *value  = 0;
     5a4:	11 82       	std	Z+1, r1	; 0x01
     5a6:	10 82       	st	Z, r1
     5a8:	08 95       	ret

000005aa <encoder_event_callback>:
    1, 1, 1, 20, 55, 90, 125, 160, 195, 230, 265, 300, 335, 370, 405, 440, 475,
    510, 545, 580, 615, 650, 685, 720, 755, 790, 825, 860, 895, 930, 965, 1000
};

static void encoder_event_callback(e_enc_event event, uint32_t delta_t)
{
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	ae e8       	ldi	r26, 0x8E	; 142
     5b0:	b1 e0       	ldi	r27, 0x01	; 1
     5b2:	e0 e0       	ldi	r30, 0x00	; 0
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t i;
    uint16_t diff;
    for (i = 0; i < SMOOTHING_SIZE; i++)
    {
        if (delta_t >= smoothing_deltat[i])
     5b6:	0d 91       	ld	r16, X+
     5b8:	1d 91       	ld	r17, X+
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 17       	cp	r20, r16
     5c0:	51 07       	cpc	r21, r17
     5c2:	62 07       	cpc	r22, r18
     5c4:	73 07       	cpc	r23, r19
     5c6:	d8 f0       	brcs	.+54     	; 0x5fe <encoder_event_callback+0x54>
        {
            diff = smoothing_result[i];
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	e2 5b       	subi	r30, 0xB2	; 178
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	40 81       	ld	r20, Z
     5d2:	51 81       	ldd	r21, Z+1	; 0x01
            if (event == ENC_EVT_LEFT)
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <encoder_event_callback+0x3c>
            {
                lib_diff(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, diff);
     5d8:	ba 01       	movw	r22, r20
     5da:	81 e8       	ldi	r24, 0x81	; 129
     5dc:	92 e0       	ldi	r25, 0x02	; 2
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
            }
            break;
        }
    }
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
        if (delta_t >= smoothing_deltat[i])
        {
            diff = smoothing_result[i];
            if (event == ENC_EVT_LEFT)
            {
                lib_diff(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, diff);
     5e2:	0c 94 c7 02 	jmp	0x58e	; 0x58e <lib_diff>
            }
            else if (event == ENC_EVT_RIGHT)
     5e6:	81 11       	cpse	r24, r1
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <encoder_event_callback+0x5c>
            {
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
     5ea:	60 91 7b 02 	lds	r22, 0x027B
     5ee:	70 91 7c 02 	lds	r23, 0x027C
     5f2:	81 e8       	ldi	r24, 0x81	; 129
     5f4:	92 e0       	ldi	r25, 0x02	; 2
            }
            break;
        }
    }
}
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
            {
                lib_diff(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, diff);
            }
            else if (event == ENC_EVT_RIGHT)
            {
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
     5fa:	0c 94 b3 02 	jmp	0x566	; 0x566 <lib_sum>
     5fe:	31 96       	adiw	r30, 0x01	; 1

static void encoder_event_callback(e_enc_event event, uint32_t delta_t)
{
    uint8_t i;
    uint16_t diff;
    for (i = 0; i < SMOOTHING_SIZE; i++)
     600:	e0 32       	cpi	r30, 0x20	; 32
     602:	f1 05       	cpc	r31, r1
     604:	c1 f6       	brne	.-80     	; 0x5b6 <encoder_event_callback+0xc>
                lib_sum(&psu_channels[PSU_CHANNEL_0].voltage_setpoint.value.raw, psu_channels[PSU_CHANNEL_0].voltage_setpoint.scale.max, diff);
            }
            break;
        }
    }
}
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <lib_limit>:
    if (*value > diff) *value -= diff;
    else               *value  = 0;
}

void lib_limit(t_value *value, t_value_scale *scale)
{
     60c:	fc 01       	movw	r30, r24
    /* bottom filter */
    if (value->raw < scale->min) value->scaled = scale->min;
     60e:	20 81       	ld	r18, Z
     610:	31 81       	ldd	r19, Z+1	; 0x01
     612:	db 01       	movw	r26, r22
     614:	8d 91       	ld	r24, X+
     616:	9c 91       	ld	r25, X
     618:	28 17       	cp	r18, r24
     61a:	39 07       	cpc	r19, r25
     61c:	10 f4       	brcc	.+4      	; 0x622 <lib_limit+0x16>
     61e:	93 83       	std	Z+3, r25	; 0x03
     620:	82 83       	std	Z+2, r24	; 0x02
    /* top filter */
    if (value->raw > scale->max) value->scaled = scale->max;
     622:	db 01       	movw	r26, r22
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	8d 91       	ld	r24, X+
     628:	9c 91       	ld	r25, X
     62a:	13 97       	sbiw	r26, 0x03	; 3
     62c:	82 17       	cp	r24, r18
     62e:	93 07       	cpc	r25, r19
     630:	10 f4       	brcc	.+4      	; 0x636 <lib_limit+0x2a>
     632:	93 83       	std	Z+3, r25	; 0x03
     634:	82 83       	std	Z+2, r24	; 0x02
     636:	08 95       	ret

00000638 <lib_scale>:
}

void lib_scale(t_value *value, t_value_scale *scale)
{
     638:	2f 92       	push	r2
     63a:	3f 92       	push	r3
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <lib_scale+0x26>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	9a 83       	std	Y+2, r25	; 0x02
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	3b 01       	movw	r6, r22
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     668:	fb 01       	movw	r30, r22
     66a:	24 80       	ldd	r2, Z+4	; 0x04
     66c:	35 80       	ldd	r3, Z+5	; 0x05
     66e:	00 81       	ld	r16, Z
     670:	11 81       	ldd	r17, Z+1	; 0x01

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
     672:	fc 01       	movw	r30, r24
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	60 1b       	sub	r22, r16
     67a:	71 0b       	sbc	r23, r17
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 a4 09 	call	0x1348	; 0x1348 <__floatunsisf>
     684:	6b 01       	movw	r12, r22
     686:	7c 01       	movw	r14, r24
}

void lib_scale(t_value *value, t_value_scale *scale)
{
    t_value_type temp;
    float range_ratio = ((float)scale->max_scaled - scale->min_scaled) / ((float)scale->max - scale->min);
     688:	f3 01       	movw	r30, r6
     68a:	66 81       	ldd	r22, Z+6	; 0x06
     68c:	77 81       	ldd	r23, Z+7	; 0x07
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 a4 09 	call	0x1348	; 0x1348 <__floatunsisf>
     696:	4b 01       	movw	r8, r22
     698:	5c 01       	movw	r10, r24
     69a:	b1 01       	movw	r22, r2
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 a4 09 	call	0x1348	; 0x1348 <__floatunsisf>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	0e 94 ab 08 	call	0x1156	; 0x1156 <__subsf3>
     6b0:	4b 01       	movw	r8, r22
     6b2:	5c 01       	movw	r10, r24
     6b4:	f3 01       	movw	r30, r6
     6b6:	62 81       	ldd	r22, Z+2	; 0x02
     6b8:	73 81       	ldd	r23, Z+3	; 0x03
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 a4 09 	call	0x1348	; 0x1348 <__floatunsisf>
     6c2:	2b 01       	movw	r4, r22
     6c4:	3c 01       	movw	r6, r24
     6c6:	b8 01       	movw	r22, r16
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 a4 09 	call	0x1348	; 0x1348 <__floatunsisf>
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	c3 01       	movw	r24, r6
     6d6:	b2 01       	movw	r22, r4
     6d8:	0e 94 ab 08 	call	0x1156	; 0x1156 <__subsf3>
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	c5 01       	movw	r24, r10
     6e2:	b4 01       	movw	r22, r8
     6e4:	0e 94 10 09 	call	0x1220	; 0x1220 <__divsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24

    /* Remove the min value from the raw value */
    temp = value->raw - scale->min;
    /* Multiply the raw value by the ratio between the destination range and the origin range */
    temp = (float)temp * range_ratio;
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3>
     6f4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fixunssfsi>
    /* Offset the value by the min scaled value */
    temp += scale->min_scaled;
     6f8:	62 0d       	add	r22, r2
     6fa:	73 1d       	adc	r23, r3
    /* Assign the value to the output */
    value->scaled = (t_value_type)temp;
     6fc:	e9 81       	ldd	r30, Y+1	; 0x01
     6fe:	fa 81       	ldd	r31, Y+2	; 0x02
     700:	73 83       	std	Z+3, r23	; 0x03
     702:	62 83       	std	Z+2, r22	; 0x02
}
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
     718:	bf 90       	pop	r11
     71a:	af 90       	pop	r10
     71c:	9f 90       	pop	r9
     71e:	8f 90       	pop	r8
     720:	7f 90       	pop	r7
     722:	6f 90       	pop	r6
     724:	5f 90       	pop	r5
     726:	4f 90       	pop	r4
     728:	3f 90       	pop	r3
     72a:	2f 90       	pop	r2
     72c:	08 95       	ret

0000072e <main>:
    }
}
*/

int main(void)
{
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <main+0x6>
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62

    /* System init */
    system_init();
     738:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <system_init>
}

static void init_io(void)
{

    cli();
     73c:	f8 94       	cli

    /* UART */
    uart_init();
     73e:	0e 94 2b 08 	call	0x1056	; 0x1056 <uart_init>
    uart_callback(uart_received);
     742:	8b e9       	ldi	r24, 0x9B	; 155
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	0e 94 70 08 	call	0x10e0	; 0x10e0 <uart_callback>
    stdout = &uart_output;
     74a:	8e e0       	ldi	r24, 0x0E	; 14
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	90 93 4d 04 	sts	0x044D, r25
     752:	80 93 4c 04 	sts	0x044C, r24
    stdin  = &uart_input;
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	90 93 4b 04 	sts	0x044B, r25
     75e:	80 93 4a 04 	sts	0x044A, r24

    /* ADC */
    adc_init();
     762:	0e 94 a7 00 	call	0x14e	; 0x14e <adc_init>

    /* PWM */
    pwm_init();
     766:	0e 94 55 05 	call	0xaaa	; 0xaaa <pwm_init>

    /* System timer */
    timer_init();
     76a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <timer_init>

    /* Encoder */
    encoder_init();
     76e:	0e 94 9b 01 	call	0x336	; 0x336 <encoder_init>
    encoder_set_callback(ENC_HW_0, encoder_event_callback);
     772:	65 ed       	ldi	r22, 0xD5	; 213
     774:	72 e0       	ldi	r23, 0x02	; 2
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 cb 01 	call	0x396	; 0x396 <encoder_set_callback>

    /* Display */
    display_init();
     77c:	0e 94 c3 00 	call	0x186	; 0x186 <display_init>

    sei();
     780:	78 94       	sei
{

    switch(psu_ch)
    {
        case PSU_CHANNEL_0:
            channel->remote_node         = 0U;
     782:	10 92 77 02 	sts	0x0277, r1
            channel->voltage_adc_channel = ADC_0;
     786:	10 92 91 02 	sts	0x0291, r1
            channel->current_adc_channel = ADC_1;
     78a:	bb 24       	eor	r11, r11
     78c:	b3 94       	inc	r11
     78e:	b0 92 ab 02 	sts	0x02AB, r11
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
     792:	10 92 92 02 	sts	0x0292, r1
            channel->current_pwm_channel = PWM_CHANNEL_1;
     796:	b0 92 ac 02 	sts	0x02AC, r11
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     79a:	10 92 86 02 	sts	0x0286, r1
     79e:	10 92 85 02 	sts	0x0285, r1
    channel->voltage_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     7a2:	ee 24       	eor	r14, r14
     7a4:	ea 94       	dec	r14
     7a6:	43 e0       	ldi	r20, 0x03	; 3
     7a8:	f4 2e       	mov	r15, r20
     7aa:	f0 92 88 02 	sts	0x0288, r15
     7ae:	e0 92 87 02 	sts	0x0287, r14
    channel->voltage_readout.scale.min_scaled = 0;
     7b2:	10 92 8a 02 	sts	0x028A, r1
     7b6:	10 92 89 02 	sts	0x0289, r1
    channel->voltage_readout.scale.max_scaled = 28500;    /* Voltage */
     7ba:	04 e5       	ldi	r16, 0x54	; 84
     7bc:	1f e6       	ldi	r17, 0x6F	; 111
     7be:	10 93 8c 02 	sts	0x028C, r17
     7c2:	00 93 8b 02 	sts	0x028B, r16

    channel->current_readout.scale.min = 0;
     7c6:	10 92 a0 02 	sts	0x02A0, r1
     7ca:	10 92 9f 02 	sts	0x029F, r1
    channel->current_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     7ce:	f0 92 a2 02 	sts	0x02A2, r15
     7d2:	e0 92 a1 02 	sts	0x02A1, r14
    channel->current_readout.scale.min_scaled = 0;
     7d6:	10 92 a4 02 	sts	0x02A4, r1
     7da:	10 92 a3 02 	sts	0x02A3, r1
    channel->current_readout.scale.max_scaled = 2048;     /* Voltage */
     7de:	c1 2c       	mov	r12, r1
     7e0:	58 e0       	ldi	r21, 0x08	; 8
     7e2:	d5 2e       	mov	r13, r21
     7e4:	d0 92 a6 02 	sts	0x02A6, r13
     7e8:	c0 92 a5 02 	sts	0x02A5, r12

    channel->voltage_setpoint.scale.min = 0;
     7ec:	10 92 7a 02 	sts	0x027A, r1
     7f0:	10 92 79 02 	sts	0x0279, r1
    channel->voltage_setpoint.scale.max = 28500;
     7f4:	10 93 7c 02 	sts	0x027C, r17
     7f8:	00 93 7b 02 	sts	0x027B, r16
    channel->voltage_setpoint.scale.min_scaled = 0;
     7fc:	10 92 7e 02 	sts	0x027E, r1
     800:	10 92 7d 02 	sts	0x027D, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 ac 05 	call	0xb58	; 0xb58 <pwm_get_resolution>
     80a:	90 93 80 02 	sts	0x0280, r25
     80e:	80 93 7f 02 	sts	0x027F, r24

    channel->current_setpoint.scale.min = 0;
     812:	10 92 94 02 	sts	0x0294, r1
     816:	10 92 93 02 	sts	0x0293, r1
    channel->current_setpoint.scale.max = 28500;
     81a:	10 93 96 02 	sts	0x0296, r17
     81e:	00 93 95 02 	sts	0x0295, r16
    channel->current_setpoint.scale.min_scaled = 0;
     822:	10 92 98 02 	sts	0x0298, r1
     826:	10 92 97 02 	sts	0x0297, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     82a:	80 91 ac 02 	lds	r24, 0x02AC
     82e:	0e 94 ac 05 	call	0xb58	; 0xb58 <pwm_get_resolution>
     832:	90 93 9a 02 	sts	0x029A, r25
     836:	80 93 99 02 	sts	0x0299, r24
            channel->current_adc_channel = ADC_1;
            channel->voltage_pwm_channel = PWM_CHANNEL_0;
            channel->current_pwm_channel = PWM_CHANNEL_1;
            break;
        case PSU_CHANNEL_1:
            channel->remote_node         = 1U;
     83a:	b0 92 ad 02 	sts	0x02AD, r11
            channel->voltage_adc_channel = ADC_2;
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	90 93 c7 02 	sts	0x02C7, r25
            channel->current_adc_channel = ADC_3;
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	80 93 e1 02 	sts	0x02E1, r24
            channel->voltage_pwm_channel = PWM_CHANNEL_2;
     84a:	90 93 c8 02 	sts	0x02C8, r25
            channel->current_pwm_channel = PWM_CHANNEL_3;
     84e:	80 93 e2 02 	sts	0x02E2, r24
        default:
            /* No channel selected */
            break;
    }

    channel->voltage_readout.scale.min = 0;
     852:	10 92 bc 02 	sts	0x02BC, r1
     856:	10 92 bb 02 	sts	0x02BB, r1
    channel->voltage_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     85a:	f0 92 be 02 	sts	0x02BE, r15
     85e:	e0 92 bd 02 	sts	0x02BD, r14
    channel->voltage_readout.scale.min_scaled = 0;
     862:	10 92 c0 02 	sts	0x02C0, r1
     866:	10 92 bf 02 	sts	0x02BF, r1
    channel->voltage_readout.scale.max_scaled = 28500;    /* Voltage */
     86a:	10 93 c2 02 	sts	0x02C2, r17
     86e:	00 93 c1 02 	sts	0x02C1, r16

    channel->current_readout.scale.min = 0;
     872:	10 92 d6 02 	sts	0x02D6, r1
     876:	10 92 d5 02 	sts	0x02D5, r1
    channel->current_readout.scale.max = ADC_RESOLUTION;  /* ADC steps */
     87a:	f0 92 d8 02 	sts	0x02D8, r15
     87e:	e0 92 d7 02 	sts	0x02D7, r14
    channel->current_readout.scale.min_scaled = 0;
     882:	10 92 da 02 	sts	0x02DA, r1
     886:	10 92 d9 02 	sts	0x02D9, r1
    channel->current_readout.scale.max_scaled = 2048;     /* Voltage */
     88a:	d0 92 dc 02 	sts	0x02DC, r13
     88e:	c0 92 db 02 	sts	0x02DB, r12

    channel->voltage_setpoint.scale.min = 0;
     892:	10 92 b0 02 	sts	0x02B0, r1
     896:	10 92 af 02 	sts	0x02AF, r1
    channel->voltage_setpoint.scale.max = 28500;
     89a:	10 93 b2 02 	sts	0x02B2, r17
     89e:	00 93 b1 02 	sts	0x02B1, r16
    channel->voltage_setpoint.scale.min_scaled = 0;
     8a2:	10 92 b4 02 	sts	0x02B4, r1
     8a6:	10 92 b3 02 	sts	0x02B3, r1
    channel->voltage_setpoint.scale.max_scaled = pwm_get_resolution(channel->voltage_pwm_channel);
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 ac 05 	call	0xb58	; 0xb58 <pwm_get_resolution>
     8b0:	90 93 b6 02 	sts	0x02B6, r25
     8b4:	80 93 b5 02 	sts	0x02B5, r24

    channel->current_setpoint.scale.min = 0;
     8b8:	10 92 ca 02 	sts	0x02CA, r1
     8bc:	10 92 c9 02 	sts	0x02C9, r1
    channel->current_setpoint.scale.max = 28500;
     8c0:	10 93 cc 02 	sts	0x02CC, r17
     8c4:	00 93 cb 02 	sts	0x02CB, r16
    channel->current_setpoint.scale.min_scaled = 0;
     8c8:	10 92 ce 02 	sts	0x02CE, r1
     8cc:	10 92 cd 02 	sts	0x02CD, r1
    channel->current_setpoint.scale.max_scaled = pwm_get_resolution(channel->current_pwm_channel);
     8d0:	80 91 e2 02 	lds	r24, 0x02E2
     8d4:	0e 94 ac 05 	call	0xb58	; 0xb58 <pwm_get_resolution>
     8d8:	90 93 d0 02 	sts	0x02D0, r25
     8dc:	80 93 cf 02 	sts	0x02CF, r24
    channels[0].voltage_readout.value.raw = 750;
    lib_scale(&channels[0].voltage_readout.value, &channels[0].voltage_readout.scale);
    printf("Raw is %d and scaled is %d\r\n", channels[0].voltage_readout.value.raw, channels[0].voltage_readout.value.scaled);
*/

    display_clear_all();
     8e0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <display_clear_all>
    display_hide_cursor();
     8e4:	0e 94 3d 01 	call	0x27a	; 0x27a <display_hide_cursor>
    DBG_CONFIG;
     8e8:	52 9a       	sbi	0x0a, 2	; 10
 */
static void remote_decode_datagram(void)
{
    bool new;
    bool crc_ok;
    uint8_t i = 0;
     8ea:	10 e0       	ldi	r17, 0x00	; 0
#endif
        /* Output processing */
        output_processing();

        display_set_cursor(0, 0);
        display_write_stringf("%d", psu_channels[0].voltage_setpoint.value.raw);
     8ec:	6b e4       	ldi	r22, 0x4B	; 75
     8ee:	c6 2e       	mov	r12, r22
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	d6 2e       	mov	r13, r22
    bool crc_ok;
    uint8_t i = 0;

    do
    {
        new = remote_receive_buffer_get(&remote_dgram_rcv_copy);
     8f4:	87 e5       	ldi	r24, 0x57	; 87
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 29 06 	call	0xc52	; 0xc52 <remote_receive_buffer_get>
     8fc:	f8 2e       	mov	r15, r24
        if (new == true)
     8fe:	88 23       	and	r24, r24
     900:	09 f4       	brne	.+2      	; 0x904 <__stack+0x5>
     902:	41 c0       	rjmp	.+130    	; 0x986 <__stack+0x87>
        {
            crc_ok = remote_calc_crc_buffer_and_compare(remote_dgram_rcv_copy.data, remote_dgram_rcv_copy.datagram.len, remote_dgram_rcv_copy.datagram.crc, NULL);
     904:	40 91 5d 02 	lds	r20, 0x025D
     908:	50 91 5e 02 	lds	r21, 0x025E
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	60 91 5c 02 	lds	r22, 0x025C
     914:	83 e6       	ldi	r24, 0x63	; 99
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 66 06 	call	0xccc	; 0xccc <remote_calc_crc_buffer_and_compare>
            if ((crc_ok == true) && (remote_dgram_rcv_copy.datagram.len > 0U))
     91c:	88 23       	and	r24, r24
     91e:	99 f1       	breq	.+102    	; 0x986 <__stack+0x87>
     920:	e0 90 5c 02 	lds	r14, 0x025C
     924:	ee 20       	and	r14, r14
     926:	79 f1       	breq	.+94     	; 0x986 <__stack+0x87>
            {

                switch (remote_dgram_rcv_copy.data[0])
     928:	00 91 63 02 	lds	r16, 0x0263
     92c:	02 30       	cpi	r16, 0x02	; 2
     92e:	b9 f0       	breq	.+46     	; 0x95e <__stack+0x5f>
     930:	04 30       	cpi	r16, 0x04	; 4
     932:	19 f0       	breq	.+6      	; 0x93a <__stack+0x3b>
     934:	01 30       	cpi	r16, 0x01	; 1
     936:	39 f5       	brne	.+78     	; 0x986 <__stack+0x87>
     938:	09 c0       	rjmp	.+18     	; 0x94c <__stack+0x4d>
                {
                case DATAYPE_DEBUG:
                    /* debug data (usually a string) */
                    uart_putstring(remote_dgram_rcv_copy.data);
     93a:	83 e6       	ldi	r24, 0x63	; 99
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_putstring>
                    uart_putstring("\r\n");
     942:	85 ed       	ldi	r24, 0xD5	; 213
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_putstring>
     94a:	1d c0       	rjmp	.+58     	; 0x986 <__stack+0x87>
                    break;
                case DATATYPE_CONFIG:
                    /* config data */
                    remote_decode_config(&remote_dgram_rcv_copy, psu_get_channel_from_node_id(remote_dgram_rcv_copy.datagram.node_id));
     94c:	80 91 5b 02 	lds	r24, 0x025B
     950:	0e 94 a2 02 	call	0x544	; 0x544 <psu_get_channel_from_node_id>
    }
}

static void remote_decode_config(t_remote_datagram_buffer *datagram, t_psu_channel *channel)
{
    if ((datagram != NULL) && (channel != NULL))
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	b9 f0       	breq	.+46     	; 0x986 <__stack+0x87>
    {
        /* STUB */
        /* Config received, set to operational */
        channel->state = PSU_STATE_OPERATIONAL;
     958:	fc 01       	movw	r30, r24
     95a:	01 83       	std	Z+1, r16	; 0x01
     95c:	14 c0       	rjmp	.+40     	; 0x986 <__stack+0x87>
                    /* config data */
                    remote_decode_config(&remote_dgram_rcv_copy, psu_get_channel_from_node_id(remote_dgram_rcv_copy.datagram.node_id));
                    break;
                case DATATYPE_READOUTS:
                    /* readout data */
                    remote_decode_readout(&remote_dgram_rcv_copy, psu_get_channel_from_node_id(remote_dgram_rcv_copy.datagram.node_id));
     95e:	80 91 5b 02 	lds	r24, 0x025B
     962:	0e 94 a2 02 	call	0x544	; 0x544 <psu_get_channel_from_node_id>
     966:	fc 01       	movw	r30, r24

}

static void remote_decode_readout(t_remote_datagram_buffer *datagram, t_psu_channel *channel)
{
    if ((datagram != NULL) && (channel != NULL) && (datagram->datagram.len >= 5U))
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	69 f0       	breq	.+26     	; 0x986 <__stack+0x87>
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	8e 15       	cp	r24, r14
     970:	50 f4       	brcc	.+20     	; 0x986 <__stack+0x87>
}

static uint16_t lib_bytes_to_uint16(uint8_t lo, uint8_t hi)
{
    uint16_t output;
    output  = (uint8_t)lo;
     972:	20 91 64 02 	lds	r18, 0x0264
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	37 8b       	std	Z+23, r19	; 0x17
     97a:	26 8b       	std	Z+22, r18	; 0x16
     97c:	20 91 66 02 	lds	r18, 0x0266
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	31 ab       	std	Z+49, r19	; 0x31
     984:	20 ab       	std	Z+48, r18	; 0x30
                default:
                    break;
                }
            }
        }
        i++;
     986:	1f 5f       	subi	r17, 0xFF	; 255
    }
    while ((new == true) && (i < DGRAM_RCV_BUFFER_LEN));
     988:	ff 20       	and	r15, r15
     98a:	19 f0       	breq	.+6      	; 0x992 <__stack+0x93>
     98c:	15 30       	cpi	r17, 0x05	; 5
     98e:	08 f4       	brcc	.+2      	; 0x992 <__stack+0x93>
     990:	b1 cf       	rjmp	.-158    	; 0x8f4 <main+0x1c6>
     992:	07 e7       	ldi	r16, 0x77	; 119
     994:	12 e0       	ldi	r17, 0x02	; 2
     996:	37 ea       	ldi	r19, 0xA7	; 167
     998:	e3 2e       	mov	r14, r19
     99a:	32 e0       	ldi	r19, 0x02	; 2
     99c:	f3 2e       	mov	r15, r19
    /* Parse remote datagrams */
    remote_decode_datagram();

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        if (psu_channels[i].remote_node == 0U)
     99e:	f8 01       	movw	r30, r16
     9a0:	80 81       	ld	r24, Z
     9a2:	81 11       	cpse	r24, r1
     9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <__stack+0xc3>
     9a6:	f7 01       	movw	r30, r14
     9a8:	76 97       	sbiw	r30, 0x16	; 22

static void adc_processing(t_psu_channel *channel)
{

    /* Voltage */
    channel->voltage_readout.value.raw = adc_get(channel->voltage_adc_channel);
     9aa:	80 81       	ld	r24, Z
     9ac:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     9b0:	f8 01       	movw	r30, r16
     9b2:	97 8b       	std	Z+23, r25	; 0x17
     9b4:	86 8b       	std	Z+22, r24	; 0x16

    /* Current */
    channel->current_readout.value.raw = adc_get(channel->current_adc_channel);
     9b6:	84 a9       	ldd	r24, Z+52	; 0x34
     9b8:	0e 94 b8 00 	call	0x170	; 0x170 <adc_get>
     9bc:	f7 01       	movw	r30, r14
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
     9c2:	b8 01       	movw	r22, r16
     9c4:	62 5f       	subi	r22, 0xF2	; 242
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
}

static void psu_postprocessing(t_psu_channel *channel)
{
    /* Voltage Scaling */
    lib_scale(&channel->voltage_readout.value, &channel->voltage_readout.scale);
     9c8:	c8 01       	movw	r24, r16
     9ca:	46 96       	adiw	r24, 0x16	; 22
     9cc:	0e 94 1c 03 	call	0x638	; 0x638 <lib_scale>
     9d0:	b8 01       	movw	r22, r16
     9d2:	68 5d       	subi	r22, 0xD8	; 216
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
    /* Current Scaling */
    lib_scale(&channel->current_readout.value, &channel->current_readout.scale);
     9d6:	c7 01       	movw	r24, r14
     9d8:	0e 94 1c 03 	call	0x638	; 0x638 <lib_scale>
     9dc:	0a 5c       	subi	r16, 0xCA	; 202
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	f6 e3       	ldi	r31, 0x36	; 54
     9e2:	ef 0e       	add	r14, r31
     9e4:	f1 1c       	adc	r15, r1
    uint8_t i;

    /* Parse remote datagrams */
    remote_decode_datagram();

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	03 3e       	cpi	r16, 0xE3	; 227
     9ea:	18 07       	cpc	r17, r24
     9ec:	c1 f6       	brne	.-80     	; 0x99e <__stack+0x9f>
     9ee:	2b e9       	ldi	r18, 0x9B	; 155
     9f0:	e2 2e       	mov	r14, r18
     9f2:	22 e0       	ldi	r18, 0x02	; 2
     9f4:	f2 2e       	mov	r15, r18
     9f6:	07 e7       	ldi	r16, 0x77	; 119
     9f8:	12 e0       	ldi	r17, 0x02	; 2
     9fa:	b8 01       	movw	r22, r16
     9fc:	6e 5f       	subi	r22, 0xFE	; 254
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
}

static void psu_preprocessing(t_psu_channel *channel)
{
    /* Voltage Scaling */
    lib_scale(&channel->voltage_setpoint.value, &channel->voltage_setpoint.scale);
     a00:	c8 01       	movw	r24, r16
     a02:	0a 96       	adiw	r24, 0x0a	; 10
     a04:	0e 94 1c 03 	call	0x638	; 0x638 <lib_scale>
     a08:	b8 01       	movw	r22, r16
     a0a:	64 5e       	subi	r22, 0xE4	; 228
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    /* Current Scaling */
    lib_scale(&channel->current_setpoint.value, &channel->current_setpoint.scale);
     a0e:	c7 01       	movw	r24, r14
     a10:	0e 94 1c 03 	call	0x638	; 0x638 <lib_scale>
    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
    {
        /* Pre-processing (scaling) of the values */
        psu_preprocessing(&psu_channels[i]);

        if (psu_channels[i].remote_node == 0U)
     a14:	f8 01       	movw	r30, r16
     a16:	80 81       	ld	r24, Z
     a18:	81 11       	cpse	r24, r1
     a1a:	0f c0       	rjmp	.+30     	; 0xa3a <__stack+0x13b>

static void pwm_processing(t_psu_channel *channel)
{

    /* Voltage */
    pwm_set_duty(channel->voltage_pwm_channel, channel->voltage_setpoint.value.scaled);
     a1c:	64 85       	ldd	r22, Z+12	; 0x0c
     a1e:	75 85       	ldd	r23, Z+13	; 0x0d
     a20:	f7 01       	movw	r30, r14
     a22:	39 97       	sbiw	r30, 0x09	; 9
     a24:	80 81       	ld	r24, Z
     a26:	0e 94 8c 05 	call	0xb18	; 0xb18 <pwm_set_duty>

    /* Current */
    pwm_set_duty(channel->current_pwm_channel, channel->current_setpoint.value.scaled);
     a2a:	f7 01       	movw	r30, r14
     a2c:	62 81       	ldd	r22, Z+2	; 0x02
     a2e:	73 81       	ldd	r23, Z+3	; 0x03
     a30:	f8 01       	movw	r30, r16
     a32:	85 a9       	ldd	r24, Z+53	; 0x35
     a34:	0e 94 8c 05 	call	0xb18	; 0xb18 <pwm_set_duty>
     a38:	0a c0       	rjmp	.+20     	; 0xa4e <__stack+0x14f>

static void remote_encode_datagram(e_datatype type, t_psu_channel *channel)
{

    t_remote_datagram_buffer *rem_buf;
    remote_send_buffer_alloc(&rem_buf);
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <remote_send_buffer_alloc>

    if (rem_buf != NULL)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	11 f0       	breq	.+4      	; 0xa4e <__stack+0x14f>
        default:
            break;
        }

        /* set the datagram as sendable */
        remote_send_buffer_send(rem_buf);
     a4a:	0e 94 56 06 	call	0xcac	; 0xcac <remote_send_buffer_send>
     a4e:	0a 5c       	subi	r16, 0xCA	; 202
     a50:	1f 4f       	sbci	r17, 0xFF	; 255
     a52:	f6 e3       	ldi	r31, 0x36	; 54
     a54:	ef 0e       	add	r14, r31
     a56:	f1 1c       	adc	r15, r1

static void output_processing(void)
{
    uint8_t i;

    for (i = 0; i < (uint8_t)PSU_CHANNEL_NUM; i++)
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	03 3e       	cpi	r16, 0xE3	; 227
     a5c:	18 07       	cpc	r17, r24
     a5e:	69 f6       	brne	.-102    	; 0x9fa <__stack+0xfb>
        timer_debug();
#endif
        /* Output processing */
        output_processing();

        display_set_cursor(0, 0);
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 1e 01 	call	0x23c	; 0x23c <display_set_cursor>
        display_write_stringf("%d", psu_channels[0].voltage_setpoint.value.raw);
     a68:	80 91 82 02 	lds	r24, 0x0282
     a6c:	8f 93       	push	r24
     a6e:	80 91 81 02 	lds	r24, 0x0281
     a72:	8f 93       	push	r24
     a74:	df 92       	push	r13
     a76:	cf 92       	push	r12
     a78:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_write_stringf>
        display_set_cursor(1, 0);
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 1e 01 	call	0x23c	; 0x23c <display_set_cursor>
        display_write_stringf("%d", psu_channels[1].voltage_readout.value.scaled);
     a84:	80 91 c6 02 	lds	r24, 0x02C6
     a88:	8f 93       	push	r24
     a8a:	80 91 c5 02 	lds	r24, 0x02C5
     a8e:	8f 93       	push	r24
     a90:	df 92       	push	r13
     a92:	cf 92       	push	r12
     a94:	0e 94 5e 01 	call	0x2bc	; 0x2bc <display_write_stringf>

        /* Display handler */
        display_periodic();
     a98:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <display_periodic>

        //datagram_buffer_to_remote();
    }
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
 */
static void remote_decode_datagram(void)
{
    bool new;
    bool crc_ok;
    uint8_t i = 0;
     aa6:	10 e0       	ldi	r17, 0x00	; 0

        /* Display handler */
        display_periodic();

        //datagram_buffer_to_remote();
    }
     aa8:	25 cf       	rjmp	.-438    	; 0x8f4 <main+0x1c6>

00000aaa <pwm_init>:
#define PWM_QTY 2 // number of pwms, either 1 or 2

static t_pwm_channel pwm_channels[PWM_CHANNEL_NUM];

void pwm_init(void)
{
     aaa:	e3 ee       	ldi	r30, 0xE3	; 227
     aac:	f2 e0       	ldi	r31, 0x02	; 2

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     aae:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Reset values, just in case */
        pwm_channels[i].duty = 0;
     ab0:	14 82       	std	Z+4, r1	; 0x04
     ab2:	13 82       	std	Z+3, r1	; 0x03
        pwm_channels[i].resolution = 0;
     ab4:	12 82       	std	Z+2, r1	; 0x02
     ab6:	11 82       	std	Z+1, r1	; 0x01
        pwm_channels[i].channel = i;
     ab8:	80 83       	st	Z, r24
void pwm_init(void)
{

    uint8_t i;

    for (i = 0; i < (uint8_t)PWM_CHANNEL_NUM; i++)
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	35 96       	adiw	r30, 0x05	; 5
     abe:	84 30       	cpi	r24, 0x04	; 4
     ac0:	b9 f7       	brne	.-18     	; 0xab0 <pwm_init+0x6>
        pwm_channels[i].channel = i;
    }

    /* PWM_0 and PWM_1: 10 bit resolution */

    TCCR1A = (((PWM_QTY - 1) << 5) | 0x80 | (PWM_MODE << 1));
     ac2:	82 ea       	ldi	r24, 0xA2	; 162
     ac4:	80 93 80 00 	sts	0x0080, r24
    TCCR1B = ((PWM_MODE << 3) | (1 << WGM13) | (1 << CS10));
     ac8:	89 e1       	ldi	r24, 0x19	; 25
     aca:	80 93 81 00 	sts	0x0081, r24
    ICR1H = (PWM_FREQ >> 8);
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	80 93 87 00 	sts	0x0087, r24
    ICR1L = (PWM_FREQ & 0xff);
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	80 93 86 00 	sts	0x0086, r24

    pwm_channels[PWM_CHANNEL_0].resolution = PWM_FREQ;
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	90 93 e5 02 	sts	0x02E5, r25
     ae2:	80 93 e4 02 	sts	0x02E4, r24
    pwm_channels[PWM_CHANNEL_1].resolution = PWM_FREQ;
     ae6:	90 93 ea 02 	sts	0x02EA, r25
     aea:	80 93 e9 02 	sts	0x02E9, r24

    /* PWM_2 and PWM_3: 8-bit resolution */

    /* PWM Phase Correct and Clear OCR2x on match */
    TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20);//
     aee:	81 ea       	ldi	r24, 0xA1	; 161
     af0:	80 93 b0 00 	sts	0x00B0, r24
    /* set up timer with prescaler */
    TCCR2B = (0 << WGM22) | (1 << CS20);
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 b1 00 	sts	0x00B1, r24

    /* Set output pins */
    DDRB |= (1 << PIN1) | (1 << PIN2) | (1 << PIN3);
     afa:	84 b1       	in	r24, 0x04	; 4
     afc:	8e 60       	ori	r24, 0x0E	; 14
     afe:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PIN3);
     b00:	53 9a       	sbi	0x0a, 3	; 10

    pwm_channels[PWM_CHANNEL_2].resolution = 0xFF;
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 ef 02 	sts	0x02EF, r25
     b0a:	80 93 ee 02 	sts	0x02EE, r24
    pwm_channels[PWM_CHANNEL_3].resolution = 0xFF;
     b0e:	90 93 f4 02 	sts	0x02F4, r25
     b12:	80 93 f3 02 	sts	0x02F3, r24
     b16:	08 95       	ret

00000b18 <pwm_set_duty>:
}

void pwm_set_duty(e_pwm_channel pwm_channel, uint16_t duty)
{

    pwm_channels[pwm_channel].duty = duty;
     b18:	95 e0       	ldi	r25, 0x05	; 5
     b1a:	89 9f       	mul	r24, r25
     b1c:	f0 01       	movw	r30, r0
     b1e:	11 24       	eor	r1, r1
     b20:	ed 51       	subi	r30, 0x1D	; 29
     b22:	fd 4f       	sbci	r31, 0xFD	; 253
     b24:	63 83       	std	Z+3, r22	; 0x03
     b26:	74 83       	std	Z+4, r23	; 0x04

    switch(pwm_channel)
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	59 f0       	breq	.+22     	; 0xb42 <pwm_set_duty+0x2a>
     b2c:	28 f0       	brcs	.+10     	; 0xb38 <pwm_set_duty+0x20>
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	69 f0       	breq	.+26     	; 0xb4c <pwm_set_duty+0x34>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	71 f0       	breq	.+28     	; 0xb52 <pwm_set_duty+0x3a>
     b36:	08 95       	ret
    {
    case PWM_CHANNEL_0:
        OCR1AH = duty >> 8;
     b38:	70 93 89 00 	sts	0x0089, r23
        OCR1AL = duty;
     b3c:	60 93 88 00 	sts	0x0088, r22
        break;
     b40:	08 95       	ret
    case PWM_CHANNEL_1:
        OCR1BH = duty >> 8;
     b42:	70 93 8b 00 	sts	0x008B, r23
        OCR1BL = duty;
     b46:	60 93 8a 00 	sts	0x008A, r22
        break;
     b4a:	08 95       	ret
    case PWM_CHANNEL_2:
        OCR2A = duty;
     b4c:	60 93 b3 00 	sts	0x00B3, r22
        break;
     b50:	08 95       	ret
    case PWM_CHANNEL_3:
        OCR2B = duty;
     b52:	60 93 b4 00 	sts	0x00B4, r22
     b56:	08 95       	ret

00000b58 <pwm_get_resolution>:
    }
}

uint16_t pwm_get_resolution(e_pwm_channel channel)
{
    return pwm_channels[channel].resolution;
     b58:	95 e0       	ldi	r25, 0x05	; 5
     b5a:	89 9f       	mul	r24, r25
     b5c:	f0 01       	movw	r30, r0
     b5e:	11 24       	eor	r1, r1
     b60:	ed 51       	subi	r30, 0x1D	; 29
     b62:	fd 4f       	sbci	r31, 0xFD	; 253
}
     b64:	81 81       	ldd	r24, Z+1	; 0x01
     b66:	92 81       	ldd	r25, Z+2	; 0x02
     b68:	08 95       	ret

00000b6a <remote_datagram_to_buffer>:

static t_remote_datagram_buffer remote_rcv_buf[DGRAM_RCV_BUFFER_LEN];
static t_remote_datagram_buffer remote_snd_buf[DGRAM_SND_BUFFER_LEN];

e_error remote_datagram_to_buffer(t_remote_datagram *datagram, uint8_t *buffer, uint8_t size)
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <remote_datagram_to_buffer+0x6>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	7a 83       	std	Y+2, r23	; 0x02
     b76:	69 83       	std	Y+1, r22	; 0x01
    if (size >= sizeof(t_remote_datagram))
     b78:	4c 30       	cpi	r20, 0x0C	; 12
     b7a:	50 f0       	brcs	.+20     	; 0xb90 <remote_datagram_to_buffer+0x26>
    {
        /* enough large buffer */
        memcpy(&datagram[0], &buffer, sizeof(t_remote_datagram));
     b7c:	2c e0       	ldi	r18, 0x0C	; 12
     b7e:	fe 01       	movw	r30, r28
     b80:	31 96       	adiw	r30, 0x01	; 1
     b82:	dc 01       	movw	r26, r24
     b84:	01 90       	ld	r0, Z+
     b86:	0d 92       	st	X+, r0
     b88:	2a 95       	dec	r18
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <remote_datagram_to_buffer+0x1a>
        return E_OK;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <remote_datagram_to_buffer+0x28>
    }
    else
    {
        /* refuse to overflow ! */
        return E_OVERFLOW;
     b90:	83 e0       	ldi	r24, 0x03	; 3
    }
}
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <remote_buffer_alloc>:

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
     b9c:	fb 01       	movw	r30, r22
    uint8_t i;
    *datagram_buf = NULL;
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	10 82       	st	Z, r1
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     ba2:	20 e0       	ldi	r18, 0x00	; 0
    {
        if (static_buffer[i].timestamp == 0U)
     ba4:	dc 01       	movw	r26, r24
     ba6:	5c 96       	adiw	r26, 0x1c	; 28
     ba8:	4d 91       	ld	r20, X+
     baa:	5d 91       	ld	r21, X+
     bac:	6d 91       	ld	r22, X+
     bae:	7c 91       	ld	r23, X
     bb0:	5f 97       	sbiw	r26, 0x1f	; 31
     bb2:	45 2b       	or	r20, r21
     bb4:	46 2b       	or	r20, r22
     bb6:	47 2b       	or	r20, r23
     bb8:	11 f4       	brne	.+4      	; 0xbbe <remote_buffer_alloc+0x22>
        {
            *datagram_buf = &(static_buffer[i]);
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24

void remote_buffer_alloc(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     bbe:	2f 5f       	subi	r18, 0xFF	; 255
     bc0:	80 96       	adiw	r24, 0x20	; 32
     bc2:	25 30       	cpi	r18, 0x05	; 5
     bc4:	79 f7       	brne	.-34     	; 0xba4 <remote_buffer_alloc+0x8>
        if (static_buffer[i].timestamp == 0U)
        {
            *datagram_buf = &(static_buffer[i]);
        }
    }
}
     bc6:	08 95       	ret

00000bc8 <remote_receive_buffer_alloc>:

void remote_receive_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
    /* wrapper */
    remote_buffer_alloc(remote_rcv_buf, datagram_buf);
     bc8:	bc 01       	movw	r22, r24
     bca:	87 e9       	ldi	r24, 0x97	; 151
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <remote_buffer_alloc>

00000bd2 <remote_send_buffer_alloc>:
}

void remote_send_buffer_alloc(t_remote_datagram_buffer** datagram_buf)
{
    /* wrapper */
    remote_buffer_alloc(remote_snd_buf, datagram_buf);
     bd2:	bc 01       	movw	r22, r24
     bd4:	87 ef       	ldi	r24, 0xF7	; 247
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <remote_buffer_alloc>

00000bdc <remote_buffer_get_oldest>:
}

void remote_buffer_get_oldest(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	db 01       	movw	r26, r22
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	1c 92       	st	X, r1
     bea:	1e 92       	st	-X, r1
     bec:	fc 01       	movw	r30, r24

void remote_buffer_get_oldest(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
     bee:	0f ef       	ldi	r16, 0xFF	; 255
     bf0:	1f ef       	ldi	r17, 0xFF	; 255
     bf2:	98 01       	movw	r18, r16
}

void remote_buffer_get_oldest(t_remote_datagram_buffer *static_buffer, t_remote_datagram_buffer** datagram_buf)
{
    uint8_t i;
    uint8_t id = 0xFF;
     bf4:	df ef       	ldi	r29, 0xFF	; 255
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if ((static_buffer[i].timestamp > 0U) && (static_buffer[i].timestamp < oldest))
     bf8:	44 8d       	ldd	r20, Z+28	; 0x1c
     bfa:	55 8d       	ldd	r21, Z+29	; 0x1d
     bfc:	66 8d       	ldd	r22, Z+30	; 0x1e
     bfe:	77 8d       	ldd	r23, Z+31	; 0x1f
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	41 f0       	breq	.+16     	; 0xc1a <remote_buffer_get_oldest+0x3e>
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	62 07       	cpc	r22, r18
     c10:	73 07       	cpc	r23, r19
     c12:	18 f4       	brcc	.+6      	; 0xc1a <remote_buffer_get_oldest+0x3e>
     c14:	8a 01       	movw	r16, r20
     c16:	9b 01       	movw	r18, r22
     c18:	dc 2f       	mov	r29, r28
{
    uint8_t i;
    uint8_t id = 0xFF;
    uint32_t oldest = 0xFFFFFFFFU;
    *datagram_buf = NULL;
    for (i = 0; (i < DGRAM_RCV_BUFFER_LEN) || (i == 0xFFU); i++)  /* ...do not overflow if 0xFF! */
     c1a:	cf 5f       	subi	r28, 0xFF	; 255
     c1c:	b0 96       	adiw	r30, 0x20	; 32
     c1e:	c5 30       	cpi	r28, 0x05	; 5
     c20:	59 f7       	brne	.-42     	; 0xbf8 <remote_buffer_get_oldest+0x1c>
            id = i;
            oldest = static_buffer[i].timestamp;
        }
    }

    if (id != 0xFF) *datagram_buf = &(static_buffer[id]);
     c22:	df 3f       	cpi	r29, 0xFF	; 255
     c24:	39 f0       	breq	.+14     	; 0xc34 <remote_buffer_get_oldest+0x58>
     c26:	20 e2       	ldi	r18, 0x20	; 32
     c28:	d2 9f       	mul	r29, r18
     c2a:	80 0d       	add	r24, r0
     c2c:	91 1d       	adc	r25, r1
     c2e:	11 24       	eor	r1, r1
     c30:	8d 93       	st	X+, r24
     c32:	9c 93       	st	X, r25
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <remote_receive_buffer_get_oldest>:

void remote_receive_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    remote_buffer_get_oldest(remote_rcv_buf, datagram_buf);
     c3e:	bc 01       	movw	r22, r24
     c40:	87 e9       	ldi	r24, 0x97	; 151
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <remote_buffer_get_oldest>

00000c48 <remote_send_buffer_get_oldest>:
}

void remote_send_buffer_get_oldest(t_remote_datagram_buffer** datagram_buf)
{
    remote_buffer_get_oldest(remote_snd_buf, datagram_buf);
     c48:	bc 01       	movw	r22, r24
     c4a:	87 ef       	ldi	r24, 0xF7	; 247
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <remote_buffer_get_oldest>

00000c52 <remote_receive_buffer_get>:
}

bool remote_receive_buffer_get(t_remote_datagram_buffer *datagram)
{
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <remote_receive_buffer_get+0xa>
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	8c 01       	movw	r16, r24
    t_remote_datagram_buffer *buf = NULL;
     c62:	1a 82       	std	Y+2, r1	; 0x02
     c64:	19 82       	std	Y+1, r1	; 0x01
    remote_receive_buffer_get_oldest(&buf);
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <remote_receive_buffer_get_oldest>

    if (buf != NULL && datagram != NULL)
     c6e:	e9 81       	ldd	r30, Y+1	; 0x01
     c70:	fa 81       	ldd	r31, Y+2	; 0x02
     c72:	30 97       	sbiw	r30, 0x00	; 0
     c74:	99 f0       	breq	.+38     	; 0xc9c <remote_receive_buffer_get+0x4a>
     c76:	01 15       	cp	r16, r1
     c78:	11 05       	cpc	r17, r1
     c7a:	81 f0       	breq	.+32     	; 0xc9c <remote_receive_buffer_get+0x4a>
    {
        /* get a copy */
        (void)memcpy(datagram, buf, sizeof(t_remote_datagram_buffer));
     c7c:	80 e2       	ldi	r24, 0x20	; 32
     c7e:	d8 01       	movw	r26, r16
     c80:	01 90       	ld	r0, Z+
     c82:	0d 92       	st	X+, r0
     c84:	8a 95       	dec	r24
     c86:	e1 f7       	brne	.-8      	; 0xc80 <remote_receive_buffer_get+0x2e>
        /* immediately reset timestamp
         * CAUTION: critical section! */
        REMOTE_ENTER_CRITICAL_SECTION;
     c88:	f8 94       	cli
        buf->timestamp = 0U;
     c8a:	e9 81       	ldd	r30, Y+1	; 0x01
     c8c:	fa 81       	ldd	r31, Y+2	; 0x02
     c8e:	14 8e       	std	Z+28, r1	; 0x1c
     c90:	15 8e       	std	Z+29, r1	; 0x1d
     c92:	16 8e       	std	Z+30, r1	; 0x1e
     c94:	17 8e       	std	Z+31, r1	; 0x1f
        REMOTE_EXIT_CRITICAL_SECTION;
     c96:	78 94       	sei
        return true;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	01 c0       	rjmp	.+2      	; 0xc9e <remote_receive_buffer_get+0x4c>
    }
    else
    {
        return false;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <remote_send_buffer_send>:

void remote_send_buffer_send(t_remote_datagram_buffer *rem_buf)
{
    REMOTE_ENTER_CRITICAL_SECTION;
     cac:	f8 94       	cli

    /* mark as sendable */
    rem_buf->timestamp = g_timestamp;
     cae:	40 91 46 04 	lds	r20, 0x0446
     cb2:	50 91 47 04 	lds	r21, 0x0447
     cb6:	60 91 48 04 	lds	r22, 0x0448
     cba:	70 91 49 04 	lds	r23, 0x0449
     cbe:	fc 01       	movw	r30, r24
     cc0:	44 8f       	std	Z+28, r20	; 0x1c
     cc2:	55 8f       	std	Z+29, r21	; 0x1d
     cc4:	66 8f       	std	Z+30, r22	; 0x1e
     cc6:	77 8f       	std	Z+31, r23	; 0x1f

    REMOTE_EXIT_CRITICAL_SECTION;
     cc8:	78 94       	sei
     cca:	08 95       	ret

00000ccc <remote_calc_crc_buffer_and_compare>:
}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < len; i++)
     cd4:	dc 01       	movw	r26, r24
}

bool remote_calc_crc_buffer_and_compare(uint8_t *buffer, uint8_t len, uint16_t expected_crc, uint16_t *calc_crc)
{
    uint16_t i;
    uint16_t crc = 0;
     cd6:	e0 e0       	ldi	r30, 0x00	; 0
     cd8:	f0 e0       	ldi	r31, 0x00	; 0

    for (i = 0; i < len; i++)
     cda:	c6 2f       	mov	r28, r22
     cdc:	d0 e0       	ldi	r29, 0x00	; 0
     cde:	8d 01       	movw	r16, r26
     ce0:	08 1b       	sub	r16, r24
     ce2:	19 0b       	sbc	r17, r25
     ce4:	0c 17       	cp	r16, r28
     ce6:	1d 07       	cpc	r17, r29
     ce8:	c8 f4       	brcc	.+50     	; 0xd1c <remote_calc_crc_buffer_and_compare+0x50>
    {
        crc = _crc16_update(crc, buffer[i]);
     cea:	7d 91       	ld	r23, X+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     cec:	e7 27       	eor	r30, r23
     cee:	7e 2f       	mov	r23, r30
     cf0:	72 95       	swap	r23
     cf2:	7e 27       	eor	r23, r30
     cf4:	07 2e       	mov	r0, r23
     cf6:	76 95       	lsr	r23
     cf8:	76 95       	lsr	r23
     cfa:	70 25       	eor	r23, r0
     cfc:	07 2e       	mov	r0, r23
     cfe:	76 95       	lsr	r23
     d00:	70 25       	eor	r23, r0
     d02:	77 70       	andi	r23, 0x07	; 7
     d04:	0e 2e       	mov	r0, r30
     d06:	ef 2f       	mov	r30, r31
     d08:	76 95       	lsr	r23
     d0a:	07 94       	ror	r0
     d0c:	77 95       	ror	r23
     d0e:	f0 2d       	mov	r31, r0
     d10:	e7 27       	eor	r30, r23
     d12:	06 94       	lsr	r0
     d14:	77 95       	ror	r23
     d16:	f0 25       	eor	r31, r0
     d18:	e7 27       	eor	r30, r23
     d1a:	e1 cf       	rjmp	.-62     	; 0xcde <remote_calc_crc_buffer_and_compare+0x12>
    }

    if (calc_crc != NULL) *calc_crc = crc;
     d1c:	21 15       	cp	r18, r1
     d1e:	31 05       	cpc	r19, r1
     d20:	19 f0       	breq	.+6      	; 0xd28 <remote_calc_crc_buffer_and_compare+0x5c>
     d22:	d9 01       	movw	r26, r18
     d24:	ed 93       	st	X+, r30
     d26:	fc 93       	st	X, r31

    if ((crc != expected_crc) || (len == 0U))
     d28:	e4 17       	cp	r30, r20
     d2a:	f5 07       	cpc	r31, r21
     d2c:	19 f4       	brne	.+6      	; 0xd34 <remote_calc_crc_buffer_and_compare+0x68>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	61 11       	cpse	r22, r1
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <remote_calc_crc_buffer_and_compare+0x6a>
    {
        /* CRC is unexpected or length is zero -> something failed */
        return false;
     d34:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return true;
    }
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <remote_buffer_to_datagram>:

e_error remote_buffer_to_datagram(uint8_t input)
{
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28

    e_error err = E_OK;    /* save the error code or so */

    /* Run the state machine for each received byte */
    if (g_timestamp > remote_rcv_sm.timeout)
     d46:	40 91 46 04 	lds	r20, 0x0446
     d4a:	50 91 47 04 	lds	r21, 0x0447
     d4e:	60 91 48 04 	lds	r22, 0x0448
     d52:	70 91 49 04 	lds	r23, 0x0449
     d56:	00 91 39 04 	lds	r16, 0x0439
     d5a:	10 91 3a 04 	lds	r17, 0x043A
     d5e:	20 91 3b 04 	lds	r18, 0x043B
     d62:	30 91 3c 04 	lds	r19, 0x043C
     d66:	04 17       	cp	r16, r20
     d68:	15 07       	cpc	r17, r21
     d6a:	26 07       	cpc	r18, r22
     d6c:	37 07       	cpc	r19, r23
     d6e:	38 f4       	brcc	.+14     	; 0xd7e <remote_buffer_to_datagram+0x3e>
    {
        /* timed out - restart the state machine */
        remote_rcv_sm.state = DGRAM_RCV_MAGIC_START;
     d70:	10 92 37 04 	sts	0x0437, r1
        remote_rcv_sm.state_prev = DGRAM_RCV_MAGIC_END;   /* force state change to reuse code */
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	90 93 38 04 	sts	0x0438, r25
        err = E_TIMEOUT;
     d7a:	c4 e0       	ldi	r28, 0x04	; 4
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <remote_buffer_to_datagram+0x40>
}

e_error remote_buffer_to_datagram(uint8_t input)
{

    e_error err = E_OK;    /* save the error code or so */
     d7e:	c0 e0       	ldi	r28, 0x00	; 0
        remote_rcv_sm.state = DGRAM_RCV_MAGIC_START;
        remote_rcv_sm.state_prev = DGRAM_RCV_MAGIC_END;   /* force state change to reuse code */
        err = E_TIMEOUT;
    }

    if (remote_rcv_sm.state != remote_rcv_sm.state_prev)
     d80:	90 91 37 04 	lds	r25, 0x0437
     d84:	20 91 38 04 	lds	r18, 0x0438
     d88:	92 17       	cp	r25, r18
     d8a:	d1 f0       	breq	.+52     	; 0xdc0 <remote_buffer_to_datagram+0x80>
    {
        /* reset timeouts and indexes at state change */
        remote_rcv_sm.temp = 0;
     d8c:	10 92 3d 04 	sts	0x043D, r1
     d90:	10 92 3e 04 	sts	0x043E, r1
     d94:	10 92 3f 04 	sts	0x043F, r1
     d98:	10 92 40 04 	sts	0x0440, r1
        remote_rcv_sm.buf_index = 0;
     d9c:	10 92 41 04 	sts	0x0441, r1
        remote_rcv_sm.timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     da0:	8a 01       	movw	r16, r20
     da2:	9b 01       	movw	r18, r22
     da4:	00 5c       	subi	r16, 0xC0	; 192
     da6:	1d 4b       	sbci	r17, 0xBD	; 189
     da8:	20 4f       	sbci	r18, 0xF0	; 240
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	00 93 39 04 	sts	0x0439, r16
     db0:	10 93 3a 04 	sts	0x043A, r17
     db4:	20 93 3b 04 	sts	0x043B, r18
     db8:	30 93 3c 04 	sts	0x043C, r19
        remote_rcv_sm.state_prev = remote_rcv_sm.state;
     dbc:	90 93 38 04 	sts	0x0438, r25
    }

    switch(remote_rcv_sm.state)
     dc0:	91 30       	cpi	r25, 0x01	; 1
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <remote_buffer_to_datagram+0x86>
     dc4:	49 c0       	rjmp	.+146    	; 0xe58 <remote_buffer_to_datagram+0x118>
     dc6:	38 f0       	brcs	.+14     	; 0xdd6 <remote_buffer_to_datagram+0x96>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <remote_buffer_to_datagram+0x8e>
     dcc:	5a c0       	rjmp	.+180    	; 0xe82 <remote_buffer_to_datagram+0x142>
     dce:	93 30       	cpi	r25, 0x03	; 3
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <remote_buffer_to_datagram+0x94>
     dd2:	75 c0       	rjmp	.+234    	; 0xebe <remote_buffer_to_datagram+0x17e>
     dd4:	92 c0       	rjmp	.+292    	; 0xefa <remote_buffer_to_datagram+0x1ba>
    {
        case DGRAM_RCV_MAGIC_START:
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
     dd6:	40 91 3d 04 	lds	r20, 0x043D
     dda:	50 91 3e 04 	lds	r21, 0x043E
     dde:	60 91 3f 04 	lds	r22, 0x043F
     de2:	70 91 40 04 	lds	r23, 0x0440
     de6:	76 2f       	mov	r23, r22
     de8:	65 2f       	mov	r22, r21
     dea:	54 2f       	mov	r21, r20
     dec:	44 27       	eor	r20, r20
            remote_rcv_sm.temp |= input;
     dee:	48 2b       	or	r20, r24
     df0:	40 93 3d 04 	sts	0x043D, r20
     df4:	50 93 3e 04 	sts	0x043E, r21
     df8:	60 93 3f 04 	sts	0x043F, r22
     dfc:	70 93 40 04 	sts	0x0440, r23

            if (remote_rcv_sm.temp == DGRAM_MAGIC_START)
     e00:	41 15       	cp	r20, r1
     e02:	5e 4e       	sbci	r21, 0xEE	; 238
     e04:	6f 4f       	sbci	r22, 0xFF	; 255
     e06:	70 4c       	sbci	r23, 0xC0	; 192
     e08:	91 f4       	brne	.+36     	; 0xe2e <remote_buffer_to_datagram+0xee>
            {
                /* new datagram is incoming: allocate a buffer slot, if possible */
                remote_receive_buffer_alloc(&remote_rcv_sm.datagram_buf);
     e0a:	82 e4       	ldi	r24, 0x42	; 66
     e0c:	94 e0       	ldi	r25, 0x04	; 4
     e0e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <remote_receive_buffer_alloc>
                if (remote_rcv_sm.datagram_buf != NULL)
     e12:	e0 91 42 04 	lds	r30, 0x0442
     e16:	f0 91 43 04 	lds	r31, 0x0443
     e1a:	30 97       	sbiw	r30, 0x00	; 0
     e1c:	39 f0       	breq	.+14     	; 0xe2c <remote_buffer_to_datagram+0xec>
                {
                    /* clear some fields */
                    remote_rcv_sm.datagram_buf->datagram.crc = 0;
     e1e:	17 82       	std	Z+7, r1	; 0x07
     e20:	16 82       	std	Z+6, r1	; 0x06
                    remote_rcv_sm.datagram_buf->datagram.len = 0;
     e22:	15 82       	std	Z+5, r1	; 0x05
                    /* alright, datagram header synchronized! */
                    remote_rcv_sm.state = DGRAM_RCV_HEADER;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 37 04 	sts	0x0437, r24
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <remote_buffer_to_datagram+0xee>
                }
                else
                {
                    /* Overflow! */
                    err = E_OVERFLOW;
     e2c:	c3 e0       	ldi	r28, 0x03	; 3
                /* Invalid magic or out of sync */
                /* Stay listening for the magic sequence */
            }

            /* Never timeout in this state */
            remote_rcv_sm.timeout = g_timestamp + DGRAM_RCV_TIMEOUT_US;
     e2e:	40 91 46 04 	lds	r20, 0x0446
     e32:	50 91 47 04 	lds	r21, 0x0447
     e36:	60 91 48 04 	lds	r22, 0x0448
     e3a:	70 91 49 04 	lds	r23, 0x0449
     e3e:	40 5c       	subi	r20, 0xC0	; 192
     e40:	5d 4b       	sbci	r21, 0xBD	; 189
     e42:	60 4f       	sbci	r22, 0xF0	; 240
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	40 93 39 04 	sts	0x0439, r20
     e4a:	50 93 3a 04 	sts	0x043A, r21
     e4e:	60 93 3b 04 	sts	0x043B, r22
     e52:	70 93 3c 04 	sts	0x043C, r23

            break;
     e56:	51 c0       	rjmp	.+162    	; 0xefa <remote_buffer_to_datagram+0x1ba>
        case DGRAM_RCV_HEADER:

            /* Use pointer arithmetic to optimize the ISR call:
             * Pick the start address, sum it up with the buf index
             * and finally set the value at the location to the input */
            *((uint8_t*)&(DATAGRAM_HEADER_START(remote_rcv_sm.datagram_buf->datagram)) + remote_rcv_sm.buf_index) = input;
     e58:	90 91 41 04 	lds	r25, 0x0441
     e5c:	e0 91 42 04 	lds	r30, 0x0442
     e60:	f0 91 43 04 	lds	r31, 0x0443
     e64:	e9 0f       	add	r30, r25
     e66:	f1 1d       	adc	r31, r1
     e68:	84 83       	std	Z+4, r24	; 0x04
            remote_rcv_sm.buf_index++;
     e6a:	80 91 41 04 	lds	r24, 0x0441
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 41 04 	sts	0x0441, r24

            if (remote_rcv_sm.buf_index >= DATAGRAM_HEADER_SIZE)
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	08 f4       	brcc	.+2      	; 0xe7a <remote_buffer_to_datagram+0x13a>
     e78:	40 c0       	rjmp	.+128    	; 0xefa <remote_buffer_to_datagram+0x1ba>
            {
                /* header completely received */
                remote_rcv_sm.state = DGRAM_RCV_MAGIC_END;
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	80 93 37 04 	sts	0x0437, r24
     e80:	38 c0       	rjmp	.+112    	; 0xef2 <remote_buffer_to_datagram+0x1b2>

            break;
        case DGRAM_RCV_MAGIC_END:
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
     e82:	40 91 3d 04 	lds	r20, 0x043D
     e86:	50 91 3e 04 	lds	r21, 0x043E
     e8a:	60 91 3f 04 	lds	r22, 0x043F
     e8e:	70 91 40 04 	lds	r23, 0x0440
     e92:	76 2f       	mov	r23, r22
     e94:	65 2f       	mov	r22, r21
     e96:	54 2f       	mov	r21, r20
     e98:	44 27       	eor	r20, r20
            remote_rcv_sm.temp |= input;
     e9a:	48 2b       	or	r20, r24
     e9c:	40 93 3d 04 	sts	0x043D, r20
     ea0:	50 93 3e 04 	sts	0x043E, r21
     ea4:	60 93 3f 04 	sts	0x043F, r22
     ea8:	70 93 40 04 	sts	0x0440, r23

            err = E_OK;

            if (remote_rcv_sm.temp == DGRAM_MAGIC_END)
     eac:	4f 3e       	cpi	r20, 0xEF	; 239
     eae:	5e 4b       	sbci	r21, 0xBE	; 190
     eb0:	6d 4a       	sbci	r22, 0xAD	; 173
     eb2:	7e 4d       	sbci	r23, 0xDE	; 222
     eb4:	09 f5       	brne	.+66     	; 0xef8 <remote_buffer_to_datagram+0x1b8>
            {
                /* alright, datagram header synchronized! */
                remote_rcv_sm.state = DGRAM_RCV_DATA;
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	80 93 37 04 	sts	0x0437, r24
     ebc:	1d c0       	rjmp	.+58     	; 0xef8 <remote_buffer_to_datagram+0x1b8>
            }

            break;
        case DGRAM_RCV_DATA:

            remote_rcv_sm.datagram_buf->data[remote_rcv_sm.buf_index] = input;
     ebe:	e0 91 42 04 	lds	r30, 0x0442
     ec2:	f0 91 43 04 	lds	r31, 0x0443
     ec6:	90 91 41 04 	lds	r25, 0x0441
     eca:	df 01       	movw	r26, r30
     ecc:	a9 0f       	add	r26, r25
     ece:	b1 1d       	adc	r27, r1
     ed0:	1c 96       	adiw	r26, 0x0c	; 12
     ed2:	8c 93       	st	X, r24
            remote_rcv_sm.buf_index++;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	89 0f       	add	r24, r25
     ed8:	80 93 41 04 	sts	0x0441, r24
            if ((remote_rcv_sm.buf_index >= remote_rcv_sm.datagram_buf->datagram.len) || (remote_rcv_sm.buf_index >= DGRAM_RCV_DATA_MAX))
     edc:	95 81       	ldd	r25, Z+5	; 0x05
     ede:	89 17       	cp	r24, r25
     ee0:	10 f4       	brcc	.+4      	; 0xee6 <remote_buffer_to_datagram+0x1a6>
     ee2:	80 31       	cpi	r24, 0x10	; 16
     ee4:	50 f0       	brcs	.+20     	; 0xefa <remote_buffer_to_datagram+0x1ba>
            {
                /* data transfer completed */
                remote_rcv_sm.state = DGRAM_RCV_MAGIC_START;
     ee6:	10 92 37 04 	sts	0x0437, r1
                /* set timestamp to indicate buffer slot not free and to give an order */
                remote_rcv_sm.datagram_buf->timestamp = g_timestamp;
     eea:	44 8f       	std	Z+28, r20	; 0x1c
     eec:	55 8f       	std	Z+29, r21	; 0x1d
     eee:	66 8f       	std	Z+30, r22	; 0x1e
     ef0:	77 8f       	std	Z+31, r23	; 0x1f
/*                printf("*%d %d\n", buf_index, datagram_buf->datagram.len);    */
                remote_rcv_sm.buf_index = 0;
     ef2:	10 92 41 04 	sts	0x0441, r1
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <remote_buffer_to_datagram+0x1ba>
            /* Stay in there until the magic sequence is received */

            remote_rcv_sm.temp <<= 8U;    /* shift 1 byte to the left (to make space for the new one) */
            remote_rcv_sm.temp |= input;

            err = E_OK;
     ef8:	c0 e0       	ldi	r28, 0x00	; 0
            /* Fatal error */
            break;
    }
    return err;

}
     efa:	8c 2f       	mov	r24, r28
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <datagram_buffer_to_remote>:

void datagram_buffer_to_remote(void)
{
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	60 97       	sbiw	r28, 0x10	; 16
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61

    /* Just a non interrupt driven stub to start with */

    t_remote_datagram_buffer *buf = NULL;
     f20:	18 8a       	std	Y+16, r1	; 0x10
     f22:	1f 86       	std	Y+15, r1	; 0x0f

    uint8_t i = 0;
    uint8_t datagram_metadata[sizeof(t_remote_datagram)];

    remote_send_buffer_get_oldest(&buf);
     f24:	ce 01       	movw	r24, r28
     f26:	0f 96       	adiw	r24, 0x0f	; 15
     f28:	0e 94 24 06 	call	0xc48	; 0xc48 <remote_send_buffer_get_oldest>

    if (buf != NULL)
     f2c:	af 85       	ldd	r26, Y+15	; 0x0f
     f2e:	b8 89       	ldd	r27, Y+16	; 0x10
     f30:	10 97       	sbiw	r26, 0x00	; 0
     f32:	91 f1       	breq	.+100    	; 0xf98 <datagram_buffer_to_remote+0x94>
     f34:	8e 01       	movw	r16, r28
     f36:	0f 5f       	subi	r16, 0xFF	; 255
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	1e 87       	std	Y+14, r17	; 0x0e
     f3c:	0d 87       	std	Y+13, r16	; 0x0d
e_error remote_datagram_to_buffer(t_remote_datagram *datagram, uint8_t *buffer, uint8_t size)
{
    if (size >= sizeof(t_remote_datagram))
    {
        /* enough large buffer */
        memcpy(&datagram[0], &buffer, sizeof(t_remote_datagram));
     f3e:	7e 01       	movw	r14, r28
     f40:	8d e0       	ldi	r24, 0x0D	; 13
     f42:	e8 0e       	add	r14, r24
     f44:	f1 1c       	adc	r15, r1
     f46:	8c e0       	ldi	r24, 0x0C	; 12
     f48:	f7 01       	movw	r30, r14
     f4a:	01 90       	ld	r0, Z+
     f4c:	0d 92       	st	X+, r0
     f4e:	8a 95       	dec	r24
     f50:	e1 f7       	brne	.-8      	; 0xf4a <datagram_buffer_to_remote+0x46>

        remote_datagram_to_buffer(&buf->datagram, datagram_metadata, sizeof(t_remote_datagram));

        for (i = 0; i < sizeof(t_remote_datagram); i++)
        {
            uart_putchar(datagram_metadata[i], NULL);
     f52:	f8 01       	movw	r30, r16
     f54:	81 91       	ld	r24, Z+
     f56:	8f 01       	movw	r16, r30
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 1d 08 	call	0x103a	; 0x103a <uart_putchar>
    if (buf != NULL)
    {

        remote_datagram_to_buffer(&buf->datagram, datagram_metadata, sizeof(t_remote_datagram));

        for (i = 0; i < sizeof(t_remote_datagram); i++)
     f62:	0e 15       	cp	r16, r14
     f64:	1f 05       	cpc	r17, r15
     f66:	a9 f7       	brne	.-22     	; 0xf52 <datagram_buffer_to_remote+0x4e>
     f68:	10 e0       	ldi	r17, 0x00	; 0
        {
            uart_putchar(datagram_metadata[i], NULL);
        }
        for (i = 0; i < buf->datagram.len; i++)
     f6a:	ef 85       	ldd	r30, Y+15	; 0x0f
     f6c:	f8 89       	ldd	r31, Y+16	; 0x10
     f6e:	85 81       	ldd	r24, Z+5	; 0x05
     f70:	18 17       	cp	r17, r24
     f72:	50 f4       	brcc	.+20     	; 0xf88 <datagram_buffer_to_remote+0x84>
        {
            uart_putchar(buf->data[i], NULL);
     f74:	e1 0f       	add	r30, r17
     f76:	f1 1d       	adc	r31, r1
     f78:	84 85       	ldd	r24, Z+12	; 0x0c
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 1d 08 	call	0x103a	; 0x103a <uart_putchar>

        for (i = 0; i < sizeof(t_remote_datagram); i++)
        {
            uart_putchar(datagram_metadata[i], NULL);
        }
        for (i = 0; i < buf->datagram.len; i++)
     f84:	1f 5f       	subi	r17, 0xFF	; 255
     f86:	f1 cf       	rjmp	.-30     	; 0xf6a <datagram_buffer_to_remote+0x66>
            uart_putchar(buf->data[i], NULL);
        }

        /* immediately reset timestamp
         * CAUTION: critical section! */
        REMOTE_ENTER_CRITICAL_SECTION;
     f88:	f8 94       	cli
        buf->timestamp = 0U;
     f8a:	ef 85       	ldd	r30, Y+15	; 0x0f
     f8c:	f8 89       	ldd	r31, Y+16	; 0x10
     f8e:	14 8e       	std	Z+28, r1	; 0x1c
     f90:	15 8e       	std	Z+29, r1	; 0x1d
     f92:	16 8e       	std	Z+30, r1	; 0x1e
     f94:	17 8e       	std	Z+31, r1	; 0x1f
        REMOTE_EXIT_CRITICAL_SECTION;
     f96:	78 94       	sei
    else
    {
        /* nothing to send */
    }

}
     f98:	60 96       	adiw	r28, 0x10	; 16
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	08 95       	ret

00000fb2 <__vector_default>:
 * without a defined ISR routine.
 * It tries to write a string on the display and then blocks.
 * Especially useful when implementing interrupt routines..
 */
ISR(BADISR_vect)
{
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
    uart_putstring("no ISR!\r\n");
     fbc:	8e ec       	ldi	r24, 0xCE	; 206
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_putstring>
     fc4:	ff cf       	rjmp	.-2      	; 0xfc4 <__vector_default+0x12>

00000fc6 <system_fatal>:
    for(;;);
}

void system_fatal(char *str)
{
    uart_putstring(str);
     fc6:	0e 94 75 08 	call	0x10ea	; 0x10ea <uart_putstring>
     fca:	ff cf       	rjmp	.-2      	; 0xfca <system_fatal+0x4>

00000fcc <system_reset>:

void system_reset(void)
{
    /* start at zero! */
    void (*start)(void) = 0;
    start();
     fcc:	e0 e0       	ldi	r30, 0x00	; 0
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	09 94       	ijmp

00000fd2 <system_init>:
{
//    if(MCUCSR & (1<<PORF )) (PSTR("Power-on reset.\n"));
//    if(MCUCSR & (1<<EXTRF)) (PSTR("External reset!\n"));
//    if(MCUCSR & (1<<BORF )) (PSTR("Brownout reset!\n"));
//    if(MCUCSR & (1<<WDRF )) (PSTR("Watchdog reset!\n"));
    uint8_t t = MCUSR;
     fd2:	84 b7       	in	r24, 0x34	; 52

    /* Reset state for the next proper detection */
    MCUSR = 0;
     fd4:	14 be       	out	0x34, r1	; 52

    return t;
}
     fd6:	08 95       	ret

00000fd8 <timer_init>:
 */
void timer_init(void)
{

    /* CTC mode */
    TCCR0A = (1 << WGM01);
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	84 bd       	out	0x24, r24	; 36
    /* set up timer with prescaler */
    TCCR0B = TIMER_0_PRESCALER_8;
     fdc:	85 bd       	out	0x25, r24	; 37

    /* initialize counter */
    OCR0A = 200;
     fde:	88 ec       	ldi	r24, 0xC8	; 200
     fe0:	87 bd       	out	0x27, r24	; 39

    /* enable output compare match interrupt */
    TIMSK0 |= (1 << OCIE0A);
     fe2:	ee e6       	ldi	r30, 0x6E	; 110
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	80 83       	st	Z, r24
     fec:	08 95       	ret

00000fee <__vector_14>:
 * ISR(TIMER0_OVF_vect)
 *
 * @brief Timer comparator interrupt routine
 * */
ISR(TIMER0_COMPA_vect)
{
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    g_timestamp += 100;   	/* 100us */
    1000:	80 91 46 04 	lds	r24, 0x0446
    1004:	90 91 47 04 	lds	r25, 0x0447
    1008:	a0 91 48 04 	lds	r26, 0x0448
    100c:	b0 91 49 04 	lds	r27, 0x0449
    1010:	8c 59       	subi	r24, 0x9C	; 156
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	af 4f       	sbci	r26, 0xFF	; 255
    1016:	bf 4f       	sbci	r27, 0xFF	; 255
    1018:	80 93 46 04 	sts	0x0446, r24
    101c:	90 93 47 04 	sts	0x0447, r25
    1020:	a0 93 48 04 	sts	0x0448, r26
    1024:	b0 93 49 04 	sts	0x0449, r27
}
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <uart_putchar>:
    uart_cb = cb;
}

void uart_putchar(char c, FILE *stream)
{
    loop_until_bit_is_set(UCSRA, UDRE);
    103a:	90 91 c0 00 	lds	r25, 0x00C0
    103e:	95 ff       	sbrs	r25, 5
    1040:	fc cf       	rjmp	.-8      	; 0x103a <uart_putchar>
    UDR = c;
    1042:	80 93 c6 00 	sts	0x00C6, r24
    1046:	08 95       	ret

00001048 <uart_getchar>:
    }
}

char uart_getchar(FILE *stream)
{
    loop_until_bit_is_set(UCSRA, RXC);
    1048:	80 91 c0 00 	lds	r24, 0x00C0
    104c:	87 ff       	sbrs	r24, 7
    104e:	fc cf       	rjmp	.-8      	; 0x1048 <uart_getchar>
    return UDR;
    1050:	80 91 c6 00 	lds	r24, 0x00C6
}
    1054:	08 95       	ret

00001056 <uart_init>:

void uart_init(void)
{

    /* Enable UART power */
    power_usart0_enable();
    1056:	e4 e6       	ldi	r30, 0x64	; 100
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	80 83       	st	Z, r24

    /* configure ports double mode */
    #if USE_2X
        UCSRA |= _BV(U2X0);
    #else
        UCSRA &= ~(_BV(U2X0));
    1060:	e0 ec       	ldi	r30, 0xC0	; 192
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8d 7f       	andi	r24, 0xFD	; 253
    1068:	80 83       	st	Z, r24
    #endif

    /* configure the ports speed */
    UBRR0H = UBRRH_VALUE;
    106a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
    106e:	87 e6       	ldi	r24, 0x67	; 103
    1070:	80 93 c4 00 	sts	0x00C4, r24

    // asynchronous, 8N1 mode
//    UCSR0C |= 0x06;
    UCSRC = _BV(UCSZ1) | _BV(UCSZ0);
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	80 93 c2 00 	sts	0x00C2, r24


    /* Enable RX and TX */
    UCSR0B = _BV(RXEN) | _BV(TXEN);
    107a:	e1 ec       	ldi	r30, 0xC1	; 193
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	88 e1       	ldi	r24, 0x18	; 24
    1080:	80 83       	st	Z, r24

    /* RX interrupt */
    UCSR0B |= (1<<RXCIE0);
    1082:	80 81       	ld	r24, Z
    1084:	80 68       	ori	r24, 0x80	; 128
    1086:	80 83       	st	Z, r24
    1088:	08 95       	ret

0000108a <__vector_18>:
//    UBRRL = UBRRL_VALUE;

}

ISR(USART_RX_vect)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    /* byte received ! */
    if (uart_cb != NULL)
    10ac:	e0 91 44 04 	lds	r30, 0x0444
    10b0:	f0 91 45 04 	lds	r31, 0x0445
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	19 f0       	breq	.+6      	; 0x10be <__vector_18+0x34>
    {
        uart_cb(UDR);
    10b8:	80 91 c6 00 	lds	r24, 0x00C6
    10bc:	09 95       	icall
    }
}
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <uart_callback>:

void uart_callback(t_uart_cb cb)
{
    uart_cb = cb;
    10e0:	90 93 45 04 	sts	0x0445, r25
    10e4:	80 93 44 04 	sts	0x0444, r24
    10e8:	08 95       	ret

000010ea <uart_putstring>:
    loop_until_bit_is_set(UCSRA, UDRE);
    UDR = c;
}

void uart_putstring(char *str)
{
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
    while (*str != 0)
    10f0:	89 91       	ld	r24, Y+
    10f2:	88 23       	and	r24, r24
    10f4:	29 f0       	breq	.+10     	; 0x1100 <uart_putstring+0x16>
    {
        uart_putchar(*str, NULL);
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	0e 94 1d 08 	call	0x103a	; 0x103a <uart_putchar>
    10fe:	f8 cf       	rjmp	.-16     	; 0x10f0 <uart_putstring+0x6>
        str++;
    }
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <__divmodhi4>:
    1106:	97 fb       	bst	r25, 7
    1108:	07 2e       	mov	r0, r23
    110a:	16 f4       	brtc	.+4      	; 0x1110 <__divmodhi4+0xa>
    110c:	00 94       	com	r0
    110e:	07 d0       	rcall	.+14     	; 0x111e <__divmodhi4_neg1>
    1110:	77 fd       	sbrc	r23, 7
    1112:	09 d0       	rcall	.+18     	; 0x1126 <__divmodhi4_neg2>
    1114:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
    1118:	07 fc       	sbrc	r0, 7
    111a:	05 d0       	rcall	.+10     	; 0x1126 <__divmodhi4_neg2>
    111c:	3e f4       	brtc	.+14     	; 0x112c <__divmodhi4_exit>

0000111e <__divmodhi4_neg1>:
    111e:	90 95       	com	r25
    1120:	81 95       	neg	r24
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	08 95       	ret

00001126 <__divmodhi4_neg2>:
    1126:	70 95       	com	r23
    1128:	61 95       	neg	r22
    112a:	7f 4f       	sbci	r23, 0xFF	; 255

0000112c <__divmodhi4_exit>:
    112c:	08 95       	ret

0000112e <__udivmodhi4>:
    112e:	aa 1b       	sub	r26, r26
    1130:	bb 1b       	sub	r27, r27
    1132:	51 e1       	ldi	r21, 0x11	; 17
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <__udivmodhi4_ep>

00001136 <__udivmodhi4_loop>:
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	a6 17       	cp	r26, r22
    113c:	b7 07       	cpc	r27, r23
    113e:	10 f0       	brcs	.+4      	; 0x1144 <__udivmodhi4_ep>
    1140:	a6 1b       	sub	r26, r22
    1142:	b7 0b       	sbc	r27, r23

00001144 <__udivmodhi4_ep>:
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	5a 95       	dec	r21
    114a:	a9 f7       	brne	.-22     	; 0x1136 <__udivmodhi4_loop>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	08 95       	ret

00001156 <__subsf3>:
    1156:	50 58       	subi	r21, 0x80	; 128

00001158 <__addsf3>:
    1158:	bb 27       	eor	r27, r27
    115a:	aa 27       	eor	r26, r26
    115c:	0e d0       	rcall	.+28     	; 0x117a <__addsf3x>
    115e:	48 c1       	rjmp	.+656    	; 0x13f0 <__fp_round>
    1160:	39 d1       	rcall	.+626    	; 0x13d4 <__fp_pscA>
    1162:	30 f0       	brcs	.+12     	; 0x1170 <__addsf3+0x18>
    1164:	3e d1       	rcall	.+636    	; 0x13e2 <__fp_pscB>
    1166:	20 f0       	brcs	.+8      	; 0x1170 <__addsf3+0x18>
    1168:	31 f4       	brne	.+12     	; 0x1176 <__addsf3+0x1e>
    116a:	9f 3f       	cpi	r25, 0xFF	; 255
    116c:	11 f4       	brne	.+4      	; 0x1172 <__addsf3+0x1a>
    116e:	1e f4       	brtc	.+6      	; 0x1176 <__addsf3+0x1e>
    1170:	2e c1       	rjmp	.+604    	; 0x13ce <__fp_nan>
    1172:	0e f4       	brtc	.+2      	; 0x1176 <__addsf3+0x1e>
    1174:	e0 95       	com	r30
    1176:	e7 fb       	bst	r30, 7
    1178:	24 c1       	rjmp	.+584    	; 0x13c2 <__fp_inf>

0000117a <__addsf3x>:
    117a:	e9 2f       	mov	r30, r25
    117c:	4a d1       	rcall	.+660    	; 0x1412 <__fp_split3>
    117e:	80 f3       	brcs	.-32     	; 0x1160 <__addsf3+0x8>
    1180:	ba 17       	cp	r27, r26
    1182:	62 07       	cpc	r22, r18
    1184:	73 07       	cpc	r23, r19
    1186:	84 07       	cpc	r24, r20
    1188:	95 07       	cpc	r25, r21
    118a:	18 f0       	brcs	.+6      	; 0x1192 <__addsf3x+0x18>
    118c:	71 f4       	brne	.+28     	; 0x11aa <__addsf3x+0x30>
    118e:	9e f5       	brtc	.+102    	; 0x11f6 <__addsf3x+0x7c>
    1190:	62 c1       	rjmp	.+708    	; 0x1456 <__fp_zero>
    1192:	0e f4       	brtc	.+2      	; 0x1196 <__addsf3x+0x1c>
    1194:	e0 95       	com	r30
    1196:	0b 2e       	mov	r0, r27
    1198:	ba 2f       	mov	r27, r26
    119a:	a0 2d       	mov	r26, r0
    119c:	0b 01       	movw	r0, r22
    119e:	b9 01       	movw	r22, r18
    11a0:	90 01       	movw	r18, r0
    11a2:	0c 01       	movw	r0, r24
    11a4:	ca 01       	movw	r24, r20
    11a6:	a0 01       	movw	r20, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	ff 27       	eor	r31, r31
    11ac:	59 1b       	sub	r21, r25
    11ae:	99 f0       	breq	.+38     	; 0x11d6 <__addsf3x+0x5c>
    11b0:	59 3f       	cpi	r21, 0xF9	; 249
    11b2:	50 f4       	brcc	.+20     	; 0x11c8 <__addsf3x+0x4e>
    11b4:	50 3e       	cpi	r21, 0xE0	; 224
    11b6:	68 f1       	brcs	.+90     	; 0x1212 <__addsf3x+0x98>
    11b8:	1a 16       	cp	r1, r26
    11ba:	f0 40       	sbci	r31, 0x00	; 0
    11bc:	a2 2f       	mov	r26, r18
    11be:	23 2f       	mov	r18, r19
    11c0:	34 2f       	mov	r19, r20
    11c2:	44 27       	eor	r20, r20
    11c4:	58 5f       	subi	r21, 0xF8	; 248
    11c6:	f3 cf       	rjmp	.-26     	; 0x11ae <__addsf3x+0x34>
    11c8:	46 95       	lsr	r20
    11ca:	37 95       	ror	r19
    11cc:	27 95       	ror	r18
    11ce:	a7 95       	ror	r26
    11d0:	f0 40       	sbci	r31, 0x00	; 0
    11d2:	53 95       	inc	r21
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__addsf3x+0x4e>
    11d6:	7e f4       	brtc	.+30     	; 0x11f6 <__addsf3x+0x7c>
    11d8:	1f 16       	cp	r1, r31
    11da:	ba 0b       	sbc	r27, r26
    11dc:	62 0b       	sbc	r22, r18
    11de:	73 0b       	sbc	r23, r19
    11e0:	84 0b       	sbc	r24, r20
    11e2:	ba f0       	brmi	.+46     	; 0x1212 <__addsf3x+0x98>
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	a1 f0       	breq	.+40     	; 0x1210 <__addsf3x+0x96>
    11e8:	ff 0f       	add	r31, r31
    11ea:	bb 1f       	adc	r27, r27
    11ec:	66 1f       	adc	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	88 1f       	adc	r24, r24
    11f2:	c2 f7       	brpl	.-16     	; 0x11e4 <__addsf3x+0x6a>
    11f4:	0e c0       	rjmp	.+28     	; 0x1212 <__addsf3x+0x98>
    11f6:	ba 0f       	add	r27, r26
    11f8:	62 1f       	adc	r22, r18
    11fa:	73 1f       	adc	r23, r19
    11fc:	84 1f       	adc	r24, r20
    11fe:	48 f4       	brcc	.+18     	; 0x1212 <__addsf3x+0x98>
    1200:	87 95       	ror	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	08 f0       	brcs	.+2      	; 0x1210 <__addsf3x+0x96>
    120e:	b3 cf       	rjmp	.-154    	; 0x1176 <__addsf3+0x1e>
    1210:	93 95       	inc	r25
    1212:	88 0f       	add	r24, r24
    1214:	08 f0       	brcs	.+2      	; 0x1218 <__addsf3x+0x9e>
    1216:	99 27       	eor	r25, r25
    1218:	ee 0f       	add	r30, r30
    121a:	97 95       	ror	r25
    121c:	87 95       	ror	r24
    121e:	08 95       	ret

00001220 <__divsf3>:
    1220:	0c d0       	rcall	.+24     	; 0x123a <__divsf3x>
    1222:	e6 c0       	rjmp	.+460    	; 0x13f0 <__fp_round>
    1224:	de d0       	rcall	.+444    	; 0x13e2 <__fp_pscB>
    1226:	40 f0       	brcs	.+16     	; 0x1238 <__divsf3+0x18>
    1228:	d5 d0       	rcall	.+426    	; 0x13d4 <__fp_pscA>
    122a:	30 f0       	brcs	.+12     	; 0x1238 <__divsf3+0x18>
    122c:	21 f4       	brne	.+8      	; 0x1236 <__divsf3+0x16>
    122e:	5f 3f       	cpi	r21, 0xFF	; 255
    1230:	19 f0       	breq	.+6      	; 0x1238 <__divsf3+0x18>
    1232:	c7 c0       	rjmp	.+398    	; 0x13c2 <__fp_inf>
    1234:	51 11       	cpse	r21, r1
    1236:	10 c1       	rjmp	.+544    	; 0x1458 <__fp_szero>
    1238:	ca c0       	rjmp	.+404    	; 0x13ce <__fp_nan>

0000123a <__divsf3x>:
    123a:	eb d0       	rcall	.+470    	; 0x1412 <__fp_split3>
    123c:	98 f3       	brcs	.-26     	; 0x1224 <__divsf3+0x4>

0000123e <__divsf3_pse>:
    123e:	99 23       	and	r25, r25
    1240:	c9 f3       	breq	.-14     	; 0x1234 <__divsf3+0x14>
    1242:	55 23       	and	r21, r21
    1244:	b1 f3       	breq	.-20     	; 0x1232 <__divsf3+0x12>
    1246:	95 1b       	sub	r25, r21
    1248:	55 0b       	sbc	r21, r21
    124a:	bb 27       	eor	r27, r27
    124c:	aa 27       	eor	r26, r26
    124e:	62 17       	cp	r22, r18
    1250:	73 07       	cpc	r23, r19
    1252:	84 07       	cpc	r24, r20
    1254:	38 f0       	brcs	.+14     	; 0x1264 <__divsf3_pse+0x26>
    1256:	9f 5f       	subi	r25, 0xFF	; 255
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	44 1f       	adc	r20, r20
    1260:	aa 1f       	adc	r26, r26
    1262:	a9 f3       	breq	.-22     	; 0x124e <__divsf3_pse+0x10>
    1264:	33 d0       	rcall	.+102    	; 0x12cc <__divsf3_pse+0x8e>
    1266:	0e 2e       	mov	r0, r30
    1268:	3a f0       	brmi	.+14     	; 0x1278 <__divsf3_pse+0x3a>
    126a:	e0 e8       	ldi	r30, 0x80	; 128
    126c:	30 d0       	rcall	.+96     	; 0x12ce <__divsf3_pse+0x90>
    126e:	91 50       	subi	r25, 0x01	; 1
    1270:	50 40       	sbci	r21, 0x00	; 0
    1272:	e6 95       	lsr	r30
    1274:	00 1c       	adc	r0, r0
    1276:	ca f7       	brpl	.-14     	; 0x126a <__divsf3_pse+0x2c>
    1278:	29 d0       	rcall	.+82     	; 0x12cc <__divsf3_pse+0x8e>
    127a:	fe 2f       	mov	r31, r30
    127c:	27 d0       	rcall	.+78     	; 0x12cc <__divsf3_pse+0x8e>
    127e:	66 0f       	add	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	bb 1f       	adc	r27, r27
    1286:	26 17       	cp	r18, r22
    1288:	37 07       	cpc	r19, r23
    128a:	48 07       	cpc	r20, r24
    128c:	ab 07       	cpc	r26, r27
    128e:	b0 e8       	ldi	r27, 0x80	; 128
    1290:	09 f0       	breq	.+2      	; 0x1294 <__divsf3_pse+0x56>
    1292:	bb 0b       	sbc	r27, r27
    1294:	80 2d       	mov	r24, r0
    1296:	bf 01       	movw	r22, r30
    1298:	ff 27       	eor	r31, r31
    129a:	93 58       	subi	r25, 0x83	; 131
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	2a f0       	brmi	.+10     	; 0x12aa <__divsf3_pse+0x6c>
    12a0:	9e 3f       	cpi	r25, 0xFE	; 254
    12a2:	51 05       	cpc	r21, r1
    12a4:	68 f0       	brcs	.+26     	; 0x12c0 <__divsf3_pse+0x82>
    12a6:	8d c0       	rjmp	.+282    	; 0x13c2 <__fp_inf>
    12a8:	d7 c0       	rjmp	.+430    	; 0x1458 <__fp_szero>
    12aa:	5f 3f       	cpi	r21, 0xFF	; 255
    12ac:	ec f3       	brlt	.-6      	; 0x12a8 <__divsf3_pse+0x6a>
    12ae:	98 3e       	cpi	r25, 0xE8	; 232
    12b0:	dc f3       	brlt	.-10     	; 0x12a8 <__divsf3_pse+0x6a>
    12b2:	86 95       	lsr	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	b7 95       	ror	r27
    12ba:	f7 95       	ror	r31
    12bc:	9f 5f       	subi	r25, 0xFF	; 255
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <__divsf3_pse+0x74>
    12c0:	88 0f       	add	r24, r24
    12c2:	91 1d       	adc	r25, r1
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret
    12cc:	e1 e0       	ldi	r30, 0x01	; 1
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	88 1f       	adc	r24, r24
    12d4:	bb 1f       	adc	r27, r27
    12d6:	62 17       	cp	r22, r18
    12d8:	73 07       	cpc	r23, r19
    12da:	84 07       	cpc	r24, r20
    12dc:	ba 07       	cpc	r27, r26
    12de:	20 f0       	brcs	.+8      	; 0x12e8 <__divsf3_pse+0xaa>
    12e0:	62 1b       	sub	r22, r18
    12e2:	73 0b       	sbc	r23, r19
    12e4:	84 0b       	sbc	r24, r20
    12e6:	ba 0b       	sbc	r27, r26
    12e8:	ee 1f       	adc	r30, r30
    12ea:	88 f7       	brcc	.-30     	; 0x12ce <__divsf3_pse+0x90>
    12ec:	e0 95       	com	r30
    12ee:	08 95       	ret

000012f0 <__fixunssfsi>:
    12f0:	98 d0       	rcall	.+304    	; 0x1422 <__fp_splitA>
    12f2:	88 f0       	brcs	.+34     	; 0x1316 <__fixunssfsi+0x26>
    12f4:	9f 57       	subi	r25, 0x7F	; 127
    12f6:	90 f0       	brcs	.+36     	; 0x131c <__fixunssfsi+0x2c>
    12f8:	b9 2f       	mov	r27, r25
    12fa:	99 27       	eor	r25, r25
    12fc:	b7 51       	subi	r27, 0x17	; 23
    12fe:	a0 f0       	brcs	.+40     	; 0x1328 <__fixunssfsi+0x38>
    1300:	d1 f0       	breq	.+52     	; 0x1336 <__fixunssfsi+0x46>
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	1a f0       	brmi	.+6      	; 0x1312 <__fixunssfsi+0x22>
    130c:	ba 95       	dec	r27
    130e:	c9 f7       	brne	.-14     	; 0x1302 <__fixunssfsi+0x12>
    1310:	12 c0       	rjmp	.+36     	; 0x1336 <__fixunssfsi+0x46>
    1312:	b1 30       	cpi	r27, 0x01	; 1
    1314:	81 f0       	breq	.+32     	; 0x1336 <__fixunssfsi+0x46>
    1316:	9f d0       	rcall	.+318    	; 0x1456 <__fp_zero>
    1318:	b1 e0       	ldi	r27, 0x01	; 1
    131a:	08 95       	ret
    131c:	9c c0       	rjmp	.+312    	; 0x1456 <__fp_zero>
    131e:	67 2f       	mov	r22, r23
    1320:	78 2f       	mov	r23, r24
    1322:	88 27       	eor	r24, r24
    1324:	b8 5f       	subi	r27, 0xF8	; 248
    1326:	39 f0       	breq	.+14     	; 0x1336 <__fixunssfsi+0x46>
    1328:	b9 3f       	cpi	r27, 0xF9	; 249
    132a:	cc f3       	brlt	.-14     	; 0x131e <__fixunssfsi+0x2e>
    132c:	86 95       	lsr	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	b3 95       	inc	r27
    1334:	d9 f7       	brne	.-10     	; 0x132c <__fixunssfsi+0x3c>
    1336:	3e f4       	brtc	.+14     	; 0x1346 <__fixunssfsi+0x56>
    1338:	90 95       	com	r25
    133a:	80 95       	com	r24
    133c:	70 95       	com	r23
    133e:	61 95       	neg	r22
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	8f 4f       	sbci	r24, 0xFF	; 255
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	08 95       	ret

00001348 <__floatunsisf>:
    1348:	e8 94       	clt
    134a:	09 c0       	rjmp	.+18     	; 0x135e <__floatsisf+0x12>

0000134c <__floatsisf>:
    134c:	97 fb       	bst	r25, 7
    134e:	3e f4       	brtc	.+14     	; 0x135e <__floatsisf+0x12>
    1350:	90 95       	com	r25
    1352:	80 95       	com	r24
    1354:	70 95       	com	r23
    1356:	61 95       	neg	r22
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	8f 4f       	sbci	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	99 23       	and	r25, r25
    1360:	a9 f0       	breq	.+42     	; 0x138c <__floatsisf+0x40>
    1362:	f9 2f       	mov	r31, r25
    1364:	96 e9       	ldi	r25, 0x96	; 150
    1366:	bb 27       	eor	r27, r27
    1368:	93 95       	inc	r25
    136a:	f6 95       	lsr	r31
    136c:	87 95       	ror	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b7 95       	ror	r27
    1374:	f1 11       	cpse	r31, r1
    1376:	f8 cf       	rjmp	.-16     	; 0x1368 <__floatsisf+0x1c>
    1378:	fa f4       	brpl	.+62     	; 0x13b8 <__floatsisf+0x6c>
    137a:	bb 0f       	add	r27, r27
    137c:	11 f4       	brne	.+4      	; 0x1382 <__floatsisf+0x36>
    137e:	60 ff       	sbrs	r22, 0
    1380:	1b c0       	rjmp	.+54     	; 0x13b8 <__floatsisf+0x6c>
    1382:	6f 5f       	subi	r22, 0xFF	; 255
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	16 c0       	rjmp	.+44     	; 0x13b8 <__floatsisf+0x6c>
    138c:	88 23       	and	r24, r24
    138e:	11 f0       	breq	.+4      	; 0x1394 <__floatsisf+0x48>
    1390:	96 e9       	ldi	r25, 0x96	; 150
    1392:	11 c0       	rjmp	.+34     	; 0x13b6 <__floatsisf+0x6a>
    1394:	77 23       	and	r23, r23
    1396:	21 f0       	breq	.+8      	; 0x13a0 <__floatsisf+0x54>
    1398:	9e e8       	ldi	r25, 0x8E	; 142
    139a:	87 2f       	mov	r24, r23
    139c:	76 2f       	mov	r23, r22
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <__floatsisf+0x5e>
    13a0:	66 23       	and	r22, r22
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <__floatsisf+0x74>
    13a4:	96 e8       	ldi	r25, 0x86	; 134
    13a6:	86 2f       	mov	r24, r22
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	2a f0       	brmi	.+10     	; 0x13b8 <__floatsisf+0x6c>
    13ae:	9a 95       	dec	r25
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	88 1f       	adc	r24, r24
    13b6:	da f7       	brpl	.-10     	; 0x13ae <__floatsisf+0x62>
    13b8:	88 0f       	add	r24, r24
    13ba:	96 95       	lsr	r25
    13bc:	87 95       	ror	r24
    13be:	97 f9       	bld	r25, 7
    13c0:	08 95       	ret

000013c2 <__fp_inf>:
    13c2:	97 f9       	bld	r25, 7
    13c4:	9f 67       	ori	r25, 0x7F	; 127
    13c6:	80 e8       	ldi	r24, 0x80	; 128
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	08 95       	ret

000013ce <__fp_nan>:
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	80 ec       	ldi	r24, 0xC0	; 192
    13d2:	08 95       	ret

000013d4 <__fp_pscA>:
    13d4:	00 24       	eor	r0, r0
    13d6:	0a 94       	dec	r0
    13d8:	16 16       	cp	r1, r22
    13da:	17 06       	cpc	r1, r23
    13dc:	18 06       	cpc	r1, r24
    13de:	09 06       	cpc	r0, r25
    13e0:	08 95       	ret

000013e2 <__fp_pscB>:
    13e2:	00 24       	eor	r0, r0
    13e4:	0a 94       	dec	r0
    13e6:	12 16       	cp	r1, r18
    13e8:	13 06       	cpc	r1, r19
    13ea:	14 06       	cpc	r1, r20
    13ec:	05 06       	cpc	r0, r21
    13ee:	08 95       	ret

000013f0 <__fp_round>:
    13f0:	09 2e       	mov	r0, r25
    13f2:	03 94       	inc	r0
    13f4:	00 0c       	add	r0, r0
    13f6:	11 f4       	brne	.+4      	; 0x13fc <__fp_round+0xc>
    13f8:	88 23       	and	r24, r24
    13fa:	52 f0       	brmi	.+20     	; 0x1410 <__fp_round+0x20>
    13fc:	bb 0f       	add	r27, r27
    13fe:	40 f4       	brcc	.+16     	; 0x1410 <__fp_round+0x20>
    1400:	bf 2b       	or	r27, r31
    1402:	11 f4       	brne	.+4      	; 0x1408 <__fp_round+0x18>
    1404:	60 ff       	sbrs	r22, 0
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <__fp_round+0x20>
    1408:	6f 5f       	subi	r22, 0xFF	; 255
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	8f 4f       	sbci	r24, 0xFF	; 255
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	08 95       	ret

00001412 <__fp_split3>:
    1412:	57 fd       	sbrc	r21, 7
    1414:	90 58       	subi	r25, 0x80	; 128
    1416:	44 0f       	add	r20, r20
    1418:	55 1f       	adc	r21, r21
    141a:	59 f0       	breq	.+22     	; 0x1432 <__fp_splitA+0x10>
    141c:	5f 3f       	cpi	r21, 0xFF	; 255
    141e:	71 f0       	breq	.+28     	; 0x143c <__fp_splitA+0x1a>
    1420:	47 95       	ror	r20

00001422 <__fp_splitA>:
    1422:	88 0f       	add	r24, r24
    1424:	97 fb       	bst	r25, 7
    1426:	99 1f       	adc	r25, r25
    1428:	61 f0       	breq	.+24     	; 0x1442 <__fp_splitA+0x20>
    142a:	9f 3f       	cpi	r25, 0xFF	; 255
    142c:	79 f0       	breq	.+30     	; 0x144c <__fp_splitA+0x2a>
    142e:	87 95       	ror	r24
    1430:	08 95       	ret
    1432:	12 16       	cp	r1, r18
    1434:	13 06       	cpc	r1, r19
    1436:	14 06       	cpc	r1, r20
    1438:	55 1f       	adc	r21, r21
    143a:	f2 cf       	rjmp	.-28     	; 0x1420 <__fp_split3+0xe>
    143c:	46 95       	lsr	r20
    143e:	f1 df       	rcall	.-30     	; 0x1422 <__fp_splitA>
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <__fp_splitA+0x30>
    1442:	16 16       	cp	r1, r22
    1444:	17 06       	cpc	r1, r23
    1446:	18 06       	cpc	r1, r24
    1448:	99 1f       	adc	r25, r25
    144a:	f1 cf       	rjmp	.-30     	; 0x142e <__fp_splitA+0xc>
    144c:	86 95       	lsr	r24
    144e:	71 05       	cpc	r23, r1
    1450:	61 05       	cpc	r22, r1
    1452:	08 94       	sec
    1454:	08 95       	ret

00001456 <__fp_zero>:
    1456:	e8 94       	clt

00001458 <__fp_szero>:
    1458:	bb 27       	eor	r27, r27
    145a:	66 27       	eor	r22, r22
    145c:	77 27       	eor	r23, r23
    145e:	cb 01       	movw	r24, r22
    1460:	97 f9       	bld	r25, 7
    1462:	08 95       	ret

00001464 <__mulsf3>:
    1464:	0b d0       	rcall	.+22     	; 0x147c <__mulsf3x>
    1466:	c4 cf       	rjmp	.-120    	; 0x13f0 <__fp_round>
    1468:	b5 df       	rcall	.-150    	; 0x13d4 <__fp_pscA>
    146a:	28 f0       	brcs	.+10     	; 0x1476 <__mulsf3+0x12>
    146c:	ba df       	rcall	.-140    	; 0x13e2 <__fp_pscB>
    146e:	18 f0       	brcs	.+6      	; 0x1476 <__mulsf3+0x12>
    1470:	95 23       	and	r25, r21
    1472:	09 f0       	breq	.+2      	; 0x1476 <__mulsf3+0x12>
    1474:	a6 cf       	rjmp	.-180    	; 0x13c2 <__fp_inf>
    1476:	ab cf       	rjmp	.-170    	; 0x13ce <__fp_nan>
    1478:	11 24       	eor	r1, r1
    147a:	ee cf       	rjmp	.-36     	; 0x1458 <__fp_szero>

0000147c <__mulsf3x>:
    147c:	ca df       	rcall	.-108    	; 0x1412 <__fp_split3>
    147e:	a0 f3       	brcs	.-24     	; 0x1468 <__mulsf3+0x4>

00001480 <__mulsf3_pse>:
    1480:	95 9f       	mul	r25, r21
    1482:	d1 f3       	breq	.-12     	; 0x1478 <__mulsf3+0x14>
    1484:	95 0f       	add	r25, r21
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	55 1f       	adc	r21, r21
    148a:	62 9f       	mul	r22, r18
    148c:	f0 01       	movw	r30, r0
    148e:	72 9f       	mul	r23, r18
    1490:	bb 27       	eor	r27, r27
    1492:	f0 0d       	add	r31, r0
    1494:	b1 1d       	adc	r27, r1
    1496:	63 9f       	mul	r22, r19
    1498:	aa 27       	eor	r26, r26
    149a:	f0 0d       	add	r31, r0
    149c:	b1 1d       	adc	r27, r1
    149e:	aa 1f       	adc	r26, r26
    14a0:	64 9f       	mul	r22, r20
    14a2:	66 27       	eor	r22, r22
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	66 1f       	adc	r22, r22
    14aa:	82 9f       	mul	r24, r18
    14ac:	22 27       	eor	r18, r18
    14ae:	b0 0d       	add	r27, r0
    14b0:	a1 1d       	adc	r26, r1
    14b2:	62 1f       	adc	r22, r18
    14b4:	73 9f       	mul	r23, r19
    14b6:	b0 0d       	add	r27, r0
    14b8:	a1 1d       	adc	r26, r1
    14ba:	62 1f       	adc	r22, r18
    14bc:	83 9f       	mul	r24, r19
    14be:	a0 0d       	add	r26, r0
    14c0:	61 1d       	adc	r22, r1
    14c2:	22 1f       	adc	r18, r18
    14c4:	74 9f       	mul	r23, r20
    14c6:	33 27       	eor	r19, r19
    14c8:	a0 0d       	add	r26, r0
    14ca:	61 1d       	adc	r22, r1
    14cc:	23 1f       	adc	r18, r19
    14ce:	84 9f       	mul	r24, r20
    14d0:	60 0d       	add	r22, r0
    14d2:	21 1d       	adc	r18, r1
    14d4:	82 2f       	mov	r24, r18
    14d6:	76 2f       	mov	r23, r22
    14d8:	6a 2f       	mov	r22, r26
    14da:	11 24       	eor	r1, r1
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	8a f0       	brmi	.+34     	; 0x1504 <__mulsf3_pse+0x84>
    14e2:	e1 f0       	breq	.+56     	; 0x151c <__mulsf3_pse+0x9c>
    14e4:	88 23       	and	r24, r24
    14e6:	4a f0       	brmi	.+18     	; 0x14fa <__mulsf3_pse+0x7a>
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	bb 1f       	adc	r27, r27
    14ee:	66 1f       	adc	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	91 50       	subi	r25, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__mulsf3_pse+0x64>
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	51 05       	cpc	r21, r1
    14fe:	70 f0       	brcs	.+28     	; 0x151c <__mulsf3_pse+0x9c>
    1500:	60 cf       	rjmp	.-320    	; 0x13c2 <__fp_inf>
    1502:	aa cf       	rjmp	.-172    	; 0x1458 <__fp_szero>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	ec f3       	brlt	.-6      	; 0x1502 <__mulsf3_pse+0x82>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	dc f3       	brlt	.-10     	; 0x1502 <__mulsf3_pse+0x82>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f7 95       	ror	r31
    1516:	e7 95       	ror	r30
    1518:	9f 5f       	subi	r25, 0xFF	; 255
    151a:	c1 f7       	brne	.-16     	; 0x150c <__mulsf3_pse+0x8c>
    151c:	fe 2b       	or	r31, r30
    151e:	88 0f       	add	r24, r24
    1520:	91 1d       	adc	r25, r1
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	97 f9       	bld	r25, 7
    1528:	08 95       	ret

0000152a <memset>:
    152a:	dc 01       	movw	r26, r24
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <memset+0x6>
    152e:	6d 93       	st	X+, r22
    1530:	41 50       	subi	r20, 0x01	; 1
    1532:	50 40       	sbci	r21, 0x00	; 0
    1534:	e0 f7       	brcc	.-8      	; 0x152e <memset+0x4>
    1536:	08 95       	ret

00001538 <printf>:
    1538:	a0 e0       	ldi	r26, 0x00	; 0
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e2 ea       	ldi	r30, 0xA2	; 162
    153e:	fa e0       	ldi	r31, 0x0A	; 10
    1540:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__+0x20>
    1544:	fe 01       	movw	r30, r28
    1546:	35 96       	adiw	r30, 0x05	; 5
    1548:	61 91       	ld	r22, Z+
    154a:	71 91       	ld	r23, Z+
    154c:	af 01       	movw	r20, r30
    154e:	80 91 4c 04 	lds	r24, 0x044C
    1552:	90 91 4d 04 	lds	r25, 0x044D
    1556:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <vfprintf>
    155a:	e2 e0       	ldi	r30, 0x02	; 2
    155c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__+0x20>

00001560 <vsnprintf>:
    1560:	ae e0       	ldi	r26, 0x0E	; 14
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__prologue_saves__+0x1c>
    156c:	8c 01       	movw	r16, r24
    156e:	ca 01       	movw	r24, r20
    1570:	46 e0       	ldi	r20, 0x06	; 6
    1572:	4c 83       	std	Y+4, r20	; 0x04
    1574:	1a 83       	std	Y+2, r17	; 0x02
    1576:	09 83       	std	Y+1, r16	; 0x01
    1578:	77 ff       	sbrs	r23, 7
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <vsnprintf+0x20>
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e8       	ldi	r23, 0x80	; 128
    1580:	61 50       	subi	r22, 0x01	; 1
    1582:	71 09       	sbc	r23, r1
    1584:	7e 83       	std	Y+6, r23	; 0x06
    1586:	6d 83       	std	Y+5, r22	; 0x05
    1588:	a9 01       	movw	r20, r18
    158a:	bc 01       	movw	r22, r24
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <vfprintf>
    1594:	4d 81       	ldd	r20, Y+5	; 0x05
    1596:	5e 81       	ldd	r21, Y+6	; 0x06
    1598:	57 fd       	sbrc	r21, 7
    159a:	0a c0       	rjmp	.+20     	; 0x15b0 <vsnprintf+0x50>
    159c:	2f 81       	ldd	r18, Y+7	; 0x07
    159e:	38 85       	ldd	r19, Y+8	; 0x08
    15a0:	42 17       	cp	r20, r18
    15a2:	53 07       	cpc	r21, r19
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <vsnprintf+0x48>
    15a6:	9a 01       	movw	r18, r20
    15a8:	f8 01       	movw	r30, r16
    15aa:	e2 0f       	add	r30, r18
    15ac:	f3 1f       	adc	r31, r19
    15ae:	10 82       	st	Z, r1
    15b0:	2e 96       	adiw	r28, 0x0e	; 14
    15b2:	e4 e0       	ldi	r30, 0x04	; 4
    15b4:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__epilogue_restores__+0x1c>

000015b8 <vfprintf>:
    15b8:	ac e0       	ldi	r26, 0x0C	; 12
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 ee       	ldi	r30, 0xE2	; 226
    15be:	fa e0       	ldi	r31, 0x0A	; 10
    15c0:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__prologue_saves__>
    15c4:	7c 01       	movw	r14, r24
    15c6:	6b 01       	movw	r12, r22
    15c8:	8a 01       	movw	r16, r20
    15ca:	fc 01       	movw	r30, r24
    15cc:	17 82       	std	Z+7, r1	; 0x07
    15ce:	16 82       	std	Z+6, r1	; 0x06
    15d0:	83 81       	ldd	r24, Z+3	; 0x03
    15d2:	81 ff       	sbrs	r24, 1
    15d4:	bd c1       	rjmp	.+890    	; 0x1950 <vfprintf+0x398>
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	4c 01       	movw	r8, r24
    15dc:	f7 01       	movw	r30, r14
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	f6 01       	movw	r30, r12
    15e2:	93 fd       	sbrc	r25, 3
    15e4:	85 91       	lpm	r24, Z+
    15e6:	93 ff       	sbrs	r25, 3
    15e8:	81 91       	ld	r24, Z+
    15ea:	6f 01       	movw	r12, r30
    15ec:	88 23       	and	r24, r24
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <vfprintf+0x3a>
    15f0:	ab c1       	rjmp	.+854    	; 0x1948 <vfprintf+0x390>
    15f2:	85 32       	cpi	r24, 0x25	; 37
    15f4:	39 f4       	brne	.+14     	; 0x1604 <vfprintf+0x4c>
    15f6:	93 fd       	sbrc	r25, 3
    15f8:	85 91       	lpm	r24, Z+
    15fa:	93 ff       	sbrs	r25, 3
    15fc:	81 91       	ld	r24, Z+
    15fe:	6f 01       	movw	r12, r30
    1600:	85 32       	cpi	r24, 0x25	; 37
    1602:	29 f4       	brne	.+10     	; 0x160e <vfprintf+0x56>
    1604:	b7 01       	movw	r22, r14
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    160c:	e7 cf       	rjmp	.-50     	; 0x15dc <vfprintf+0x24>
    160e:	51 2c       	mov	r5, r1
    1610:	31 2c       	mov	r3, r1
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	20 32       	cpi	r18, 0x20	; 32
    1616:	a0 f4       	brcc	.+40     	; 0x1640 <vfprintf+0x88>
    1618:	8b 32       	cpi	r24, 0x2B	; 43
    161a:	69 f0       	breq	.+26     	; 0x1636 <vfprintf+0x7e>
    161c:	30 f4       	brcc	.+12     	; 0x162a <vfprintf+0x72>
    161e:	80 32       	cpi	r24, 0x20	; 32
    1620:	59 f0       	breq	.+22     	; 0x1638 <vfprintf+0x80>
    1622:	83 32       	cpi	r24, 0x23	; 35
    1624:	69 f4       	brne	.+26     	; 0x1640 <vfprintf+0x88>
    1626:	20 61       	ori	r18, 0x10	; 16
    1628:	2c c0       	rjmp	.+88     	; 0x1682 <vfprintf+0xca>
    162a:	8d 32       	cpi	r24, 0x2D	; 45
    162c:	39 f0       	breq	.+14     	; 0x163c <vfprintf+0x84>
    162e:	80 33       	cpi	r24, 0x30	; 48
    1630:	39 f4       	brne	.+14     	; 0x1640 <vfprintf+0x88>
    1632:	21 60       	ori	r18, 0x01	; 1
    1634:	26 c0       	rjmp	.+76     	; 0x1682 <vfprintf+0xca>
    1636:	22 60       	ori	r18, 0x02	; 2
    1638:	24 60       	ori	r18, 0x04	; 4
    163a:	23 c0       	rjmp	.+70     	; 0x1682 <vfprintf+0xca>
    163c:	28 60       	ori	r18, 0x08	; 8
    163e:	21 c0       	rjmp	.+66     	; 0x1682 <vfprintf+0xca>
    1640:	27 fd       	sbrc	r18, 7
    1642:	27 c0       	rjmp	.+78     	; 0x1692 <vfprintf+0xda>
    1644:	30 ed       	ldi	r19, 0xD0	; 208
    1646:	38 0f       	add	r19, r24
    1648:	3a 30       	cpi	r19, 0x0A	; 10
    164a:	78 f4       	brcc	.+30     	; 0x166a <vfprintf+0xb2>
    164c:	26 ff       	sbrs	r18, 6
    164e:	06 c0       	rjmp	.+12     	; 0x165c <vfprintf+0xa4>
    1650:	fa e0       	ldi	r31, 0x0A	; 10
    1652:	5f 9e       	mul	r5, r31
    1654:	30 0d       	add	r19, r0
    1656:	11 24       	eor	r1, r1
    1658:	53 2e       	mov	r5, r19
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <vfprintf+0xca>
    165c:	8a e0       	ldi	r24, 0x0A	; 10
    165e:	38 9e       	mul	r3, r24
    1660:	30 0d       	add	r19, r0
    1662:	11 24       	eor	r1, r1
    1664:	33 2e       	mov	r3, r19
    1666:	20 62       	ori	r18, 0x20	; 32
    1668:	0c c0       	rjmp	.+24     	; 0x1682 <vfprintf+0xca>
    166a:	8e 32       	cpi	r24, 0x2E	; 46
    166c:	21 f4       	brne	.+8      	; 0x1676 <vfprintf+0xbe>
    166e:	26 fd       	sbrc	r18, 6
    1670:	6b c1       	rjmp	.+726    	; 0x1948 <vfprintf+0x390>
    1672:	20 64       	ori	r18, 0x40	; 64
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <vfprintf+0xca>
    1676:	8c 36       	cpi	r24, 0x6C	; 108
    1678:	11 f4       	brne	.+4      	; 0x167e <vfprintf+0xc6>
    167a:	20 68       	ori	r18, 0x80	; 128
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0xca>
    167e:	88 36       	cpi	r24, 0x68	; 104
    1680:	41 f4       	brne	.+16     	; 0x1692 <vfprintf+0xda>
    1682:	f6 01       	movw	r30, r12
    1684:	93 fd       	sbrc	r25, 3
    1686:	85 91       	lpm	r24, Z+
    1688:	93 ff       	sbrs	r25, 3
    168a:	81 91       	ld	r24, Z+
    168c:	6f 01       	movw	r12, r30
    168e:	81 11       	cpse	r24, r1
    1690:	c1 cf       	rjmp	.-126    	; 0x1614 <vfprintf+0x5c>
    1692:	98 2f       	mov	r25, r24
    1694:	9f 7d       	andi	r25, 0xDF	; 223
    1696:	95 54       	subi	r25, 0x45	; 69
    1698:	93 30       	cpi	r25, 0x03	; 3
    169a:	28 f4       	brcc	.+10     	; 0x16a6 <vfprintf+0xee>
    169c:	0c 5f       	subi	r16, 0xFC	; 252
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	ff e3       	ldi	r31, 0x3F	; 63
    16a2:	f9 83       	std	Y+1, r31	; 0x01
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <vfprintf+0x108>
    16a6:	83 36       	cpi	r24, 0x63	; 99
    16a8:	31 f0       	breq	.+12     	; 0x16b6 <vfprintf+0xfe>
    16aa:	83 37       	cpi	r24, 0x73	; 115
    16ac:	71 f0       	breq	.+28     	; 0x16ca <vfprintf+0x112>
    16ae:	83 35       	cpi	r24, 0x53	; 83
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <vfprintf+0xfc>
    16b2:	5b c0       	rjmp	.+182    	; 0x176a <vfprintf+0x1b2>
    16b4:	22 c0       	rjmp	.+68     	; 0x16fa <vfprintf+0x142>
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 81       	ld	r24, Z
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	0e 5f       	subi	r16, 0xFE	; 254
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	44 24       	eor	r4, r4
    16c2:	43 94       	inc	r4
    16c4:	51 2c       	mov	r5, r1
    16c6:	54 01       	movw	r10, r8
    16c8:	15 c0       	rjmp	.+42     	; 0x16f4 <vfprintf+0x13c>
    16ca:	38 01       	movw	r6, r16
    16cc:	f2 e0       	ldi	r31, 0x02	; 2
    16ce:	6f 0e       	add	r6, r31
    16d0:	71 1c       	adc	r7, r1
    16d2:	f8 01       	movw	r30, r16
    16d4:	a0 80       	ld	r10, Z
    16d6:	b1 80       	ldd	r11, Z+1	; 0x01
    16d8:	26 ff       	sbrs	r18, 6
    16da:	03 c0       	rjmp	.+6      	; 0x16e2 <vfprintf+0x12a>
    16dc:	65 2d       	mov	r22, r5
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x12e>
    16e2:	6f ef       	ldi	r22, 0xFF	; 255
    16e4:	7f ef       	ldi	r23, 0xFF	; 255
    16e6:	c5 01       	movw	r24, r10
    16e8:	2c 87       	std	Y+12, r18	; 0x0c
    16ea:	0e 94 b9 0c 	call	0x1972	; 0x1972 <strnlen>
    16ee:	2c 01       	movw	r4, r24
    16f0:	83 01       	movw	r16, r6
    16f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f4:	2f 77       	andi	r18, 0x7F	; 127
    16f6:	22 2e       	mov	r2, r18
    16f8:	17 c0       	rjmp	.+46     	; 0x1728 <vfprintf+0x170>
    16fa:	38 01       	movw	r6, r16
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	6f 0e       	add	r6, r31
    1700:	71 1c       	adc	r7, r1
    1702:	f8 01       	movw	r30, r16
    1704:	a0 80       	ld	r10, Z
    1706:	b1 80       	ldd	r11, Z+1	; 0x01
    1708:	26 ff       	sbrs	r18, 6
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x15a>
    170c:	65 2d       	mov	r22, r5
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <vfprintf+0x15e>
    1712:	6f ef       	ldi	r22, 0xFF	; 255
    1714:	7f ef       	ldi	r23, 0xFF	; 255
    1716:	c5 01       	movw	r24, r10
    1718:	2c 87       	std	Y+12, r18	; 0x0c
    171a:	0e 94 ae 0c 	call	0x195c	; 0x195c <strnlen_P>
    171e:	2c 01       	movw	r4, r24
    1720:	2c 85       	ldd	r18, Y+12	; 0x0c
    1722:	20 68       	ori	r18, 0x80	; 128
    1724:	22 2e       	mov	r2, r18
    1726:	83 01       	movw	r16, r6
    1728:	23 fc       	sbrc	r2, 3
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <vfprintf+0x1aa>
    172c:	83 2d       	mov	r24, r3
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	48 16       	cp	r4, r24
    1732:	59 06       	cpc	r5, r25
    1734:	b0 f4       	brcc	.+44     	; 0x1762 <vfprintf+0x1aa>
    1736:	b7 01       	movw	r22, r14
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    1740:	3a 94       	dec	r3
    1742:	f4 cf       	rjmp	.-24     	; 0x172c <vfprintf+0x174>
    1744:	f5 01       	movw	r30, r10
    1746:	27 fc       	sbrc	r2, 7
    1748:	85 91       	lpm	r24, Z+
    174a:	27 fe       	sbrs	r2, 7
    174c:	81 91       	ld	r24, Z+
    174e:	5f 01       	movw	r10, r30
    1750:	b7 01       	movw	r22, r14
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    1758:	31 10       	cpse	r3, r1
    175a:	3a 94       	dec	r3
    175c:	f1 e0       	ldi	r31, 0x01	; 1
    175e:	4f 1a       	sub	r4, r31
    1760:	51 08       	sbc	r5, r1
    1762:	41 14       	cp	r4, r1
    1764:	51 04       	cpc	r5, r1
    1766:	71 f7       	brne	.-36     	; 0x1744 <vfprintf+0x18c>
    1768:	e5 c0       	rjmp	.+458    	; 0x1934 <vfprintf+0x37c>
    176a:	84 36       	cpi	r24, 0x64	; 100
    176c:	11 f0       	breq	.+4      	; 0x1772 <vfprintf+0x1ba>
    176e:	89 36       	cpi	r24, 0x69	; 105
    1770:	39 f5       	brne	.+78     	; 0x17c0 <vfprintf+0x208>
    1772:	f8 01       	movw	r30, r16
    1774:	27 ff       	sbrs	r18, 7
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <vfprintf+0x1ce>
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	0c 5f       	subi	r16, 0xFC	; 252
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	08 c0       	rjmp	.+16     	; 0x1796 <vfprintf+0x1de>
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	88 27       	eor	r24, r24
    178c:	77 fd       	sbrc	r23, 7
    178e:	80 95       	com	r24
    1790:	98 2f       	mov	r25, r24
    1792:	0e 5f       	subi	r16, 0xFE	; 254
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	2f 76       	andi	r18, 0x6F	; 111
    1798:	b2 2e       	mov	r11, r18
    179a:	97 ff       	sbrs	r25, 7
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <vfprintf+0x1f8>
    179e:	90 95       	com	r25
    17a0:	80 95       	com	r24
    17a2:	70 95       	com	r23
    17a4:	61 95       	neg	r22
    17a6:	7f 4f       	sbci	r23, 0xFF	; 255
    17a8:	8f 4f       	sbci	r24, 0xFF	; 255
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	20 68       	ori	r18, 0x80	; 128
    17ae:	b2 2e       	mov	r11, r18
    17b0:	2a e0       	ldi	r18, 0x0A	; 10
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	a4 01       	movw	r20, r8
    17b6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__ultoa_invert>
    17ba:	a8 2e       	mov	r10, r24
    17bc:	a8 18       	sub	r10, r8
    17be:	44 c0       	rjmp	.+136    	; 0x1848 <vfprintf+0x290>
    17c0:	85 37       	cpi	r24, 0x75	; 117
    17c2:	29 f4       	brne	.+10     	; 0x17ce <vfprintf+0x216>
    17c4:	2f 7e       	andi	r18, 0xEF	; 239
    17c6:	b2 2e       	mov	r11, r18
    17c8:	2a e0       	ldi	r18, 0x0A	; 10
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	25 c0       	rjmp	.+74     	; 0x1818 <vfprintf+0x260>
    17ce:	f2 2f       	mov	r31, r18
    17d0:	f9 7f       	andi	r31, 0xF9	; 249
    17d2:	bf 2e       	mov	r11, r31
    17d4:	8f 36       	cpi	r24, 0x6F	; 111
    17d6:	c1 f0       	breq	.+48     	; 0x1808 <vfprintf+0x250>
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <vfprintf+0x228>
    17da:	88 35       	cpi	r24, 0x58	; 88
    17dc:	79 f0       	breq	.+30     	; 0x17fc <vfprintf+0x244>
    17de:	b4 c0       	rjmp	.+360    	; 0x1948 <vfprintf+0x390>
    17e0:	80 37       	cpi	r24, 0x70	; 112
    17e2:	19 f0       	breq	.+6      	; 0x17ea <vfprintf+0x232>
    17e4:	88 37       	cpi	r24, 0x78	; 120
    17e6:	21 f0       	breq	.+8      	; 0x17f0 <vfprintf+0x238>
    17e8:	af c0       	rjmp	.+350    	; 0x1948 <vfprintf+0x390>
    17ea:	2f 2f       	mov	r18, r31
    17ec:	20 61       	ori	r18, 0x10	; 16
    17ee:	b2 2e       	mov	r11, r18
    17f0:	b4 fe       	sbrs	r11, 4
    17f2:	0d c0       	rjmp	.+26     	; 0x180e <vfprintf+0x256>
    17f4:	8b 2d       	mov	r24, r11
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	b8 2e       	mov	r11, r24
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <vfprintf+0x256>
    17fc:	24 ff       	sbrs	r18, 4
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <vfprintf+0x25c>
    1800:	9f 2f       	mov	r25, r31
    1802:	96 60       	ori	r25, 0x06	; 6
    1804:	b9 2e       	mov	r11, r25
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <vfprintf+0x25c>
    1808:	28 e0       	ldi	r18, 0x08	; 8
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <vfprintf+0x260>
    180e:	20 e1       	ldi	r18, 0x10	; 16
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x260>
    1814:	20 e1       	ldi	r18, 0x10	; 16
    1816:	32 e0       	ldi	r19, 0x02	; 2
    1818:	f8 01       	movw	r30, r16
    181a:	b7 fe       	sbrs	r11, 7
    181c:	07 c0       	rjmp	.+14     	; 0x182c <vfprintf+0x274>
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	0c 5f       	subi	r16, 0xFC	; 252
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <vfprintf+0x280>
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 5f       	subi	r16, 0xFE	; 254
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	a4 01       	movw	r20, r8
    183a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__ultoa_invert>
    183e:	a8 2e       	mov	r10, r24
    1840:	a8 18       	sub	r10, r8
    1842:	fb 2d       	mov	r31, r11
    1844:	ff 77       	andi	r31, 0x7F	; 127
    1846:	bf 2e       	mov	r11, r31
    1848:	b6 fe       	sbrs	r11, 6
    184a:	0b c0       	rjmp	.+22     	; 0x1862 <vfprintf+0x2aa>
    184c:	2b 2d       	mov	r18, r11
    184e:	2e 7f       	andi	r18, 0xFE	; 254
    1850:	a5 14       	cp	r10, r5
    1852:	50 f4       	brcc	.+20     	; 0x1868 <vfprintf+0x2b0>
    1854:	b4 fe       	sbrs	r11, 4
    1856:	0a c0       	rjmp	.+20     	; 0x186c <vfprintf+0x2b4>
    1858:	b2 fc       	sbrc	r11, 2
    185a:	08 c0       	rjmp	.+16     	; 0x186c <vfprintf+0x2b4>
    185c:	2b 2d       	mov	r18, r11
    185e:	2e 7e       	andi	r18, 0xEE	; 238
    1860:	05 c0       	rjmp	.+10     	; 0x186c <vfprintf+0x2b4>
    1862:	7a 2c       	mov	r7, r10
    1864:	2b 2d       	mov	r18, r11
    1866:	03 c0       	rjmp	.+6      	; 0x186e <vfprintf+0x2b6>
    1868:	7a 2c       	mov	r7, r10
    186a:	01 c0       	rjmp	.+2      	; 0x186e <vfprintf+0x2b6>
    186c:	75 2c       	mov	r7, r5
    186e:	24 ff       	sbrs	r18, 4
    1870:	0d c0       	rjmp	.+26     	; 0x188c <vfprintf+0x2d4>
    1872:	fe 01       	movw	r30, r28
    1874:	ea 0d       	add	r30, r10
    1876:	f1 1d       	adc	r31, r1
    1878:	80 81       	ld	r24, Z
    187a:	80 33       	cpi	r24, 0x30	; 48
    187c:	11 f4       	brne	.+4      	; 0x1882 <vfprintf+0x2ca>
    187e:	29 7e       	andi	r18, 0xE9	; 233
    1880:	09 c0       	rjmp	.+18     	; 0x1894 <vfprintf+0x2dc>
    1882:	22 ff       	sbrs	r18, 2
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <vfprintf+0x2da>
    1886:	73 94       	inc	r7
    1888:	73 94       	inc	r7
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <vfprintf+0x2dc>
    188c:	82 2f       	mov	r24, r18
    188e:	86 78       	andi	r24, 0x86	; 134
    1890:	09 f0       	breq	.+2      	; 0x1894 <vfprintf+0x2dc>
    1892:	73 94       	inc	r7
    1894:	23 fd       	sbrc	r18, 3
    1896:	13 c0       	rjmp	.+38     	; 0x18be <vfprintf+0x306>
    1898:	20 ff       	sbrs	r18, 0
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x2f0>
    189c:	5a 2c       	mov	r5, r10
    189e:	73 14       	cp	r7, r3
    18a0:	18 f4       	brcc	.+6      	; 0x18a8 <vfprintf+0x2f0>
    18a2:	53 0c       	add	r5, r3
    18a4:	57 18       	sub	r5, r7
    18a6:	73 2c       	mov	r7, r3
    18a8:	73 14       	cp	r7, r3
    18aa:	68 f4       	brcc	.+26     	; 0x18c6 <vfprintf+0x30e>
    18ac:	b7 01       	movw	r22, r14
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	2c 87       	std	Y+12, r18	; 0x0c
    18b4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    18b8:	73 94       	inc	r7
    18ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    18bc:	f5 cf       	rjmp	.-22     	; 0x18a8 <vfprintf+0x2f0>
    18be:	73 14       	cp	r7, r3
    18c0:	10 f4       	brcc	.+4      	; 0x18c6 <vfprintf+0x30e>
    18c2:	37 18       	sub	r3, r7
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x310>
    18c6:	31 2c       	mov	r3, r1
    18c8:	24 ff       	sbrs	r18, 4
    18ca:	12 c0       	rjmp	.+36     	; 0x18f0 <vfprintf+0x338>
    18cc:	b7 01       	movw	r22, r14
    18ce:	80 e3       	ldi	r24, 0x30	; 48
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	2c 87       	std	Y+12, r18	; 0x0c
    18d4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    18d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18da:	22 ff       	sbrs	r18, 2
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <vfprintf+0x354>
    18de:	21 ff       	sbrs	r18, 1
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <vfprintf+0x330>
    18e2:	88 e5       	ldi	r24, 0x58	; 88
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x334>
    18e8:	88 e7       	ldi	r24, 0x78	; 120
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	b7 01       	movw	r22, r14
    18ee:	0c c0       	rjmp	.+24     	; 0x1908 <vfprintf+0x350>
    18f0:	82 2f       	mov	r24, r18
    18f2:	86 78       	andi	r24, 0x86	; 134
    18f4:	59 f0       	breq	.+22     	; 0x190c <vfprintf+0x354>
    18f6:	21 fd       	sbrc	r18, 1
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x346>
    18fa:	80 e2       	ldi	r24, 0x20	; 32
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <vfprintf+0x348>
    18fe:	8b e2       	ldi	r24, 0x2B	; 43
    1900:	27 fd       	sbrc	r18, 7
    1902:	8d e2       	ldi	r24, 0x2D	; 45
    1904:	b7 01       	movw	r22, r14
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    190c:	a5 14       	cp	r10, r5
    190e:	38 f4       	brcc	.+14     	; 0x191e <vfprintf+0x366>
    1910:	b7 01       	movw	r22, r14
    1912:	80 e3       	ldi	r24, 0x30	; 48
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    191a:	5a 94       	dec	r5
    191c:	f7 cf       	rjmp	.-18     	; 0x190c <vfprintf+0x354>
    191e:	aa 94       	dec	r10
    1920:	f4 01       	movw	r30, r8
    1922:	ea 0d       	add	r30, r10
    1924:	f1 1d       	adc	r31, r1
    1926:	80 81       	ld	r24, Z
    1928:	b7 01       	movw	r22, r14
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    1930:	a1 10       	cpse	r10, r1
    1932:	f5 cf       	rjmp	.-22     	; 0x191e <vfprintf+0x366>
    1934:	33 20       	and	r3, r3
    1936:	09 f4       	brne	.+2      	; 0x193a <vfprintf+0x382>
    1938:	51 ce       	rjmp	.-862    	; 0x15dc <vfprintf+0x24>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 c4 0c 	call	0x1988	; 0x1988 <fputc>
    1944:	3a 94       	dec	r3
    1946:	f6 cf       	rjmp	.-20     	; 0x1934 <vfprintf+0x37c>
    1948:	f7 01       	movw	r30, r14
    194a:	86 81       	ldd	r24, Z+6	; 0x06
    194c:	97 81       	ldd	r25, Z+7	; 0x07
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <vfprintf+0x39c>
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	9f ef       	ldi	r25, 0xFF	; 255
    1954:	2c 96       	adiw	r28, 0x0c	; 12
    1956:	e2 e1       	ldi	r30, 0x12	; 18
    1958:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__epilogue_restores__>

0000195c <strnlen_P>:
    195c:	fc 01       	movw	r30, r24
    195e:	05 90       	lpm	r0, Z+
    1960:	61 50       	subi	r22, 0x01	; 1
    1962:	70 40       	sbci	r23, 0x00	; 0
    1964:	01 10       	cpse	r0, r1
    1966:	d8 f7       	brcc	.-10     	; 0x195e <strnlen_P+0x2>
    1968:	80 95       	com	r24
    196a:	90 95       	com	r25
    196c:	8e 0f       	add	r24, r30
    196e:	9f 1f       	adc	r25, r31
    1970:	08 95       	ret

00001972 <strnlen>:
    1972:	fc 01       	movw	r30, r24
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	70 40       	sbci	r23, 0x00	; 0
    1978:	01 90       	ld	r0, Z+
    197a:	01 10       	cpse	r0, r1
    197c:	d8 f7       	brcc	.-10     	; 0x1974 <strnlen+0x2>
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	8e 0f       	add	r24, r30
    1984:	9f 1f       	adc	r25, r31
    1986:	08 95       	ret

00001988 <fputc>:
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	18 2f       	mov	r17, r24
    1992:	09 2f       	mov	r16, r25
    1994:	eb 01       	movw	r28, r22
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	81 fd       	sbrc	r24, 1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <fputc+0x1a>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	20 c0       	rjmp	.+64     	; 0x19e2 <fputc+0x5a>
    19a2:	82 ff       	sbrs	r24, 2
    19a4:	10 c0       	rjmp	.+32     	; 0x19c6 <fputc+0x3e>
    19a6:	4e 81       	ldd	r20, Y+6	; 0x06
    19a8:	5f 81       	ldd	r21, Y+7	; 0x07
    19aa:	2c 81       	ldd	r18, Y+4	; 0x04
    19ac:	3d 81       	ldd	r19, Y+5	; 0x05
    19ae:	42 17       	cp	r20, r18
    19b0:	53 07       	cpc	r21, r19
    19b2:	7c f4       	brge	.+30     	; 0x19d2 <fputc+0x4a>
    19b4:	e8 81       	ld	r30, Y
    19b6:	f9 81       	ldd	r31, Y+1	; 0x01
    19b8:	9f 01       	movw	r18, r30
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	39 83       	std	Y+1, r19	; 0x01
    19c0:	28 83       	st	Y, r18
    19c2:	10 83       	st	Z, r17
    19c4:	06 c0       	rjmp	.+12     	; 0x19d2 <fputc+0x4a>
    19c6:	e8 85       	ldd	r30, Y+8	; 0x08
    19c8:	f9 85       	ldd	r31, Y+9	; 0x09
    19ca:	81 2f       	mov	r24, r17
    19cc:	09 95       	icall
    19ce:	89 2b       	or	r24, r25
    19d0:	29 f7       	brne	.-54     	; 0x199c <fputc+0x14>
    19d2:	2e 81       	ldd	r18, Y+6	; 0x06
    19d4:	3f 81       	ldd	r19, Y+7	; 0x07
    19d6:	2f 5f       	subi	r18, 0xFF	; 255
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	3f 83       	std	Y+7, r19	; 0x07
    19dc:	2e 83       	std	Y+6, r18	; 0x06
    19de:	81 2f       	mov	r24, r17
    19e0:	90 2f       	mov	r25, r16
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <__ultoa_invert>:
    19ec:	fa 01       	movw	r30, r20
    19ee:	aa 27       	eor	r26, r26
    19f0:	28 30       	cpi	r18, 0x08	; 8
    19f2:	51 f1       	breq	.+84     	; 0x1a48 <__ultoa_invert+0x5c>
    19f4:	20 31       	cpi	r18, 0x10	; 16
    19f6:	81 f1       	breq	.+96     	; 0x1a58 <__ultoa_invert+0x6c>
    19f8:	e8 94       	clt
    19fa:	6f 93       	push	r22
    19fc:	6e 7f       	andi	r22, 0xFE	; 254
    19fe:	6e 5f       	subi	r22, 0xFE	; 254
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	af 4f       	sbci	r26, 0xFF	; 255
    1a08:	b1 e0       	ldi	r27, 0x01	; 1
    1a0a:	3e d0       	rcall	.+124    	; 0x1a88 <__ultoa_invert+0x9c>
    1a0c:	b4 e0       	ldi	r27, 0x04	; 4
    1a0e:	3c d0       	rcall	.+120    	; 0x1a88 <__ultoa_invert+0x9c>
    1a10:	67 0f       	add	r22, r23
    1a12:	78 1f       	adc	r23, r24
    1a14:	89 1f       	adc	r24, r25
    1a16:	9a 1f       	adc	r25, r26
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	68 0f       	add	r22, r24
    1a1c:	79 1f       	adc	r23, r25
    1a1e:	8a 1f       	adc	r24, r26
    1a20:	91 1d       	adc	r25, r1
    1a22:	a1 1d       	adc	r26, r1
    1a24:	6a 0f       	add	r22, r26
    1a26:	71 1d       	adc	r23, r1
    1a28:	81 1d       	adc	r24, r1
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	20 d0       	rcall	.+64     	; 0x1a70 <__ultoa_invert+0x84>
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <__ultoa_invert+0x48>
    1a32:	68 94       	set
    1a34:	3f 91       	pop	r19
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	26 9f       	mul	r18, r22
    1a3a:	11 24       	eor	r1, r1
    1a3c:	30 19       	sub	r19, r0
    1a3e:	30 5d       	subi	r19, 0xD0	; 208
    1a40:	31 93       	st	Z+, r19
    1a42:	de f6       	brtc	.-74     	; 0x19fa <__ultoa_invert+0xe>
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret
    1a48:	46 2f       	mov	r20, r22
    1a4a:	47 70       	andi	r20, 0x07	; 7
    1a4c:	40 5d       	subi	r20, 0xD0	; 208
    1a4e:	41 93       	st	Z+, r20
    1a50:	b3 e0       	ldi	r27, 0x03	; 3
    1a52:	0f d0       	rcall	.+30     	; 0x1a72 <__ultoa_invert+0x86>
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__ultoa_invert+0x5c>
    1a56:	f6 cf       	rjmp	.-20     	; 0x1a44 <__ultoa_invert+0x58>
    1a58:	46 2f       	mov	r20, r22
    1a5a:	4f 70       	andi	r20, 0x0F	; 15
    1a5c:	40 5d       	subi	r20, 0xD0	; 208
    1a5e:	4a 33       	cpi	r20, 0x3A	; 58
    1a60:	18 f0       	brcs	.+6      	; 0x1a68 <__ultoa_invert+0x7c>
    1a62:	49 5d       	subi	r20, 0xD9	; 217
    1a64:	31 fd       	sbrc	r19, 1
    1a66:	40 52       	subi	r20, 0x20	; 32
    1a68:	41 93       	st	Z+, r20
    1a6a:	02 d0       	rcall	.+4      	; 0x1a70 <__ultoa_invert+0x84>
    1a6c:	a9 f7       	brne	.-22     	; 0x1a58 <__ultoa_invert+0x6c>
    1a6e:	ea cf       	rjmp	.-44     	; 0x1a44 <__ultoa_invert+0x58>
    1a70:	b4 e0       	ldi	r27, 0x04	; 4
    1a72:	a6 95       	lsr	r26
    1a74:	97 95       	ror	r25
    1a76:	87 95       	ror	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	ba 95       	dec	r27
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__ultoa_invert+0x86>
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	61 05       	cpc	r22, r1
    1a84:	71 05       	cpc	r23, r1
    1a86:	08 95       	ret
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	0a 2e       	mov	r0, r26
    1a8e:	06 94       	lsr	r0
    1a90:	57 95       	ror	r21
    1a92:	47 95       	ror	r20
    1a94:	37 95       	ror	r19
    1a96:	27 95       	ror	r18
    1a98:	ba 95       	dec	r27
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__ultoa_invert+0xa2>
    1a9c:	62 0f       	add	r22, r18
    1a9e:	73 1f       	adc	r23, r19
    1aa0:	84 1f       	adc	r24, r20
    1aa2:	95 1f       	adc	r25, r21
    1aa4:	a0 1d       	adc	r26, r0
    1aa6:	08 95       	ret

00001aa8 <__prologue_saves__>:
    1aa8:	2f 92       	push	r2
    1aaa:	3f 92       	push	r3
    1aac:	4f 92       	push	r4
    1aae:	5f 92       	push	r5
    1ab0:	6f 92       	push	r6
    1ab2:	7f 92       	push	r7
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	ca 1b       	sub	r28, r26
    1ad2:	db 0b       	sbc	r29, r27
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	09 94       	ijmp

00001ae0 <__epilogue_restores__>:
    1ae0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ae2:	39 88       	ldd	r3, Y+17	; 0x11
    1ae4:	48 88       	ldd	r4, Y+16	; 0x10
    1ae6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1af0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1af2:	b9 84       	ldd	r11, Y+9	; 0x09
    1af4:	c8 84       	ldd	r12, Y+8	; 0x08
    1af6:	df 80       	ldd	r13, Y+7	; 0x07
    1af8:	ee 80       	ldd	r14, Y+6	; 0x06
    1afa:	fd 80       	ldd	r15, Y+5	; 0x05
    1afc:	0c 81       	ldd	r16, Y+4	; 0x04
    1afe:	1b 81       	ldd	r17, Y+3	; 0x03
    1b00:	aa 81       	ldd	r26, Y+2	; 0x02
    1b02:	b9 81       	ldd	r27, Y+1	; 0x01
    1b04:	ce 0f       	add	r28, r30
    1b06:	d1 1d       	adc	r29, r1
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	ed 01       	movw	r28, r26
    1b14:	08 95       	ret

00001b16 <_exit>:
    1b16:	f8 94       	cli

00001b18 <__stop_program>:
    1b18:	ff cf       	rjmp	.-2      	; 0x1b18 <__stop_program>
