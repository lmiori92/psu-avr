#include "lib.h"
#include "display.h"

#include <stdint.h>
#include <stdio.h>

#include <pthread.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/time.h>

#include <termios.h>

#include "ncurses.h"

uint32_t g_timestamp;

//void uart_putchar(char c, FILE *stream)
//{
//    printf("%c", c);
//}

//void uart_putstring(char *str)
//{
//    while (*str != 0)
//   {
//        uart_putchar(*str, NULL);
//        str++;
//    }
//}

void timer_handler (int signum)
{
    g_timestamp+=100;
}

int main(void)
{

//    char* old_env_term = secure_getenv("TERM");
//    putenv("TERM=linux");
//    setenv("TERM", old_env_term, 0);

     struct sigaction sa;
     struct itimerval timer;

     /* Install timer_handler as the signal handler for SIGVTALRM. */
     memset (&sa, 0, sizeof (sa));
     sa.sa_handler = &timer_handler;
     sigaction (SIGALRM, &sa, NULL);

     /* Configure the timer to expire after 250 msec... */
     timer.it_value.tv_sec = 0;
     timer.it_value.tv_usec = 100;
     /* ... and every 250 msec after that. */
     timer.it_interval.tv_sec = 0;
     timer.it_interval.tv_usec = 100;
     /* Start a virtual timer. It counts down whenever this process is
       executing. */
     if (setitimer (ITIMER_REAL, &timer, NULL))
     {
         printf("Failed to set the timer :-(\r\n");
     }
    
    /* this variable is our reference to the second thread */
//    pthread_t time_thread;

    /* create a second thread which executes inc_x(&x) */
   // if(pthread_create(&time_thread, NULL, time_worker, NULL)) {

//        fprintf(stderr, "Error creating thread\n");
 //       return 1;

//    }


    ncurses_set_hal(display_get_current_hal());
    display_init();

    uint32_t t = g_timestamp;
    char snprintf_buf[100];
    uint16_t counts = 0;
    display_clear_all();
    display_enable_cursor(0);
uint32_t secs = 0;
    while(1)
    {
        if (g_timestamp - t > 1000000)
        {
     //       printf("1 sec elapsed!\r\n");
            secs++;
            t = g_timestamp;
        }
        display_set_cursor(0, 0);
        display_write_string("Elapsed");
        display_set_cursor(1, 0);
        snprintf(snprintf_buf, sizeof(snprintf_buf), "%d", secs);
        display_write_string(snprintf_buf);
        display_periodic();
    }
    
    /* wait for the second thread to finish */
//    if(pthread_join(time_thread, NULL)) {

//        fprintf(stderr, "Error joining thread\n");
//        return 2;

//    }
    
    endwin();
    
    uint16_t val;
    lib_sum(&val, 22000, 57);
    lib_sum(&val, 22000, 57);
    lib_sum(&val, 22000, 57);
    lib_sum(&val, 22000, 57);
    lib_sum(&val, 22000, 57);

    //printf("The sum is %d\r\n", val);


}
